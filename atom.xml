<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HMK&#39;s blog</title>
  <subtitle>Stay hungry. Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://HawkAaron.github.io/"/>
  <updated>2016-08-04T03:07:23.992Z</updated>
  <id>http://HawkAaron.github.io/</id>
  
  <author>
    <name>HMK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Google面试题 3| 矩阵中的最长上升路径</title>
    <link href="http://HawkAaron.github.io/2016/08/04/Google%E9%9D%A2%E8%AF%95%E9%A2%983-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E8%B7%AF%E5%BE%84/"/>
    <id>http://HawkAaron.github.io/2016/08/04/Google面试题3-矩阵中的最长上升路径/</id>
    <published>2016-08-04T02:43:00.000Z</published>
    <updated>2016-08-04T03:07:23.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given an integer matrix, find the length of the longest increasing path.</p>
<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [9,9,4],</div><div class="line">  [6,6,8],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[1, 2, 6, 9]</code>.</p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [3,4,5],</div><div class="line">  [3,2,6],</div><div class="line">  [2,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed. <a id="more"></a></p>
<h1 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a>分析解答</h1><p>通过记忆化搜索实现动态规划，记忆化搜索是搜索和动态规划的结合，在搜索过程中记录已经求解完毕的状态，使得每个状态只需进行一次搜索。在本题中，<code>cache[i][j]</code>记录在(i,j)位置可以得到的最长上升路径，其值通过搜索相邻四个位置的最大路径值确定</p>
<ol>
<li>对每个点<code>DFS</code>，在4个方向找比当前小的数</li>
<li>利用动态规划的思想得到每个点的路径最大值</li>
<li>用<code>cache</code>数组存放距离，以后不用重复计算</li>
</ol>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>记忆化搜索<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; cache)</span> </span>&#123;</div><div class="line">        <span class="comment">// if calculated before, no need to do it again</span></div><div class="line">        <span class="keyword">if</span> (cache[x][y]) <span class="keyword">return</span> cache[x][y];</div><div class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + dr[i];</div><div class="line">            <span class="keyword">int</span> ny = y + dc[i];</div><div class="line">            <span class="comment">// if out of bond OR current cell value larger than previous cell value.</span></div><div class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= matrix.size() || ny &lt; <span class="number">0</span> || ny &gt;= matrix[<span class="number">0</span>].size() ||</div><div class="line">                matrix[nx][ny] &gt;= matrix[x][y]) <span class="keyword">continue</span>;</div><div class="line">            res = max(res, dfs(matrix, nx, ny, cache) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[x][y] = res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix.empty() || matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = matrix.size(), n = matrix[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cache(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                cache[i][j] = dfs(matrix, i, j, cache);</div><div class="line">                res = max(res, cache[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="external">LeetCode 329. Longest Increasing Path in a Matrix</a><br><a href="https://discuss.leetcode.com/topic/34835/15ms-concise-java-solution" target="_blank" rel="external">15ms Concise Java Solution</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;Given an integer matrix, find the length of the longest increasing path.&lt;/p&gt;
&lt;p&gt;From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nums = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [9,9,4],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [6,6,8],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [2,1,1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;4&lt;/code&gt;&lt;br&gt;The longest increasing path is &lt;code&gt;[1, 2, 6, 9]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nums = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [3,4,5],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [3,2,6],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [2,2,1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;4&lt;/code&gt;&lt;br&gt;The longest increasing path is &lt;code&gt;[3, 4, 5, 6]&lt;/code&gt;. Moving diagonally is not allowed.
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/DFS/"/>
    
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="DFS" scheme="http://HawkAaron.github.io/tags/DFS/"/>
    
      <category term="搜索" scheme="http://HawkAaron.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Longest Increasing Subsequence</title>
    <link href="http://HawkAaron.github.io/2016/08/03/Longest-Increasing-Subsequence/"/>
    <id>http://HawkAaron.github.io/2016/08/03/Longest-Increasing-Subsequence/</id>
    <published>2016-08-03T00:06:00.000Z</published>
    <updated>2016-08-04T00:14:18.866Z</updated>
    
    <content type="html"><![CDATA[<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,<br>Given <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br>The longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in $O(n^2)$ complexity.</p>
<p><strong>Follow up:</strong> Could you improve it to $O(n\log(n))$ time complexity?<a id="more"></a></p>
<h1 id="DP-solution-with-O-N-2-complexity"><a href="#DP-solution-with-O-N-2-complexity" class="headerlink" title="DP solution with O(N^2) complexity"></a>DP solution with O(N^2) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="comment">// This will be our array to track longest sequence length</span></div><div class="line">    <span class="keyword">int</span> dp[nums.size()];</div><div class="line"></div><div class="line">    <span class="comment">// Fill each position with value 1 in the array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        dp[i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Mark one pointer at i. For each i, start from j=0.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.size(); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">            <span class="comment">// It means next number contributes to increasing sequence.</span></div><div class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</div><div class="line">                <span class="comment">// But increase the value only if it results in a larger value of the sequence than dp[i]</span></div><div class="line">                <span class="comment">// It is possible that dp[i] already has larger value from some previous j'th iteration</span></div><div class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find the maximum length from the array that we just generated</span></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        res = max(res, dp[i]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-lines-C-code-with-O-NlogN-complexity"><a href="#9-lines-C-code-with-O-NlogN-complexity" class="headerlink" title="9 lines C++ code with O(NlogN) complexity"></a>9 lines C++ code with O(NlogN) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</div><div class="line">        <span class="keyword">auto</span> it = lower_bound(res.begin(), res.end(), x);</div><div class="line">        <span class="keyword">if</span> (it == res.end()) res.push_back(x);</div><div class="line">        <span class="keyword">else</span> *it = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="More-details"><a href="#More-details" class="headerlink" title="More details"></a>More details</h1><p><a href="https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation</a><br><a href="https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12" target="_blank" rel="external">https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12</a><br><a href="http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/" target="_blank" rel="external">http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an unsorted array of integers, find the length of longest increasing subsequence.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given &lt;code&gt;[10, 9, 2, 5, 3, 7, 101, 18]&lt;/code&gt;,&lt;br&gt;The longest increasing subsequence is &lt;code&gt;[2, 3, 7, 101]&lt;/code&gt;, therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.&lt;/p&gt;
&lt;p&gt;Your algorithm should run in $O(n^2)$ complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Could you improve it to $O(n\log(n))$ time complexity?
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DP" scheme="http://HawkAaron.github.io/tags/DP/"/>
    
      <category term="LeetCode" scheme="http://HawkAaron.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://HawkAaron.github.io/2016/08/02/hello-world/"/>
    <id>http://HawkAaron.github.io/2016/08/02/hello-world/</id>
    <published>2016-08-02T12:12:36.490Z</published>
    <updated>2016-08-03T11:57:21.416Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://HawkAaron.github.io/2016/08/01/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://HawkAaron.github.io/2016/08/01/线段树/</id>
    <published>2016-08-01T08:02:00.000Z</published>
    <updated>2016-08-03T15:21:21.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线段树的构造"><a href="#线段树的构造" class="headerlink" title="线段树的构造"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-build/" target="_blank" rel="external">线段树的构造</a></strong></h2><p>线段树是一棵二叉树，他的每个节点包含了两个额外的属性start和end用于表示该节点所代表的区间。start和end都是整数，并按照如下的方式赋值:</p>
<ul>
<li>根节点的 start 和 end 由 build 方法所给出。</li>
<li>对于节点 A 的左儿子，有 start=A.left, end=(A.left + A.right) / 2。</li>
<li>对于节点 A 的右儿子，有 start=(A.left + A.right) / 2 + 1, end=A.right。</li>
<li>如果 start 等于 end, 那么该节点是叶子节点，不再有左右儿子。</li>
</ul>
<p>实现一个 build 方法，接受 start 和 end 作为参数, 然后构造一个代表区间 [start, end] 的线段树，返回这棵线段树的根。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of SegmentTreeNode:</div><div class="line"> * class SegmentTreeNode &#123;</div><div class="line"> * public:</div><div class="line"> *     int start, end;</div><div class="line"> *     SegmentTreeNode *left, *right;</div><div class="line"> *     SegmentTreeNode(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start, this-&gt;end = end;</div><div class="line"> *         this-&gt;left = this-&gt;right = NULL;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param start, end: Denote an segment / interval</div><div class="line">     *@return: The root of Segment Tree</div><div class="line">     */</div><div class="line">    <span class="function">SegmentTreeNode * <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* node = <span class="keyword">new</span> SegmentTreeNode(start, end);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            node-&gt;left = build(start, mid);</div><div class="line">            node-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="线段树的查询"><a href="#线段树的查询" class="headerlink" title="线段树的查询"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-query/" target="_blank" rel="external">线段树的查询</a></strong></h2><p>对于一个有n个数的整数数组，在对应的线段树中, 根节点所代表的区间为0-n-1, 每个节点有一个额外的属性max，值为该节点所代表的数组区间start到end内的最大值。</p>
<p>为SegmentTree设计一个 query 的方法，接受3个参数root, start和end，线段树root所代表的数组中子区间[start, end]内的最大值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, start, end: The root of segment tree and </div><div class="line">     *                         an segment / interval</div><div class="line">     *@return: The maximum number in the interval [start, end]</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) <span class="keyword">return</span> root-&gt;max;</div><div class="line">        <span class="keyword">int</span> leftmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>, rightmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmax = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmax = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max(leftmax, rightmax);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="线段树的修改"><a href="#线段树的修改" class="headerlink" title="线段树的修改"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-modify/" target="_blank" rel="external">线段树的修改</a></strong></h2><p>对于一棵 最大线段树, 每个节点包含一个额外的 max 属性，用于存储该节点所代表区间的最大值。</p>
<p>设计一个 modify 的方法，接受三个参数 root、 index 和 value。该方法将 root 为跟的线段树中 [start, end] = [index, index] 的节点修改为了新的 value ，并确保在修改后，线段树的每个节点的 max 属性仍然具有正确的值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, index, value: The root of segment tree and </div><div class="line">     *@ change the node's value with [index, index] to the new given value</div><div class="line">     *@return: void</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;max = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;max = max(root-&gt;left-&gt;max, root-&gt;right-&gt;max);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="区间最小数"><a href="#区间最小数" class="headerlink" title="区间最小数"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/interval-minimum-number/" target="_blank" rel="external">区间最小数</a></strong></h2><p>给定一个整数数组（下标由 0 到 n-1，其中 n 表示数组的规模），以及一个查询列表。每一个查询列表有两个整数 [start, end]。 对于每个查询，计算出数组中从下标 start 到 end 之间的数的最小值，并返回在结果列表中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of Interval:</div><div class="line"> * classs Interval &#123;</div><div class="line"> *     int start, end;</div><div class="line"> *     Interval(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start;</div><div class="line"> *         this-&gt;end = end;</div><div class="line"> *     &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, * right;</div><div class="line">        <span class="keyword">int</span> start, end, min;</div><div class="line">        Node(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</div><div class="line">            <span class="keyword">this</span>-&gt;start = start;</div><div class="line">            <span class="keyword">this</span>-&gt;end = end;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">            min = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        Node* root = <span class="keyword">new</span> Node(start, end);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) </div><div class="line">            <span class="keyword">return</span> root-&gt;min;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> leftmin = <span class="number">1</span>&lt;&lt;<span class="number">30</span>, rightmin = leftmin;</div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmin = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmin = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> min(leftmin, rightmin);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Node* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;min = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;min = min(root-&gt;left-&gt;min, root-&gt;right-&gt;min);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param A, queries: Given an integer array and an query list</div><div class="line">     *@return: The result list</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intervalMinNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;Interval&gt; &amp;queries) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        <span class="keyword">if</span> (A.size() == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        Node* root = build(<span class="number">0</span>, A.size()<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.size(); i++) </div><div class="line">            modify(root, i, A[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;queries.size(); i++) &#123;</div><div class="line">            ret.push_back(query(root, queries[i].start, queries[i].end));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线段树的构造&quot;&gt;&lt;a href=&quot;#线段树的构造&quot; class=&quot;headerlink&quot; title=&quot;线段树的构造&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/segment-tree-build/&quot;&gt;线段树的构造&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;线段树是一棵二叉树，他的每个节点包含了两个额外的属性start和end用于表示该节点所代表的区间。start和end都是整数，并按照如下的方式赋值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点的 start 和 end 由 build 方法所给出。&lt;/li&gt;
&lt;li&gt;对于节点 A 的左儿子，有 start=A.left, end=(A.left + A.right) / 2。&lt;/li&gt;
&lt;li&gt;对于节点 A 的右儿子，有 start=(A.left + A.right) / 2 + 1, end=A.right。&lt;/li&gt;
&lt;li&gt;如果 start 等于 end, 那么该节点是叶子节点，不再有左右儿子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现一个 build 方法，接受 start 和 end 作为参数, 然后构造一个代表区间 [start, end] 的线段树，返回这棵线段树的根。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题6 | Count of Smaller Numbers After Self(数组计数)</title>
    <link href="http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%986-Count-of-Smaller-Numbers-After-Self(%E6%95%B0%E7%BB%84%E8%AE%A1%E6%95%B0)/"/>
    <id>http://HawkAaron.github.io/2016/08/01/Google-2016-面试题6-Count-of-Smaller-Numbers-After-Self(数组计数)/</id>
    <published>2016-08-01T04:38:00.000Z</published>
    <updated>2016-08-03T15:23:03.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给定一个数组nums,返回一个计数数组count，count[i]表示nums中第i个右边有多少个数小于nums[i]<br>Example:<br>nums = [5, 2, 6, 1]<br>输出[2,1,1,0]</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>此题不难给出O(N^2)的算法，先穷举nums中每个位置i，再穷举右边的数计算有多少个小于nums[i]。难点在于利用数据结构进行优化从而降低时间复杂度。线段树（segment tree）和平衡树（Balanced Binary Tree）是两种可以使用的数据结构。<a id="more"></a></p>
<p>线段树的每个节点表示一段区间，记录这个区间的某些信息，其基本思想是把区间一分为二，二分为四。。。直到不可再分（因此叶子节点的区间只包含一个数），如此可以把任意区间表示成log（区间大小）个子区间的拼接，以降低查询时间复杂度。在本题中，假设nums中的数字范围在0到maxnum之间，那么建树的区间为[0,maxnum]（也就是根节点所表示的区间）。每个节点记录其表示区间内的数字个数。本题涉及两种线段树基本操作：插入和查询。插入操作把nums[i]插入到线段树相应位置，同时对所有经过的区间的sum值进行累加；查询操作需要查询区间[0,nums[i]-1]所包含的数字个数，利用已经建好的线段树把查询区间分割为若干个节点所表示的区间，统计并返回这些节点的sum值之和。</p>
<p>平衡树用途更广，代码复杂度也更高，是一种保持叶子节点深度平衡的二叉搜索树，有多种方法实现，<a href="https://discuss.leetcode.com/category/395/count-of-smaller-numbers-after-self" target="_blank" rel="external">可以参照LeetCode</a>。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><h3 id="1-线段树-Segment-Tree"><a href="#1-线段树-Segment-Tree" class="headerlink" title="1.线段树 Segment Tree"></a><strong>1.线段树 Segment Tree</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> SegmentTreeNode &#123;</div><div class="line">        SegmentTreeNode* left, *right;</div><div class="line">        <span class="keyword">int</span> start, end;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        SegmentTreeNode(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> count)</div><div class="line">            : start(start), end(end), count(count) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function">SegmentTreeNode* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* root = <span class="keyword">new</span> SegmentTreeNode(start, end, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end)</div><div class="line">            <span class="keyword">return</span> root-&gt;count;</div><div class="line">        <span class="keyword">int</span> leftcount = <span class="number">0</span>, rightcount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> leftcount + rightcount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modifySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;count += value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modifySegmentTree(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modifySegmentTree(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        root-&gt;count = root-&gt;left-&gt;count + root-&gt;right-&gt;count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        SegmentTreeNode* root = build(<span class="number">-1000</span>, <span class="number">10000</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> ans = querySegmentTree(root, <span class="number">-1000</span>, nums[i]<span class="number">-1</span>);</div><div class="line">            modifySegmentTree(root, nums[i], <span class="number">1</span>);</div><div class="line">            ret.push_back(ans);</div><div class="line">        &#125;</div><div class="line">        reverse(ret.begin(), ret.end());</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>之前写的线段树居然不能有负区间，debug了好长时间，发现原来是区间中点计算有问题，应该类似于<code>int c = a + (b - a) / 2</code></p>
<h3 id="2-二叉搜索树-Binary-Search-Tree"><a href="#2-二叉搜索树-Binary-Search-Tree" class="headerlink" title="2.二叉搜索树 Binary Search Tree"></a><strong>2.二叉搜索树 Binary Search Tree</strong></h3><p>每个节点保存sum（左子树节点个数），dup（副本个数）。当插入一个数时，比它小的数的个数就是沿着树向右转时dup和sum之和，<a href="https://discuss.leetcode.com/topic/31405/9ms-short-java-bst-solution-get-answer-when-building-bst" target="_blank" rel="external">详情请见LeetCode</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum, dup = <span class="number">1</span>;</div><div class="line">        Node(<span class="keyword">int</span> v, <span class="keyword">int</span> s) : val(v), sum(s) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        Node* root = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            insert(nums[i], root, ret[i], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num, Node*&amp; root, <span class="keyword">int</span>&amp; ret, <span class="keyword">int</span> preSum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">            root = <span class="keyword">new</span> Node(num, <span class="number">0</span>);</div><div class="line">            ret = preSum;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">            root-&gt;sum++;</div><div class="line">            insert(num, root-&gt;left, ret, preSum);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; num) &#123;</div><div class="line">            insert(num, root-&gt;right, ret, preSum + root-&gt;dup + root-&gt;sum);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            root-&gt;dup++;</div><div class="line">            ret = preSum + root-&gt;sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a><strong>迭代版</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum = <span class="number">0</span>, dup = <span class="number">0</span>;</div><div class="line">        Node(<span class="keyword">int</span> v) : val(v) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        Node* root = <span class="keyword">new</span> Node(nums[nums.size()<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            ret[i] = insert(root, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Node* root, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (root-&gt;val != num) &#123;</div><div class="line">            <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">                root-&gt;sum++;</div><div class="line">                <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;left = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;left;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ret += root-&gt;dup + root-&gt;sum;</div><div class="line">                <span class="keyword">if</span> (root-&gt;right == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;right = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        root-&gt;dup++;</div><div class="line">        <span class="keyword">return</span> ret + root-&gt;sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给定一个数组nums,返回一个计数数组count，count[i]表示nums中第i个右边有多少个数小于nums[i]&lt;br&gt;Example:&lt;br&gt;nums = [5, 2, 6, 1]&lt;br&gt;输出[2,1,1,0]&lt;/p&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;此题不难给出O(N^2)的算法，先穷举nums中每个位置i，再穷举右边的数计算有多少个小于nums[i]。难点在于利用数据结构进行优化从而降低时间复杂度。线段树（segment tree）和平衡树（Balanced Binary Tree）是两种可以使用的数据结构。
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="BST" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/BST/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题5 | 岛屿计数2</title>
    <link href="http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%985-%E5%B2%9B%E5%B1%BF%E8%AE%A1%E6%95%B02/"/>
    <id>http://HawkAaron.github.io/2016/08/01/Google-2016-面试题5-岛屿计数2/</id>
    <published>2016-08-01T01:46:00.000Z</published>
    <updated>2016-08-03T15:22:40.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个m行n列的网格地图，每个位置为0或1，0表示海水1表示陆地。一开始地图全为0（没有陆地）。每次在一个位置加入一块陆地，返回此时地图中陆地的总块数（相邻陆地统计时为同一块陆地）。<br>Example:<br>操作#1: addLand(0, 0) turns the water at grid[0][0] into a land.<br><img src="http://img.blog.csdn.net/20160801094144259" alt="leetcode"><br>操作#2: addLand(0, 1) turns the water at grid[0][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094214103" alt="leetcode"><br>操作#3: addLand(1, 2) turns the water at grid[1][2] into a land.<br><img src="http://img.blog.csdn.net/20160801094236588" alt="leetcode"><br>操作#4: addLand(2, 1) turns the water at grid[2][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094255504" alt="leetcode"><br>返回答案数组: [1, 1, 2, 3]<br>你可以做到复杂度O(k log mn)吗？其中k为操作次数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。但是对于一个不断更新的地图，如果我们每次重新统计连通块个数，复杂度为O(m*n*k)，其中k为总操作个数。考虑到每次只有一个位置发生变化（从0变为1），完全不必重新统一，该陆地的产生职能影响周围四个位置。假设该陆地周围有t（p至多为4）个不连通的岛屿，那么该陆地为把这四个不同点岛屿合并为一个岛屿，使得总岛屿数下降t-1个。因此我们需要维护岛屿之间的连通性，自然的我们想到了并查集。<strong>并查集</strong>是一种解决此类问题的强力数据结构，以此题为例，初始时每个位置都是独立的、互不连通的，每个位置都有一个标签来identify自己，记录在fa数组中，fa[i]为i。当两个位置p、q相邻且都为1时，这两个位置需要统一它们的标签（表示这两个岛屿合并），即fa[p] = q。但是p、q的标签可能已经被修改，因此我们需要通过getfather函数递归找到它们的真实标签（getfather(i)的返回值也称为i的祖先），合并操作变为fa[getfather(p)] = getfather(q)。为了防止最坏情况下每次调用getfather函数都要经过m*n次递归，我们可以采用路径压缩的方法（详见代码中getfather函数），使得每个位置到其祖先的距离始终为一个很小的常数（与m、n无关）。本题中总体时间复杂度为O(m*n+k)，其中每次并查集的查询复杂度为一个常数（不超过4）。</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码 "></a><strong>参考代码 </strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numIslands2(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; positions) &#123;</div><div class="line">        <span class="keyword">bool</span> land[m][n];</div><div class="line">        <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> fa[m * n];</div><div class="line">        <span class="keyword">int</span> island = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line"></div><div class="line">        <span class="comment">// initialization</span></div><div class="line">        <span class="built_in">memset</span>(land, <span class="number">0</span>, <span class="keyword">sizeof</span>(land));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m*n; i++)</div><div class="line">            fa[i] = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;positions.size(); i++) &#123;</div><div class="line">            island++;</div><div class="line">            <span class="keyword">int</span> x = positions[i][<span class="number">0</span>], y = positions[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> f = x * n + y;</div><div class="line">            land[x][y] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;   <span class="comment">// 4 direction check</span></div><div class="line">                <span class="keyword">int</span> tx = x + dr[j];</div><div class="line">                <span class="keyword">int</span> ty = y + dc[j];</div><div class="line">                <span class="keyword">if</span> (tx &gt;=<span class="number">0</span> &amp;&amp; tx &lt; m &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; n &amp;&amp;</div><div class="line">                    land[tx][ty] &amp;&amp; getfather(fa, tx*n+ty) != f) &#123;</div><div class="line">                    fa[getfather(fa, tx*n+ty)] = f;</div><div class="line">                    island--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ret.push_back(island);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// disjoint-set and path compression</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> fa[], <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fa[i] == i) <span class="keyword">return</span> i;</div><div class="line">        <span class="keyword">return</span> fa[i] = getfather(fa, fa[i]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个m行n列的网格地图，每个位置为0或1，0表示海水1表示陆地。一开始地图全为0（没有陆地）。每次在一个位置加入一块陆地，返回此时地图中陆地的总块数（相邻陆地统计时为同一块陆地）。&lt;br&gt;Example:&lt;br&gt;操作#1: addLand(0, 0) turns the water at grid[0][0] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094144259&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#2: addLand(0, 1) turns the water at grid[0][1] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094214103&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#3: addLand(1, 2) turns the water at grid[1][2] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094236588&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#4: addLand(2, 1) turns the water at grid[2][1] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094255504&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;返回答案数组: [1, 1, 2, 3]&lt;br&gt;你可以做到复杂度O(k log mn)吗？其中k为操作次数。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="http://HawkAaron.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Number of Islands</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Number-of-Islands/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Number-of-Islands/</id>
    <published>2016-07-31T13:44:00.000Z</published>
    <updated>2016-08-03T14:14:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<p>11110<br>11010<br>11000<br>00000<br>Answer: 1</p>
<p>Example 2:</p>
<p>11000<br>11000<br>00100<br>00011<br>Answer: 3</p>
<p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">public</span>:    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] != <span class="string">'1'</span>) <span class="keyword">return</span>;</div><div class="line">        grid[x][y] = <span class="string">'2'</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            dfs(x+dr[i], y+dc[i], grid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        m = grid.size(); </div><div class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dfs(i, j, grid);</div><div class="line">                    cnt++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Source: LeetCode 200. Number of Islands</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by conne
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DFS" scheme="http://HawkAaron.github.io/tags/DFS/"/>
    
      <category term="图论" scheme="http://HawkAaron.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题3 | 摆动排序 II</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%983-%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F2/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题3-摆动排序2/</id>
    <published>2016-07-31T09:31:00.000Z</published>
    <updated>2016-08-03T15:22:32.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个整数数组nums，重新排列nums使得nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]…<br>Example:<br>nums = [1, 5, 1, 1, 6, 4], 一个可能的答案是[1, 4, 1, 5, 1, 6]<br>数据保证必定有解。</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p><strong>解法I O(nlogn)时间排序+O(n)空间辅助数组解法：</strong></p>
<ol>
<li><p>对原数组排序，得到排序后的辅助数组tmp</p>
</li>
<li><p>对原数组的偶数位下标填充tmp的末尾元素</p>
</li>
<li><p>对原数组的奇数位下标填充tmp的末尾元素</p>
</li>
</ol>
<p>算法复杂度是快速排序的复杂度O(NlogN)。<a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sz = nums.size();</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</div><div class="line">    <span class="keyword">int</span> k = sz - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解法II O(n)时间复杂度+O(1)空间复杂度解法：</strong></p>
<ol>
<li><p>使用O(n)时间复杂度的quickSelect算法，从未经排序的数组nums中选出中位数mid</p>
</li>
<li><p>参照解法I的思路，将nums数组的下标x通过函数idx()从[0, 1, 2, … , n - 1, n] 映射到 [1, 3, 5, … , 0, 2, 4, …]，得到新下标ix</p>
</li>
<li><p>以中位数mid为界，将大于mid的元素排列在ix的较小部分，而将小于mid的元素排列在ix的较大部分。</p>
</li>
</ol>
<p><strong><a href="https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing" target="_blank" rel="external">思路来源：https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing</a></strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line"></div><div class="line">    <span class="comment">// Find a median.</span></div><div class="line">    <span class="keyword">auto</span> midptr = nums.begin() + n / <span class="number">2</span>;</div><div class="line">    nth_element(nums.begin(), midptr, nums.end());</div><div class="line">    <span class="keyword">int</span> mid = *midptr;</div><div class="line"></div><div class="line">    <span class="comment">// Index-rewiring.</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> A(i) nums[(1+2*(i)) % (n|1)]</span></div><div class="line"></div><div class="line">    <span class="comment">// 3-way-partition-to-wiggly in O(n) time with O(1) space.</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (j &lt;= k) &#123;</div><div class="line">        <span class="keyword">if</span> (A(j) &gt; mid)</div><div class="line">            swap(A(i++), A(j++));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A(j) &lt; mid)</div><div class="line">            swap(A(j), A(k--));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-way-partition"><a href="#3-way-partition" class="headerlink" title="3-way-partition"></a><strong>3-way-partition</strong></h2><p><strong><a href="https://en.wikipedia.org/wiki/Dutch_national_flag_problem#Pseudocode" target="_blank" rel="external">详见维基百科</a></strong></p>
<p>伪码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">procedure three-way-partition(A : array of values, mid : value):</div><div class="line">    i ← 0</div><div class="line">    j ← 0</div><div class="line">    n ← size of A - 1</div><div class="line"></div><div class="line">    while j ≤ n:</div><div class="line">        if A[j] &lt; mid:</div><div class="line">            swap A[i] and A[j]</div><div class="line">            i ← i + 1</div><div class="line">            j ← j + 1</div><div class="line">        else if A[j] &gt; mid:</div><div class="line">            swap A[j] and A[n]</div><div class="line">            n ← n - 1</div><div class="line">        else:</div><div class="line">            j ← j + 1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个整数数组nums，重新排列nums使得nums[0] &amp;lt; nums[1] &amp;gt; nums[2] &amp;lt; nums[3]…&lt;br&gt;Example:&lt;br&gt;nums = [1, 5, 1, 1, 6, 4], 一个可能的答案是[1, 4, 1, 5, 1, 6]&lt;br&gt;数据保证必定有解。&lt;/p&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;解法I O(nlogn)时间排序+O(n)空间辅助数组解法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对原数组排序，得到排序后的辅助数组tmp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对原数组的偶数位下标填充tmp的末尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对原数组的奇数位下标填充tmp的末尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法复杂度是快速排序的复杂度O(NlogN)。
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="排序" scheme="http://HawkAaron.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题2 | 不构造树的情况下验证先序遍历</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%982-%E4%B8%8D%E6%9E%84%E9%80%A0%E6%A0%91%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%AA%8C%E8%AF%81%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题2-不构造树的情况下验证先序遍历/</id>
    <published>2016-07-31T05:10:00.000Z</published>
    <updated>2016-08-03T15:22:20.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个字符序列，问该序列是否是一棵合法的二叉树的先序遍历？<br>找到一种不需要构造二叉树的方法。<br>For example：</p>
<blockquote>
<p>“9,3,4,#,#,1,#,#,2,#,6,#,#”<br>是下面这颗二叉树的先序遍历。其中＃代表空节点。</p>
</blockquote>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>通过观察上图中二叉树我们可以发现，一棵合法的二叉树去掉某个叶子节点后仍是合法的二叉树。在给出的字符序列中，叶子节点有很明显的特征，即叶子节点之后一定紧跟两个空节点＃。通过不断的把number,#,#的子串缩成空节点#(把number,#,#子串替换为#)，如果最后字符序列可以缩短到只有一个字符＃，那它就是我们要找的合法的先序遍历了。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSerialization</span><span class="params">(<span class="built_in">string</span> preorder)</span> </span>&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span> (preorder.length() &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> index = preorder.find(<span class="string">",#,#"</span>);</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> start = index;</div><div class="line">            <span class="keyword">while</span> (start &gt; <span class="number">0</span> &amp;&amp; preorder[start<span class="number">-1</span>] != <span class="string">','</span>)</div><div class="line">                start--;</div><div class="line">            <span class="keyword">if</span> (preorder[start] == <span class="string">'#'</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            preorder.erase(start, index-start+<span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag &amp;&amp; preorder[<span class="number">0</span>] == <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="external">LeetCode 331. Verify Preorder Serialization of a Binary Tree</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个字符序列，问该序列是否是一棵合法的二叉树的先序遍历？&lt;br&gt;找到一种不需要构造二叉树的方法。&lt;br&gt;For example：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“9,3,4,#,#,1,#,#,2,#,6,#,#”&lt;br&gt;是下面这颗二叉树的先序遍历。其中＃代表空节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通过观察上图中二叉树我们可以发现，一棵合法的二叉树去掉某个叶子节点后仍是合法的二叉树。在给出的字符序列中，叶子节点有很明显的特征，即叶子节点之后一定紧跟两个空节点＃。通过不断的把number,#,#的子串缩成空节点#(把number,#,#子串替换为#)，如果最后字符序列可以缩短到只有一个字符＃，那它就是我们要找的合法的先序遍历了。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://HawkAaron.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="遍历" scheme="http://HawkAaron.github.io/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题1 | 数组补丁</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%981-%E6%95%B0%E7%BB%84%E8%A1%A5%E4%B8%81/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题1-数组补丁/</id>
    <published>2016-07-31T03:26:00.000Z</published>
    <updated>2016-08-03T15:22:09.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个从小到大排好序的整数数组nums和一个整数n，在数组中添加若干个补丁（元素）使得[1,n]的区间内的所有数都可以表示成nums中若干个数的和。返回最少需要添加的补丁个数。</p>
<blockquote>
<p>Example 1：<br>nums = [1, 3], n = 6</p>
</blockquote>
<p>返回1，表示至少需要添加1个数｛2｝，才可以表示1到6之间所有数。</p>
<blockquote>
<p>Example 2:<br>nums = [1, 5, 10], n = 20</p>
</blockquote>
<p>返回2，表示至少需要添加两个数｛2，4｝，才可以表示1到20之间所有数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答 "></a><strong>分析解答 </strong></h2><p>读者不难想到暴力搜索的做法：先穷举每一个不在数组里的数p，再穷举判断p是否可以表示为数组中若干个数的和；如果不能，则把p加入数组中，把答案加一。</p>
<p>然而，这种做法时间复杂度高且实际操作难度大（需要考虑穷举的顺序）。我们不妨先思考一个简单的问题，如果nums数组为空，那么最少需要多少个数字才能表示1到n之间所有数？相信大家都可以想到一个贪心算法，即按照1、2、4、8…都顺序添加，每次加入都数都比之前所有数的总和大1，直到总和大于n。本题的难点是预先给出了一些数，但这不影响我们的贪心策略：假设nums当前至多可以表示1到m之间的所有数，加入m+1；直到m大于等于n。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPatches</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (sum &lt; n) &#123;</div><div class="line">            <span class="keyword">while</span> (index &lt; nums.size() &amp;&amp; nums[index] &lt;= sum + <span class="number">1</span>) &#123;</div><div class="line">                sum += nums[index++];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum &lt; n) &#123;</div><div class="line">                res++;</div><div class="line">                sum += sum + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/patching-array/" target="_blank" rel="external">LeetCode 330. Patching Array</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个从小到大排好序的整数数组nums和一个整数n，在数组中添加若干个补丁（元素）使得[1,n]的区间内的所有数都可以表示成nums中若干个数的和。返回最少需要添加的补丁个数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 1：&lt;br&gt;nums = [1, 3], n = 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回1，表示至少需要添加1个数｛2｝，才可以表示1到6之间所有数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 2:&lt;br&gt;nums = [1, 5, 10], n = 20&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回2，表示至少需要添加两个数｛2，4｝，才可以表示1到20之间所有数。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数组" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Max Points on a Line</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Max-Points-on-a-Line/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Max-Points-on-a-Line/</id>
    <published>2016-07-31T01:55:00.000Z</published>
    <updated>2016-08-03T15:22:46.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>暴力枚举法。两点决定一条直线，$n$个点两两组合，可以得到$\dfrac{1}{2}n(n+1)$条直线，对每一条直线，判断$n$个点是否在该直线上，从而可以得到这条直线上的点的个数，选择最大的那条直线返回。复杂度$O(n^3)$。</p>
<p>上面的暴力枚举法以“边”为中心，再看另一种暴力枚举法，以每个“点”为中心，然后遍历剩余点，找到所有的斜率，如果斜率相同，那么一定共线对每个点，用一个哈希表，key为斜率，value为该直线上的点数，计算出哈希表后，取最大值，并更新全局最大值，最后就是结果。时间复杂度$O(n^2)$，空间复杂度$O(n)$。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序 "></a><strong>参考程序 </strong></h2><p>1.以“边”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * struct Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() : x(0), y(0) &#123;&#125;</div><div class="line"> *     Point(int a, int b) : x(a), y(b) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, zero = <span class="number">0</span>;</div><div class="line">                <span class="keyword">double</span> a, b, c;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    zero = <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    a = points[j].x - points[i].x;</div><div class="line">                    b = points[j].y - points[i].y;</div><div class="line">                    c = a * points[i].y - b * points[i].x;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;sz; k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (zero == <span class="number">0</span> &amp;&amp; a * points[k].y - b * points[k].x == c ||</div><div class="line">                        zero == <span class="number">1</span> &amp;&amp; points[k].x == points[i].x)</div><div class="line">                        cnt++;</div><div class="line">                &#125;</div><div class="line">                res = max(res, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2.以“点”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; slopemap;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            slopemap.clear();</div><div class="line">            <span class="keyword">int</span> samePoint = <span class="number">0</span>, cnt = <span class="number">0</span>, maxp = <span class="number">1</span>;</div><div class="line">            <span class="keyword">double</span> slope;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    slope = numeric_limits&lt;<span class="keyword">double</span>&gt;::infinity();</div><div class="line">                    <span class="keyword">if</span> (points[i].y == points[j].y) &#123;</div><div class="line">                        samePoint++;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    slope = (points[i].y - points[j].y) * <span class="number">1.0</span> / (points[i].x - points[j].x);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (slopemap.find(slope) != slopemap.end()) &#123;</div><div class="line">                    cnt = ++slopemap[slope];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    cnt = slopemap[slope] = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                maxp = max(maxp, cnt);</div><div class="line">            &#125;</div><div class="line">            res = max(res, maxp + samePoint);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.&lt;/p&gt;
&lt;h2 id=&quot;算法分析&quot;&gt;&lt;a href=&quot;#算法分析&quot; class=&quot;headerlink&quot; title=&quot;算法分析 &quot;&gt;&lt;/a&gt;&lt;strong&gt;算法分析 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;暴力枚举法。两点决定一条直线，$n$个点两两组合，可以得到$\dfrac{1}{2}n(n+1)$条直线，对每一条直线，判断$n$个点是否在该直线上，从而可以得到这条直线上的点的个数，选择最大的那条直线返回。复杂度$O(n^3)$。&lt;/p&gt;
&lt;p&gt;上面的暴力枚举法以“边”为中心，再看另一种暴力枚举法，以每个“点”为中心，然后遍历剩余点，找到所有的斜率，如果斜率相同，那么一定共线对每个点，用一个哈希表，key为斜率，value为该直线上的点数，计算出哈希表后，取最大值，并更新全局最大值，最后就是结果。时间复杂度$O(n^2)$，空间复杂度$O(n)$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="平面几何" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95/"/>
    
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="几何" scheme="http://HawkAaron.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>轴对称</title>
    <link href="http://HawkAaron.github.io/2016/07/31/%E8%BD%B4%E5%AF%B9%E7%A7%B0/"/>
    <id>http://HawkAaron.github.io/2016/07/31/轴对称/</id>
    <published>2016-07-31T01:27:00.000Z</published>
    <updated>2016-08-03T15:23:16.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给定平面上的n个点，问是否存在一条平行于y轴的直线，使得这n个点相对于这条直线对称。</p>
<h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow-up "></a><strong>Follow-up </strong></h2><p>是否存在一条直线使得这n个点关于这条直线对称？<a id="more"></a></p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>因为对称轴一定平行于y轴，对称轴的特点就是每一个点都在另一边有一个对应的点。<strong>最左边的点一定对应某个最右边的点，因此最左边的点和最右边的点的中点应该在对称轴上。</strong></p>
<p>找到了对称轴的位置，我们就可以通过HashMap判断是否每一个点都有对应的点，最后输出答案即可。</p>
<p><strong>时间复杂度为O(n)。</strong></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Point &#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>) : x(x), y(y) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Point&gt; points;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; pmap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</div><div class="line">        Point p;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; p.x &gt;&gt; p.y;</div><div class="line">            points.push_back(p);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxv = -INF, minv = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            maxv = max(points[i].x, maxv);</div><div class="line">            minv = min(points[i].x, minv);</div><div class="line">            pmap[points[i].y].insert(points[i].x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;setx = pmap[points[i].y];</div><div class="line">            <span class="keyword">if</span> (setx.find(maxv + minv - points[i].x) == setx.end()) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        flag ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</div><div class="line">        points.clear();</div><div class="line">        pmap.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LeetCode相关练习题"><a href="#LeetCode相关练习题" class="headerlink" title="LeetCode相关练习题"></a><strong>LeetCode相关练习题</strong></h2><p><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="external">https://leetcode.com/problems/max-points-on-a-line/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给定平面上的n个点，问是否存在一条平行于y轴的直线，使得这n个点相对于这条直线对称。&lt;/p&gt;
&lt;h2 id=&quot;Follow-up&quot;&gt;&lt;a href=&quot;#Follow-up&quot; class=&quot;headerlink&quot; title=&quot;Follow-up &quot;&gt;&lt;/a&gt;&lt;strong&gt;Follow-up &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;是否存在一条直线使得这n个点关于这条直线对称？
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="HashMap" scheme="http://HawkAaron.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>adb无线调试</title>
    <link href="http://HawkAaron.github.io/2016/05/29/adb%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>http://HawkAaron.github.io/2016/05/29/adb无线调试/</id>
    <published>2016-05-29T09:35:00.000Z</published>
    <updated>2016-08-03T10:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android开发会用到 adb，调试用的设备一般会选择模拟器，但不管怎么说没有真机流畅，而且有些场景还必须得用真机。问题是真机调试还得用数据线，连上电脑后各种弹框下载简直受不了。这里介绍一下如何通过WiFi无线调试：<br><a id="more"></a></p>
<h2 id="0x00-前期准备"><a href="#0x00-前期准备" class="headerlink" title="0x00 前期准备"></a><strong>0x00 前期准备</strong></h2><ol>
<li>无线调试的前提是终端设备在同一局域网（能相互ping通即可），这里我们在 PC 创建一个免费WiFi，手机连上。</li>
<li>手机需要root权限，以便于后面进行相关设置（目前各大厂商都有自己的权限管理中心，没有的可以刷开发版ROM或者用第三方root软件）。</li>
<li>安装<a href="https://www.baidu.com/s?wd=Android%20Terminal%20Emulator" target="_blank" rel="external">Android终端模拟器</a>。</li>
</ol>
<h2 id="0x01-终端配置"><a href="#0x01-终端配置" class="headerlink" title="0x01 终端配置"></a><strong>0x01 终端配置</strong></h2><p>打开终端模拟器，依次输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ su</div><div class="line"># stop adbd</div><div class="line"># setprop service.adb.tcp.port 5555</div><div class="line"># start adbd</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20160529171056030" alt="adbd"></p>
<p>注意<code>setprop service.adb.tcp.port 5555</code> 把adbd的监听端口号设置为默认的5555，可以换成其它的。</p>
<h2 id="0x02-连接终端"><a href="#0x02-连接终端" class="headerlink" title="0x02 连接终端"></a><strong>0x02 连接终端</strong></h2><p>首先需要获取手机的IP地址：<br>在终端模拟器中输入<code>ip addr</code> ：<br><img src="http://img.blog.csdn.net/20160529171712017" alt="ip addr"><br>可以看到下面 wlan0 的ip是 192.168.191.4<br>在CMD下输入以下命令：<br><code>adb connect 192.168.191.4</code><br>如果手机adbd的监听端口不是默认的5555，则输入以下命令：<br><code>adb connect 192.168.191.4:6666</code>（这里以6666为例）</p>
<p><img src="http://img.blog.csdn.net/20160529171921591" alt="adb devices"></p>
<p>可见已成功连接。</p>
<h2 id="0x03-调试运行"><a href="#0x03-调试运行" class="headerlink" title="0x03 调试运行"></a><strong>0x03 调试运行</strong></h2><p>这里简单的创建一个Android工程：<br><img src="http://img.blog.csdn.net/20160529172826384" alt="android"><br>注意此时 DDMS 中可以看见设备：<br><img src="http://img.blog.csdn.net/20160529172919073" alt="ddms"><br>可见我已经换了监听端口。</p>
<p>点击直接运行工程进入设备选择界面：<br><img src="http://img.blog.csdn.net/20160529173258867" alt="android device chooser"></p>
<p>选中后确定，很快地在手机中运行了：<br><img src="http://img.blog.csdn.net/20160529173457784" alt="hello world"></p>
<h2 id="0x04-步骤总结"><a href="#0x04-步骤总结" class="headerlink" title="0x04 步骤总结"></a><strong>0x04 步骤总结</strong></h2><p>1.进入android模拟终端，依次输入以下命令：<br><code>su</code> : 获取root权限（必须）<br><code>setprop service.adb.tcp.port 5555</code> ：设置adb监听端口（只用设置一次）<br><code>stop adbd</code> ：首先关闭 adbd<br><code>start adbd</code> ：然后开启 adbd<br><code>ip addr</code> ：获取手机IP，wlan0对应的IP</p>
<p>2.CMD下adb连接手机：<br><code>adb connect IP:PORT</code> : 端口默认为5555，如果设置成其它的需要在IP后显示指定<br><code>adb devices</code> ：查看已经连上的设备（可选）<br><code>adb shell</code> ：进入手机终端shell（可选）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发会用到 adb，调试用的设备一般会选择模拟器，但不管怎么说没有真机流畅，而且有些场景还必须得用真机。问题是真机调试还得用数据线，连上电脑后各种弹框下载简直受不了。这里介绍一下如何通过WiFi无线调试：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://HawkAaron.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://HawkAaron.github.io/tags/Android/"/>
    
      <category term="调试" scheme="http://HawkAaron.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="局域网" scheme="http://HawkAaron.github.io/tags/%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    
      <category term="手机" scheme="http://HawkAaron.github.io/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python开发环境搭建（Windows）</title>
    <link href="http://HawkAaron.github.io/2015/06/14/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAwin7/"/>
    <id>http://HawkAaron.github.io/2015/06/14/Python开发环境搭建win7/</id>
    <published>2015-06-14T13:47:00.000Z</published>
    <updated>2016-08-03T13:44:16.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装配置Python"><a href="#安装配置Python" class="headerlink" title="安装配置Python"></a>安装配置Python</h1><p>其实在开发python最好在ubuntu环境下，简单也便于扩展各个package。这次来讲一下如何在win7上搭建Python开发环境。由于python的跨平台性。在windows下和ubuntu下基本上没什么差别。下面从几个不步骤来搭建开发环境。</p>
<ol>
<li><p>下载（<a href="https://www.python.org/downloads/）安装python.2.7.8" target="_blank" rel="external">https://www.python.org/downloads/）安装python.2.7.8</a>. python有2.7的版本和3.x版本，建议还是使用python-2.7.x 版本，因为python的各大框架都支持2.7版本，但是不支持3.x版本。例如简介并且功能强大的webpy就不支持3.x版本，好像web2py,django 对3.x版本也支持不太好。<br>安装就按照默认安装模式即可，主要是安装完成后设置环境变量。python也要配置环境变量，不过比Java简单多了，windows7下：计算机-&gt;属性-&gt;计算机名称、域和工作组设置（更改设置）-&gt;高级-&gt;环境变量，在变量PATH中加入C:/Python27，即之前的安装路径。</p>
</li>
<li><p>在命令行输入Python，出现下图所示说明安装配置成功。<br><img src="http://img.blog.csdn.net/20150614220256424" alt=""></p>
<a id="more"></a>
</li>
</ol>
<h1 id="安装配置Pycharm-IDE开发工具"><a href="#安装配置Pycharm-IDE开发工具" class="headerlink" title="安装配置Pycharm IDE开发工具"></a>安装配置Pycharm IDE开发工具</h1><p>在python的开发过程中，刚开始一直没找到像eclipse 那样的方便的开发工具，大部分网友估计用过ecplise的pydev插件。其实早期学习的python过程，确实也用过这个工具。但是最终发现这个pycharm后，果断的放弃eclipse，因为它太好用啦。<br> PyCharm 是我用过的python编辑器中，比较顺手的一个。而且可以跨平台，在macos和windows下面都可以用，这点比较好。<br> <a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="external">pycharm的官方下载地址： http://www.jetbrains.com/pycharm/ </a><br> 我们可以下载free的社区版，这足够我们用了。安装按照默认安装即可，安装成功启动如下：代表安装成功。<br>首先预览一下 PyCharm 在实际应用中的界面：<br><img src="http://img.blog.csdn.net/20150614220848906" alt=""></p>
<p>PyCharm 的激活方式：<br>1，推荐购买正版。<br>2，可以选择试用，免费试用30天。<br>3，网上找激活码：<br>用户名：yueting3527<br>注册码：<br>===== LICENSE BEGIN =====<br>93347-12042010<br>00001FMHemWIs”6wozMZnat3IgXKXJ<br>2!nV2I6kSO48hgGLa9JNgjQ5oKz1Us<br>FFR8k”nGzJHzjQT6IBG!1fbQZn9!Vi<br>===== LICENSE END =====</p>
<h1 id="Pycharm的使用"><a href="#Pycharm的使用" class="headerlink" title="Pycharm的使用"></a>Pycharm的使用</h1><ol>
<li>点击Create New Project.</li>
<li>输入项目名、路径、选择python解释器。如果没有出现python解释器，进入步骤3.<br><img src="http://img.blog.csdn.net/20150614221056309" alt=""></li>
<li>选择python解释器。可以看到，一旦添加了python解释器，pycharm就会扫描出你已经安装的python扩展包，和这些扩展包的最新版本。</li>
<li>点击OK之后，就会创建一个空项目，里面包含一个.idea的文件夹，用于pycharm管理项目。</li>
<li>新建一个文件：右键单击刚建好的helloWord项目，选择New –&gt; Python File<br><img src="http://img.blog.csdn.net/20150614221428207" alt=""></li>
<li>输入文件名：<br><img src="http://img.blog.csdn.net/20150614221552477" alt=""></li>
<li><p>进入编写界面：PyCharm的默认编辑界面很怪，会自动生成一行 <strong>author</strong> = “作者” 的头。而比较常用的文件头，如：#coding=utf-8 等，反倒没有自动生成。<br><img src="http://img.blog.csdn.net/20150614221724802" alt=""><br>输入code：print “Hello word!”<br><img src="http://img.blog.csdn.net/20150614221923517" alt=""></p>
</li>
<li><p>设置控制台：运行之前，我们发现快捷菜单上的【运行】和【调试】都是灰色的，不可触发状态。是因为，我们需要先配置一下控制台。点击运行旁边的黑色倒三角，进入【Run/Debug<br>Configurations】配置界面。（或者点击Run –&gt; Edit Configurations 也一样）<br><img src="http://img.blog.csdn.net/20150614222121670" alt=""><br>在【Run/Debug Configurations】配置界面里，点击绿色的加号，新建一个配置项，并选择python。（因为hello word 就是个python程序）<br><img src="http://img.blog.csdn.net/20150614222249308" alt=""><br>在右边的配置界面里：Name 一栏里写个名字，比如Hello。点击Scrip选项，找到刚才我们写的hello_word.py<br><img src="http://img.blog.csdn.net/20150614222438443" alt=""><br>点击ok, 自动返回到编辑界面，这时候【运行】【调试】按钮全部变绿！<br><img src="http://img.blog.csdn.net/20150614222535224" alt=""></p>
</li>
<li><p>运行：点击绿色的运行按钮，观看输出的结果：<br><img src="http://img.blog.csdn.net/20150614222630525" alt=""><br>到此，Python开发环境搭建完成，第一个Python工程已经成功运行。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装配置Python&quot;&gt;&lt;a href=&quot;#安装配置Python&quot; class=&quot;headerlink&quot; title=&quot;安装配置Python&quot;&gt;&lt;/a&gt;安装配置Python&lt;/h1&gt;&lt;p&gt;其实在开发python最好在ubuntu环境下，简单也便于扩展各个package。这次来讲一下如何在win7上搭建Python开发环境。由于python的跨平台性。在windows下和ubuntu下基本上没什么差别。下面从几个不步骤来搭建开发环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载（&lt;a href=&quot;https://www.python.org/downloads/）安装python.2.7.8&quot;&gt;https://www.python.org/downloads/）安装python.2.7.8&lt;/a&gt;. python有2.7的版本和3.x版本，建议还是使用python-2.7.x 版本，因为python的各大框架都支持2.7版本，但是不支持3.x版本。例如简介并且功能强大的webpy就不支持3.x版本，好像web2py,django 对3.x版本也支持不太好。&lt;br&gt;安装就按照默认安装模式即可，主要是安装完成后设置环境变量。python也要配置环境变量，不过比Java简单多了，windows7下：计算机-&amp;gt;属性-&amp;gt;计算机名称、域和工作组设置（更改设置）-&amp;gt;高级-&amp;gt;环境变量，在变量PATH中加入C:/Python27，即之前的安装路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在命令行输入Python，出现下图所示说明安装配置成功。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150614220256424&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://HawkAaron.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://HawkAaron.github.io/tags/Python/"/>
    
      <category term="开发工具" scheme="http://HawkAaron.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>proteus解决LED二极管不发光问题</title>
    <link href="http://HawkAaron.github.io/2015/06/07/proteus%E8%A7%A3%E5%86%B3LED%E4%BA%8C%E6%9E%81%E7%AE%A1%E4%B8%8D%E5%8F%91%E5%85%89%E9%97%AE%E9%A2%98/"/>
    <id>http://HawkAaron.github.io/2015/06/07/proteus解决LED二极管不发光问题/</id>
    <published>2015-06-07T05:11:00.000Z</published>
    <updated>2016-08-03T13:44:54.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20150607130238443" alt=""><br>如上图，LED正接不亮，这种情况是LED和电阻之间没有导线连接造成的（一般元件之间必须要有导线连接，如果直接把元件拖到后面，看起来接上去了，其实是断开的）<br><img src="http://img.blog.csdn.net/20150607130353831" alt=""><br>拖动电阻，发现的确没有连接<br><img src="http://img.blog.csdn.net/20150607130443096" alt=""><br>连接后LED正常<br><a id="more"></a><br>也许你会发现连线正常后LED依然不亮，这时你应该注意一下电阻值的设定<br><img src="http://img.blog.csdn.net/20150607130632281" alt=""><br>如上图，5k的阻值，LED不亮了<br><img src="http://img.blog.csdn.net/20150607130931719" alt=""><br>阻值设为2k时很暗，这说明阻值高了，一般我们设置为100或200</p>
<p>最后，如果你发现连接正常并且电阻值很低时LED还是不亮，那很可能是你的LED接反了，注意图中的接法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130238443&quot; alt=&quot;&quot;&gt;&lt;br&gt;如上图，LED正接不亮，这种情况是LED和电阻之间没有导线连接造成的（一般元件之间必须要有导线连接，如果直接把元件拖到后面，看起来接上去了，其实是断开的）&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130353831&quot; alt=&quot;&quot;&gt;&lt;br&gt;拖动电阻，发现的确没有连接&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130443096&quot; alt=&quot;&quot;&gt;&lt;br&gt;连接后LED正常&lt;br&gt;
    
    </summary>
    
      <category term="数字逻辑" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="Proteus" scheme="http://HawkAaron.github.io/tags/Proteus/"/>
    
      <category term="数字逻辑" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>C语言连接MySQL（codeblocks）</title>
    <link href="http://HawkAaron.github.io/2015/06/06/C%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySQL-codeblocks/"/>
    <id>http://HawkAaron.github.io/2015/06/06/C语言连接MySQL-codeblocks/</id>
    <published>2015-06-06T08:55:00.000Z</published>
    <updated>2016-08-03T11:56:56.332Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></div><div class="line"><span class="comment">/*数据库连接用宏*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HOST <span class="meta-string">"localhost"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USERNAME <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DATABASE <span class="meta-string">"mysql"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *query;</div><div class="line">    query=<span class="string">"select host,user from user"</span>;</div><div class="line">    query_sql(query);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_sql</span><span class="params">(<span class="keyword">char</span>* sql)</span></span></div><div class="line">&#123;</div><div class="line">    MYSQL my_connection; <span class="comment">/*这是一个数据库连接*/</span></div><div class="line">    <span class="keyword">int</span> res; <span class="comment">/*执行sql語句后的返回标志*/</span></div><div class="line">    MYSQL_RES *res_ptr; <span class="comment">/*指向查询结果的指针*/</span></div><div class="line">    MYSQL_FIELD *field; <span class="comment">/*字段结构指针*/</span></div><div class="line">    MYSQL_ROW result_row; <span class="comment">/*按行返回的查询信息*/</span></div><div class="line">    <span class="keyword">int</span> row, column; <span class="comment">/*查询返回的行数和列数*/</span></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="comment">/*初始化mysql连接my_connection*/</span></div><div class="line">    mysql_init(&amp;my_connection);</div><div class="line">    <span class="comment">/*建立mysql连接*/</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != mysql_real_connect(&amp;my_connection, HOST, USERNAME, PASSWORD,</div><div class="line">                                   DATABASE, <span class="number">0</span>, <span class="literal">NULL</span>, CLIENT_FOUND_ROWS))  <span class="comment">/*连接成功*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库查询query_sql连接成功！\n"</span>);</div><div class="line">        <span class="comment">/*设置查询编码为gbk，以支持中文*/</span></div><div class="line">        mysql_query(&amp;my_connection, <span class="string">"set names gbk"</span>);</div><div class="line">        res = mysql_query(&amp;my_connection, sql);</div><div class="line">        <span class="keyword">if</span> (res)   <span class="comment">/*执行失败*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Error： mysql_query !\n"</span>);</div><div class="line">            <span class="comment">/*关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>     <span class="comment">/*现在就代表执行成功了*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">/*将查询的結果给res_ptr*/</span></div><div class="line">            res_ptr = mysql_store_result(&amp;my_connection);</div><div class="line">            <span class="comment">/*如果结果不为空，就把结果print*/</span></div><div class="line">            <span class="keyword">if</span> (res_ptr)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/*取得結果的行数和*/</span></div><div class="line">                column = mysql_num_fields(res_ptr);</div><div class="line">                row = mysql_num_rows(res_ptr);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"查询到 %d 行 \n"</span>, row);</div><div class="line">                <span class="comment">/*输出結果的字段名*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; field = mysql_fetch_field(res_ptr); i++)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%10s "</span>, field-&gt;name);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                <span class="comment">/*按行输出結果*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; row+<span class="number">1</span>; i++)</div><div class="line">                &#123;</div><div class="line">                    result_row = mysql_fetch_row(res_ptr);</div><div class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; column; j++)</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%10s "</span>, result_row[j]);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*不要忘了关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库连接失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意事项：</p>
<ol>
<li>在Linker settings-&gt;Link libraries中添加libmysql.lib的路径</li>
<li>在Search directories-&gt;的Compiler中添加mysql.h的文件夹路径（总之就是让编译器能找到libmysql.lib和mysql.h）</li>
<li>在#include <mysql.h>之前添加#include <winsock2.h>（网上很多资料没有这一步，但是我这边实际操作时发现不加这一句编译无法通过）<br>运行结果：<br><img src="http://img.blog.csdn.net/20150606170050484" alt=""></winsock2.h></mysql.h></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;winsock2.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;mysql.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*数据库连接用宏*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; HOST &lt;span class=&quot;meta-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; USERNAME &lt;span class=&quot;meta-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PASSWORD &lt;span class=&quot;meta-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; DATABASE &lt;span class=&quot;meta-string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *query;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query=&lt;span class=&quot;string&quot;&gt;&quot;select host,user from user&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query_sql(query);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query_sql&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* sql)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL my_connection; &lt;span class=&quot;comment&quot;&gt;/*这是一个数据库连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res; &lt;span class=&quot;comment&quot;&gt;/*执行sql語句后的返回标志*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_RES *res_ptr; &lt;span class=&quot;comment&quot;&gt;/*指向查询结果的指针*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_FIELD *field; &lt;span class=&quot;comment&quot;&gt;/*字段结构指针*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_ROW result_row; &lt;span class=&quot;comment&quot;&gt;/*按行返回的查询信息*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, column; &lt;span class=&quot;comment&quot;&gt;/*查询返回的行数和列数*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*初始化mysql连接my_connection*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mysql_init(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*建立mysql连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != mysql_real_connect(&amp;amp;my_connection, HOST, USERNAME, PASSWORD,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                   DATABASE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, CLIENT_FOUND_ROWS))  &lt;span class=&quot;comment&quot;&gt;/*连接成功*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;数据库查询query_sql连接成功！\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*设置查询编码为gbk，以支持中文*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mysql_query(&amp;amp;my_connection, &lt;span class=&quot;string&quot;&gt;&quot;set names gbk&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res = mysql_query(&amp;amp;my_connection, sql);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res)   &lt;span class=&quot;comment&quot;&gt;/*执行失败*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error： mysql_query !\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*关闭连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            mysql_close(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;/*现在就代表执行成功了*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*将查询的結果给res_ptr*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res_ptr = mysql_store_result(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*如果结果不为空，就把结果print*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res_ptr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*取得結果的行数和*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                column = mysql_num_fields(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                row = mysql_num_rows(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;查询到 %d 行 \n&quot;&lt;/span&gt;, row);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*输出結果的字段名*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; field = mysql_fetch_field(res_ptr); i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%10s &quot;&lt;/span&gt;, field-&amp;gt;name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*按行输出結果*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; row+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result_row = mysql_fetch_row(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; column; j++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%10s &quot;&lt;/span&gt;, result_row[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*不要忘了关闭连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            mysql_close(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;数据库连接失败&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://HawkAaron.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://HawkAaron.github.io/tags/MySQL/"/>
    
      <category term="C" scheme="http://HawkAaron.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>终于解决“Git Windows客户端保存用户名与密码”的问题</title>
    <link href="http://HawkAaron.github.io/2015/06/02/Git-Windows%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://HawkAaron.github.io/2015/06/02/Git-Windows客户端保存用户名与密码的问题/</id>
    <published>2015-06-02T14:03:00.000Z</published>
    <updated>2016-08-03T13:50:18.107Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows" target="_blank" rel="external">Git - How to use netrc file on windows - Stack Overflow</a><br><img src="http://img.blog.csdn.net/20150602220505492" alt=""><br><a id="more"></a><br>这就是正确答案，我们已经验证过了，下面详细描述一下解决方法：</p>
<ol>
<li><p>在Windows中添加一个HOME环境变量，值为%USERPROFILE%，如下图：<br><img src="http://img.blog.csdn.net/20150602220742394" alt=""></p>
</li>
<li><p>在“开始》运行”中打开%Home%，新建一个名为“_netrc”的文件。</p>
</li>
<li>用记事本打开_netrc文件，输入Git服务器名、用户名、密码，并保存。示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine git.cnblogs.com</div><div class="line">login cnblogs_user</div><div class="line">password cnblogs_pwd</div></pre></td></tr></table></figure>
</li>
</ol>
<p>That is the answer, and that is exactly the fucking git!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows&quot;&gt;Git - How to use netrc file on windows - Stack Overflow&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150602220505492&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://HawkAaron.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://HawkAaron.github.io/tags/Git/"/>
    
      <category term="StackOverflow" scheme="http://HawkAaron.github.io/tags/StackOverflow/"/>
    
  </entry>
  
  <entry>
    <title>Oracle error 引号内的字符串没有正确结束</title>
    <link href="http://HawkAaron.github.io/2015/05/31/oracle-error-%E5%BC%95%E5%8F%B7%E5%86%85%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E7%BB%93%E6%9D%9F/"/>
    <id>http://HawkAaron.github.io/2015/05/31/oracle-error-引号内的字符串没有正确结束/</id>
    <published>2015-05-31T14:35:00.000Z</published>
    <updated>2016-08-03T13:03:36.860Z</updated>
    
    <content type="html"><![CDATA[<p>ERROR:<br>ORA-01756: 引号内的字符串没有正确结束 </p>
<p>SELECT DISTINCT A.JNO FROM Rt AS A WHERE NOT EXISTS (SELECT PNO FROM St AS B WHERE NOT EXISTS (SELECT JNO,PNO FROM Rt AS C WHERE C.JNO=A.JNO AND B.PNO=C.PNO)) GROUP BY A.JNO<br>                              *<br>第 1 行出现错误:<br>ORA-00933: SQL 命令未正确结束<br><a id="more"></a><br>如果确认没有语法错误，那么就是sql文件编码的问题，由于oracle是用Java写的，所以我们在写sql脚本时应该保存为ANSI编码<br>（另存为，选择编码为ANSI即可）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ERROR:&lt;br&gt;ORA-01756: 引号内的字符串没有正确结束 &lt;/p&gt;
&lt;p&gt;SELECT DISTINCT A.JNO FROM Rt AS A WHERE NOT EXISTS (SELECT PNO FROM St AS B WHERE NOT EXISTS (SELECT JNO,PNO FROM Rt AS C WHERE C.JNO=A.JNO AND B.PNO=C.PNO)) GROUP BY A.JNO&lt;br&gt;                              *&lt;br&gt;第 1 行出现错误:&lt;br&gt;ORA-00933: SQL 命令未正确结束&lt;br&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://HawkAaron.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://HawkAaron.github.io/tags/Oracle/"/>
    
      <category term="编码" scheme="http://HawkAaron.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CodeBlocks静态链接与动态链接设置</title>
    <link href="http://HawkAaron.github.io/2015/05/30/CodeBlocks%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E8%AE%BE%E7%BD%AE/"/>
    <id>http://HawkAaron.github.io/2015/05/30/CodeBlocks静态链接与动态链接设置/</id>
    <published>2015-05-30T09:30:00.000Z</published>
    <updated>2016-08-03T13:45:44.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h1><h2 id="1-静态库"><a href="#1-静态库" class="headerlink" title="1.静态库"></a>1.静态库</h2><p>之所以称之为”静态库”，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。<br>从本质上来说，一个静态库可以简单看成是一组目标文件(.o/.obj文件)的集合，静态库与汇编生成的目标文件(.o/.obj)一起链接为可执行文件。<br>静态库（后缀为.a/.lib）和.o文件格式相似。即很多目标文件经过压缩打包后形成的一个文件<br>静态库特点总结：</p>
<pre><code>1. 静态库对函数库的链接是放在编译时期完成的
2. 程序在运行时与函数库再无瓜葛，移植方便，因为代码已经嵌入到程序里面了，可以直接跟着程序走，不存在对外部文件的依赖
3. 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件，会增加原本程序的空间
</code></pre><a id="more"></a>
<p><strong>GCC编译、使用静态库</strong><br>静态库的后缀是.a(并没有强制规定)，它的产生分两步</p>
<pre><code>1. 由源文件编译生成一堆.o，每个.o里都包含这个编译单元的符号表
2. ar命令将很多.o转换成.a，成为静态库，从这点也可以看出来，库是很多.o文件的集合
</code></pre><p>编译好静态库文件之后，我们就可以在其他程序中使用静态库文件中的函数了</p>
<pre><code>1. 只需要在使用到这些公用函数的源程序中包含这些公用函数的原型声明(include对应的头文件)
2. 然后在用gcc命令生成目标文件时指明静态库名
3. gcc将会从静态库中将公用函数连接到目标文件中
4. 注意，gcc会在静态库名前加上前缀lib，然后追加扩展名.a得到的静态库文件名来查找静态库文件,因此，我们在写需要连接的库时，只写名字就可以，如libhello.a的库，只写: -lhello
</code></pre><h2 id="2-动态库"><a href="#2-动态库" class="headerlink" title="2.动态库"></a>2.动态库</h2><p>动态库文件名命名规范和静态库文件名命名规范类似，也是在动态库名增加前缀lib，但其文件扩展名为.so（.dll）。例如：我们将创建的动态库名为myhello，则动态库文件名就是libmyhello.so。<br>使用库是重用代码的一种绝佳方式。 您不必在自己创建的每个程序中重新实现同一例程，而只需对这些例程写入一次，然后从需要该功能的应用程序引用它们即可。 通过将代码放入 DLL，您节省在引用它的每个应用程序的空间，而且，您可以更新 DLL，而无需重新编译所有应用程序。<br>动态链接库 (DLL) 是作为共享函数库的可执行文件。动态链接提供了一种方法，使进程可以调用不属于其可执行代码的函数。DLL 还有助于共享数据和资源。多个应用程序可同时访问内存中单个 DLL 副本的内容。<br>动态链接与静态链接的不同之处在于它允许可执行模块（.dll 文件或 .exe 文件）仅包含在运行时定位 DLL 函数的可执行代码所需的信息。在静态链接中，链接器从静态链接库获取所有被引用的函数，并将库同代码一起放到可执行文件中。<br>使用动态链接代替静态链接有若干优点。DLL 节省内存，减少交换操作，节省磁盘空间，更易于升级，提供售后支持，提供扩展 MFC 库类的机制，支持多语言程序，并使国际版本的创建轻松完成。<br><strong>DLL 的类型</strong><br>当您在应用程序中加载 DLL 时，可以使用两种链接方法来调用导出的 DLL 函数。这两种链接方法是加载时动态链接和运行时动态链接。<br>动态库一般会有对应的导入库，方便程序静态载入动态链接库，否则你可能就需要自己LoadLibary调入DLL文件，然后再手工GetProcAddress获得对应函数了。有了导入库，你只需要链接导入库后按照头文件函数接口的声明调用函数就可以了。<br><strong>加载时动态链接</strong>（load-time dynamic linking）<br>在加载时动态链接中，应用程序像调用本地函数一样对导出的 DLL 函数进行显式调用。要使用加载时动态链接，请在编译和链接应用程序时提供头文件 (.h) 和导入库文件 (.lib)。当您这样做时，链接器将向系统提供加载 DLL 所需的信息，并在加载时解析导出的 DLL 函数的位置。<br><strong>运行时动态链接</strong>（run-time dynamic linking）<br>在运行时动态链接中，应用程序调用 LoadLibrary 函数或 LoadLibraryEx 函数以在运行时加载 DLL。成功加载 DLL 后，可以使用 GetProcAddress 函数获得要调用的导出的 DLL 函数的地址。在使用运行时动态链接时，无需使用导入库文件。</p>
<p>所谓静态、动态是指”链接”的过程存在区别:<br><img src="http://img.blog.csdn.net/20141002194726705" alt=""></p>
<h2 id="3-DLL地狱"><a href="#3-DLL地狱" class="headerlink" title="3. DLL地狱"></a>3. DLL地狱</h2><p>DLL地狱（DLL Hell）指在Microsoft Windows系统中，因为动态链接库（DLL）的版本或兼容性的问题而造成程序无法正常运行。<br>Windows早期并没有很严谨的DLL版本管理机制，以致经常发生安装了某软件后，因为其覆盖了系统上原有的同一个DLL文件，而导致原有可运行的程序无法运行。但还原回原有的DLL文件之后，所新安装的软件就无法运行。若覆盖到系统所使用的重要DLL时亦可能让系统容易死机甚至无法正常启动。<br>在CodeBlocks+GCC环境下，静态链接与动态链接设置如下：</p>
<h1 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h1><h2 id="1-建立静态链接库"><a href="#1-建立静态链接库" class="headerlink" title="1.建立静态链接库"></a>1.建立静态链接库</h2><p>示例：<br>建立静态链接库工程，工程文件包括static.h和static.cpp，具体如下，然后编译工程，会生成一个libStaticLibrary.a文件。<br>libStaticLibrary.a是用于链接的，与其他文件一起编译生成一个exe执行文件。<br><strong>static.h</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATIC_H_INCLUDED  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC_H_INCLUDED  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  </div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleAddInt</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleFunction1</span><span class="params">()</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleFunction2</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATIC_H_INCLUDED</span></span></div></pre></td></tr></table></figure></p>
<p><strong>static.cpp</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"static.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">// A function adding two integers and returning the result  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleAddInt</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">return</span> i1 + i2;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// A function doing nothing ;)  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleFunction1</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">// insert code here  </span></div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// A function always returning zero  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleFunction2</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">// insert code here  </span></div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-建立主工程"><a href="#2-建立主工程" class="headerlink" title="2.建立主工程"></a>2.建立主工程</h2><p>建立Console application，将生成一个main.cpp示例文件，在最上方添加#include “static.h”语句，这样就可以调用静态链接库里的函数了。<br><strong>main.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"static.h"</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span>&lt;&lt;SampleAddInt(a,b)&lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后选择菜单栏Project-&gt;Build Options，弹出Project Build Options，选择工程名称。在Linker settings选项卡下添加libStaticLibrary.a的路径，即<strong>添加需要的库</strong>。在Search<br> directories选项卡下的Compiler子选项卡下添加static.h所在的目录路径，即写入项目的头文件目录。最后，点击编译即可。</p>
<h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><h2 id="1-建立动态链接库"><a href="#1-建立动态链接库" class="headerlink" title="1.建立动态链接库"></a>1.建立动态链接库</h2><p>示例：<br>建立动态链接库工程，工程文件包括dynamic.h和dynamic.cpp，具体如下，然后编译工程，会生成一个libDynamicLibrary.a文件和DynamicLibrary.dll文件。<br>libDynamicLibrary.a是用于链接的，DynamicLibrary.dll用于与将要链接的exe执行文件一起工作。<br><strong>dynamic.h</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __DYNAMIC_H__  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __DYNAMIC_H__  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">/*  To use this exported function of dll, include this header </span></div><div class="line"> *  in your project. </div><div class="line"> */  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> BUILD_DLL  </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DLL_EXPORT __declspec(dllexport)  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DLL_EXPORT __declspec(dllimport)  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  </div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> DLL_EXPORT <span class="title">SomeFunction</span><span class="params">(<span class="keyword">const</span> LPCSTR sometext)</span></span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __DYNAMIC__</span></span></div></pre></td></tr></table></figure></p>
<p><strong>dynamic.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dynamic.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">// a sample exported function  </span></div><div class="line"><span class="function"><span class="keyword">void</span> DLL_EXPORT <span class="title">SomeFunction</span><span class="params">(<span class="keyword">const</span> LPCSTR sometext)</span>  </span></div><div class="line">&#123;  </div><div class="line">    MessageBoxA(<span class="number">0</span>, sometext, <span class="string">"DLL Message"</span>, MB_OK | MB_ICONINFORMATION);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">DLL_EXPORT BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">switch</span> (fdwReason)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:  </div><div class="line">            <span class="comment">// attach to process  </span></div><div class="line">            <span class="comment">// return FALSE to fail DLL load  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:  </div><div class="line">            <span class="comment">// detach from process  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:  </div><div class="line">            <span class="comment">// attach to thread  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:  </div><div class="line">            <span class="comment">// detach from thread  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> TRUE; <span class="comment">// succesful  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-建立主工程-1"><a href="#2-建立主工程-1" class="headerlink" title="2.建立主工程"></a>2.建立主工程</h2><p>建立win32 GUI project，将生成一个main.cpp示例文件，在最上方添加include “dynamic.h”语句，这样就可以调用动态链接库里的函数了。<br><strong>main.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dynamic.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">/*  Declare Windows procedure  */</span>  </div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProcedure</span> <span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;  </div><div class="line">  </div><div class="line"><span class="comment">/*  Make the class name into a global variable  */</span>  </div><div class="line"><span class="keyword">char</span> szClassName[ ] = <span class="string">"CodeBlocksWindowsApp"</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span> <span class="params">(HINSTANCE hThisInstance,  </span></span></div><div class="line">                     HINSTANCE hPrevInstance,  </div><div class="line">                     LPSTR lpszArgument,  </div><div class="line">                     <span class="keyword">int</span> nCmdShow)  </div><div class="line">&#123;  </div><div class="line">    HWND hwnd;               <span class="comment">/* This is the handle for our window */</span>  </div><div class="line">    MSG messages;            <span class="comment">/* Here messages to the application are saved */</span>  </div><div class="line">    WNDCLASSEX wincl;        <span class="comment">/* Data structure for the windowclass */</span>  </div><div class="line">  </div><div class="line">    <span class="comment">/* The Window structure */</span>  </div><div class="line">    wincl.hInstance = hThisInstance;  </div><div class="line">    wincl.lpszClassName = szClassName;  </div><div class="line">    wincl.lpfnWndProc = WindowProcedure;      <span class="comment">/* This function is called by windows */</span>  </div><div class="line">    wincl.style = CS_DBLCLKS;                 <span class="comment">/* Catch double-clicks */</span>  </div><div class="line">    wincl.cbSize = <span class="keyword">sizeof</span> (WNDCLASSEX);  </div><div class="line">  </div><div class="line">    <span class="comment">/* Use default icon and mouse-pointer */</span>  </div><div class="line">    wincl.hIcon = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);  </div><div class="line">    wincl.hIconSm = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);  </div><div class="line">    wincl.hCursor = LoadCursor (<span class="literal">NULL</span>, IDC_ARROW);  </div><div class="line">    wincl.lpszMenuName = <span class="literal">NULL</span>;                 <span class="comment">/* No menu */</span>  </div><div class="line">    wincl.cbClsExtra = <span class="number">0</span>;                      <span class="comment">/* No extra bytes after the window class */</span>  </div><div class="line">    wincl.cbWndExtra = <span class="number">0</span>;                      <span class="comment">/* structure or the window instance */</span>  </div><div class="line">    <span class="comment">/* Use Windows's default colour as the background of the window */</span>  </div><div class="line">    wincl.hbrBackground = (HBRUSH) COLOR_BACKGROUND;  </div><div class="line">  </div><div class="line">    <span class="comment">/* Register the window class, and if it fails quit the program */</span>  </div><div class="line">    <span class="keyword">if</span> (!RegisterClassEx (&amp;wincl))  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* The class is registered, let's create the program*/</span>  </div><div class="line">    hwnd = CreateWindowEx (  </div><div class="line">           <span class="number">0</span>,                   <span class="comment">/* Extended possibilites for variation */</span>  </div><div class="line">           szClassName,         <span class="comment">/* Classname */</span>  </div><div class="line">           <span class="string">"Code::Blocks Template Windows App"</span>,       <span class="comment">/* Title Text */</span>  </div><div class="line">           WS_OVERLAPPEDWINDOW, <span class="comment">/* default window */</span>  </div><div class="line">           CW_USEDEFAULT,       <span class="comment">/* Windows decides the position */</span>  </div><div class="line">           CW_USEDEFAULT,       <span class="comment">/* where the window ends up on the screen */</span>  </div><div class="line">           <span class="number">544</span>,                 <span class="comment">/* The programs width */</span>  </div><div class="line">           <span class="number">375</span>,                 <span class="comment">/* and height in pixels */</span>  </div><div class="line">           HWND_DESKTOP,        <span class="comment">/* The window is a child-window to desktop */</span>  </div><div class="line">           <span class="literal">NULL</span>,                <span class="comment">/* No menu */</span>  </div><div class="line">           hThisInstance,       <span class="comment">/* Program Instance handler */</span>  </div><div class="line">           <span class="literal">NULL</span>                 <span class="comment">/* No Window Creation data */</span>  </div><div class="line">           );  </div><div class="line">  </div><div class="line">    <span class="comment">/* Make the window visible on the screen */</span>  </div><div class="line">    ShowWindow (hwnd, nCmdShow);  </div><div class="line">  </div><div class="line">    SomeFunction(<span class="string">"Dynamic Tester"</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">/* Run the message loop. It will run until GetMessage() returns 0 */</span>  </div><div class="line">    <span class="keyword">while</span> (GetMessage (&amp;messages, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">/* Translate virtual-key messages into character messages */</span>  </div><div class="line">        TranslateMessage(&amp;messages);  </div><div class="line">        <span class="comment">/* Send message to WindowProcedure */</span>  </div><div class="line">        DispatchMessage(&amp;messages);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* The program return-value is 0 - The value that PostQuitMessage() gave */</span>  </div><div class="line">    <span class="keyword">return</span> messages.wParam;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">/*  This function is called by the Windows function DispatchMessage()  */</span>  </div><div class="line">  </div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProcedure</span> <span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">switch</span> (message)                  <span class="comment">/* handle the messages */</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">case</span> WM_DESTROY:  </div><div class="line">            PostQuitMessage (<span class="number">0</span>);       <span class="comment">/* send a WM_QUIT to the message queue */</span>  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:                      <span class="comment">/* for messages that we don't deal with */</span>  </div><div class="line">            <span class="keyword">return</span> DefWindowProc (hwnd, message, wParam, lParam);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后选择菜单栏Project-&gt;Build Options，弹出Project Build Options，选择工程名称。在Linker settings选项卡下添加libDynamicLibrary.a的路径，即<strong>添加需要的库</strong>。在Search directories选项卡下的Compiler子选项卡下添加dynamic.h所在的目录路径，即<strong>写入项目的头文件目</strong>录；在Linker子选项卡下添加libDynamicLibrary.a所在的目录路径，即<strong>写入库文件目录</strong>。最后，点击编译即可。<br>需要注意的是，以后单独运行编译后的exe执行文件时，需要将dll文件（此处为DynamicLibrary.dll）放在同一目录下，不然运行时可能会崩溃。</p>
<p>参考：<br>codeblocks 配置编译器 1配置编译器的path, include, lib <a href="http://www.verydemo.com/demo_c167_i5481.html" target="_blank" rel="external">http://www.verydemo.com/demo_c167_i5481.html</a><br>C/C++ 跨平台交叉编译、静态库/动态库编译、MinGW、Cygwin、CodeBlocks使用原理及链接参数选项 <a href="http://www.cnblogs.com/LittleHann/p/3980364.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3980364.html</a><br>什么是DLL? <a href="http://support2.microsoft.com/kb/815065/zh-cn" target="_blank" rel="external">http://support2.microsoft.com/kb/815065/zh-cn</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;静态库和动态库的区别&quot;&gt;&lt;a href=&quot;#静态库和动态库的区别&quot; class=&quot;headerlink&quot; title=&quot;静态库和动态库的区别&quot;&gt;&lt;/a&gt;静态库和动态库的区别&lt;/h1&gt;&lt;h2 id=&quot;1-静态库&quot;&gt;&lt;a href=&quot;#1-静态库&quot; class=&quot;headerlink&quot; title=&quot;1.静态库&quot;&gt;&lt;/a&gt;1.静态库&lt;/h2&gt;&lt;p&gt;之所以称之为”静态库”，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。&lt;br&gt;从本质上来说，一个静态库可以简单看成是一组目标文件(.o/.obj文件)的集合，静态库与汇编生成的目标文件(.o/.obj)一起链接为可执行文件。&lt;br&gt;静态库（后缀为.a/.lib）和.o文件格式相似。即很多目标文件经过压缩打包后形成的一个文件&lt;br&gt;静态库特点总结：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 静态库对函数库的链接是放在编译时期完成的
2. 程序在运行时与函数库再无瓜葛，移植方便，因为代码已经嵌入到程序里面了，可以直接跟着程序走，不存在对外部文件的依赖
3. 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件，会增加原本程序的空间
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="DLL" scheme="http://HawkAaron.github.io/categories/DLL/"/>
    
    
      <category term="mingw" scheme="http://HawkAaron.github.io/tags/mingw/"/>
    
      <category term="交叉编译" scheme="http://HawkAaron.github.io/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 跨平台交叉编译、静态库/动态库编译、MinGW、Cygwin、CodeBlocks使用原理及链接参数选项</title>
    <link href="http://HawkAaron.github.io/2015/05/18/CCpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E7%BC%96%E8%AF%91-MinGW-Cygwin-CodeBlocks%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9/"/>
    <id>http://HawkAaron.github.io/2015/05/18/CCpp跨平台交叉编译-静态库动态库编译-MinGW-Cygwin-CodeBlocks使用原理及链接参数选项/</id>
    <published>2015-05-18T13:00:00.000Z</published>
    <updated>2016-08-03T12:27:53.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-引言"><a href="#0-引言" class="headerlink" title="0. 引言"></a><strong>0. 引言</strong></h1><p>UNIX是一个注册商标，是要满足一大堆条件并且支付可观费用才能够被授权使用的一个操作系统。linux是unix的克隆版本，是由其创始人Linus和诸多世界知名的黑客手工打造的一个操作系统。为什么linux和unix之间有很多软件可以很轻松的移植？因为linux也满足POSIX规范，所以在运行机制上跟unix相近。同时，POSIX标准也是Linux、windows下能够进行交叉编译的基础<a id="more"></a></p>
<h2 id="0x1-POSIX-Portable-Operating-System-Interface"><a href="#0x1-POSIX-Portable-Operating-System-Interface" class="headerlink" title="0x1: POSIX(Portable Operating System Interface)"></a><strong><em>0x1: POSIX(Portable Operating System Interface)</em></strong></h2><p>可移植操作系统接口(Portable Operating System Interface POSIX)，是IEEE为要在各种UNIX操作系统上运行的软件，而定义API的一系列互相关联的标准的总称，其正式称呼为IEEE 1003，而国际标准名称为ISO/IEC 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由理查德·斯托曼应IEEE的要求而提议的一个易于记忆的名称。它基本上是(Portable<br> Operating System Interface可移植操作系统接口)的缩写，而X则表明其对Unix API的传承<br>Linux基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。微软的Windows NT声称部分实现了POSIX标准，因为有POSIX标准的存在，我们在unix、linux、windows上进行编程的时候，会发现有很多API都是通用的，虽然大多数情况下进行跨系统兼容编程是很困难的<br>当前的POSIX主要分为四个部分</p>
<pre><code>1. Base Definitions
2. System Interfaces
3. Shell and Utilities
4. Rationale
</code></pre><h2 id="0x2-POSIX-1-1标准"><a href="#0x2-POSIX-1-1标准" class="headerlink" title="0x2: POSIX 1.1标准"></a><strong><em>0x2: POSIX 1.1标准</em></strong></h2><p>POSIX(Portable Operating System Interface for Computing Systems)是由IEEE 和ISO/IEC 开发的一簇标准。该标准是基于现有的UNIX实践和经验，描述了操作系统的调用服务接口，用于保证编制的应用程序可以在源代码一级上在多种操作系统上移植运行。</p>
<pre><code>1. 1003.0
    管理POSIX开放式系统环境(OSE)。IEEE在1995年通过了这项标准。ISO的版本是ISO/IEC 14252:1996

2. 1003.1
    被广泛接受、用于源代码级别的可移植性标准。1003.1提供一个操作系统的C语言应用编程接口(API)。IEEE和ISO已经在1990年通过了这个标准，IEEE在1995年重新修订了该标准。

3. 1003.1b
    一个用于实时编程的标准(以前的P1003.4或POSIX.4)。这个标准在1993年被IEEE通过，被合并进ISO/IEC 9945-1

4. 1003.1c
    一个用于线程(在一个程序中当前被执行的代码段)的标准。以前是P1993.4或POSIX.4的一部分，这个标准已经在1995年被IEEE通过，归入ISO/IEC 9945-1:1996

5. 1003.1g
    一个关于协议独立接口的标准，该接口可以使一个应用程序通过网络与另一个应用程序通讯。1996年，IEEE通过了这个标准

6. 1003.2
    一个应用于shell和工具软件的标准，它们分别是操作系统所必须提供的命令处理器和工具程序。1992年IEEE通过了这个标准。ISO也已经通过了这个标准(ISO/IEC 9945-2:1993)

7. 1003.2d
    改进的1003.2标准

8. 1003.5
     一个相当于1003.1的Ada语言的API。在1992年，IEEE通过了这个标准。并在1997年对其进行了修订。ISO也通过了该标准

9. 1003.5b
    一个相当于1003.1b(实时扩展)的Ada语言的API。IEEE和ISO都已经通过了这个标准。ISO的标准是ISO/IEC 14519:1999

10. 1003.5c
    一个相当于1003.1q(协议独立接口)的Ada语言的API。在1998年，IEEE通过了这个标准。ISO也通过了这个标准。

11. 1003.9
    一个相当于1003.1的FORTRAN语言的API。在1992年，IEEE通过了这个标准，并于1997年对其再次确认。ISO也已经通过了这个标准

12. 1003.10
    一个应用于超级计算应用环境框架(Application Environment Profile，AEP)的标准。在1995年，IEEE通过了这个标准

13. 1003.13
    一个关于应用环境框架的标准，主要针对使用POSIX接口的实时应用程序。在1998年，IEEE通过了这个标准 

14. 1003.22
    一个针对POSIX的关于安全性框架的指南

15. 1003.23
    一个针对用户组织的指南，主要是为了指导用户开发和使用支持操作需求的开放式系统环境(OSE)框架

16. 2003
    针对指定和使用是否符合POSIX标准的测试方法，有关其定义、一般需求和指导方针的一个标准。在1997年，IEEE通过了这个标

17. 2003.1
    这个标准规定了针对1003.1的POSIX测试方法的提供商要提供的一些条件。在1992年，IEEE通过了这个标准

18. 2003.2
    一个定义了被用来检查与IEEE 1003.2(shell和工具API)是否符合的测试方法的标准。在1996年，IEEE通过了这个标准
</code></pre><h2 id="0x3-POSIX标准的意义"><a href="#0x3-POSIX标准的意义" class="headerlink" title="0x3: POSIX标准的意义"></a><strong><em>0x3: POSIX标准的意义</em></strong></h2><p>POSIX的意义在于提供了”跨操作系统兼容性编译”的能力，遵循了POSIX标准的C/C++程序源代码，可以直接在Linux/BSD环境下用GCC编译，或者在windows下用Cygwin/MinGW编译(Cygwin、MinGW提供了跨操作系统的兼容编译)。这叫跨操作系统的编译，注意要和”跨平台交叉编译”区分开来<br><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://zh.wikipedia.org/wiki/POSIX" target="_blank" rel="external">http://zh.wikipedia.org/wiki/POSIX</a><br>    <a href="http://i.linuxtoy.org/docs/guide/ch48s05.html" target="_blank" rel="external">http://i.linuxtoy.org/docs/guide/ch48s05.html</a></p>
<h1 id="1-交叉编译"><a href="#1-交叉编译" class="headerlink" title="1. 交叉编译"></a><strong>1. 交叉编译</strong></h1><h2 id="0x1-交叉编译简介"><a href="#0x1-交叉编译简介" class="headerlink" title="0x1: 交叉编译简介"></a><strong><em>0x1: 交叉编译简介</em></strong></h2><p>从编译所在的平台和运行所在的平台这点来看，有两种编译概念<br>    <strong>1. 本地编译</strong><br>    我们常见的软件开发，都是属于”本地编译”。在当前的PC下，x86的CPU下，直接编译出来程序，可以运行的程序(或者库文件)，其可以直接在当前的环境，即x86的CPU下，当前电脑中，运行。<br>    此时的编译，可以叫做”本地编译”，即在当前目标平台下，编译出来的程序，也只是放到当前平台下，就可以运行的<br>    <strong>2. 交叉编译</strong><br>    这是一个和本地编译相对应的概念。而所谓的”交叉编译”，就是在一种平台上编译，编译出来的程序，是放到别的平台上运行<br>    即编译的环境，和运行的环境，不一样，属于交叉的，此所谓cross交叉编译，这个概念，主要和嵌入式开发有关<br>一种最常见的例子就是：<br>    在进行嵌入式开发时，手上有个嵌入式开发板，CPU是arm的，然后在x86的平台下开发，比如Ubuntu的Linux，或者是Win7。然后就需要在x86的平台上，(用交叉编译器)去编译你写好的程序代码，编译生成的(可执行的)程序，是放<br>    到目标开发板，arm的CPU上运行的<br>    此所谓：在x86平台上编译，在ARM平台上运行<br>交叉编译，英文常写作cross compile，也有其他写法：crosscompile, cross compiling等</p>
<h2 id="0x2-为何要有交叉编译"><a href="#0x2-为何要有交叉编译" class="headerlink" title="0x2: 为何要有交叉编译"></a><strong><em>0x2: 为何要有交叉编译</em></strong></h2><p>之所以要有交叉编译，主要原因是：<br>    <strong>1. 嵌入式系统中的资源太少</strong><br>    交叉编译出来的程序，所要运行的目标环境中，各种资源，都相对有限，所以很难进行直接的本地编译，最常见的情况是：<br>    因为编译，开发，都需要相对比较多的CPU，内存，硬盘等资源，而嵌入式开发上的那点资源，只够嵌入式(Linux)系统运行的，没太多剩余的资源，供你本地编译。所以需要在别的平台上进行跨平台编译，然后在其他的平台上运行</p>
<h2 id="0x3-跨平台编译和跨操作系统编译的差别"><a href="#0x3-跨平台编译和跨操作系统编译的差别" class="headerlink" title="0x3: 跨平台编译和跨操作系统编译的差别"></a><strong><em>0x3: 跨平台编译和跨操作系统编译的差别</em></strong></h2><p>这里需要注意的是”平台”的概念，实际上包含两个概念<br>    <strong>1. 体系结构(Architecture)</strong>: 同一个体系结构可以运行不同的操作系统<br>    <strong>2. 操作系统(Operating System)</strong>: 同一个操作系统也可以在不同的体系结构上运行<br>举例来说，我们常说的x86 Linux平台实际上是Intel x86体系结构和Linux for x86操作系统的统称；而x86 WinNT平台实际上是Intel x86体系结构和Windows NT for x86操作系统的简称</p>
<p>像crosstool-NG这类交叉编译器和Cygwin这类跨操作系统平台编译器的区别在于</p>
<pre><code>1. crosstool-NG跨平台编译(跨体系结构、操作系统)
2. Cygwin跨平台编译(提供*inux到windows系统的代码级编译兼容性)
</code></pre><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://www.crifan.com/files/doc/docbook/cross_compile/release/html/cross_compile.html" target="_blank" rel="external">http://www.crifan.com/files/doc/docbook/cross_compile/release/html/cross_compile.html</a><br>    <a href="http://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8</a><br>    <a href="http://baike.baidu.com/view/650389.htm" target="_blank" rel="external">http://baike.baidu.com/view/650389.htm</a></p>
<h1 id="2-Cygwin简介"><a href="#2-Cygwin简介" class="headerlink" title="2. Cygwin简介"></a><strong>2. Cygwin简介</strong></h1><h2 id="0x1-简介"><a href="#0x1-简介" class="headerlink" title="0x1: 简介"></a><strong><em>0x1: 简介</em></strong></h2><p>Cygwin是许多自由软件的集合，最初由Cygnus Solutions开发，用于各种版本的Microsoft Windows上，运行类UNIX系统。Cygwin的主要目的是通过”重新编译”(注意：是重新编译)，将POSIX系统(例如Linux、BSD，以及其他Unix系统)上的软件移植到Windows上。Cygwin移植工作在Windows NT上比较好，在Windows 95和Windows 98上，相对差劲一些。目前Cygwin由Red Hat等负责维护</p>
<p>首要需要明白的是，Cygwin不是一个跨平台模拟器，它不能让我们把linux上编译出来的程序在windows上运行(像wine那样)，而是一个跨平台的编译器，也就是提供代码级的跨操作系统兼容性，我们在linux下写的符合POSIX标准的C程序可以在windows下面进行编译，Cygwin提供了一套在windows下可以使用的Linux的API</p>
<p>Cygwin包括了一套库，该库在Win32系统下实现了POSIX系统调用的API。还有一套GNU开发工具集(比如GCC、GDB)，这样可以进行简单的软件开发。还有一些UNIX系统下的常见程序。2001年，新增了X Window System</p>
<h2 id="0x2-Cygwin的特性"><a href="#0x2-Cygwin的特性" class="headerlink" title="0x2: Cygwin的特性"></a><strong><em>0x2: Cygwin的特性</em></strong></h2><pre><code>Cygwin is:
1. a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows.
2. a DLL (cygwin1.dll) which provides substantial POSIX API functionality.

Cygwin is not:
1. a way to run native Linux apps on Windows. You must rebuild your application from source if you want it to run on Windows.
2. a way to magically make native Windows apps aware of UNIX® functionality like signals, ptys, etc. Again, you need to build your apps from source if you want to take advantage of Cygwin functionality.
</code></pre><h2 id="0x3-Cygwin原理"><a href="#0x3-Cygwin原理" class="headerlink" title="0x3: Cygwin原理"></a><strong><em>0x3: Cygwin原理</em></strong></h2><p>cygnus当初首先把GCC，GDB，GAS等开发工具进行了改进，使他们能够生成并解释win32的目标文件。然后，他们要把这些工具移植到windows平台上去。一种方案是基于win32 api对这些工具的源代码进行大幅修改，这样做显然需要大量工作。因此，他们采取了一种不同的方法</p>
<ol>
<li>他们写了一个共享库(就是cygwin.dll)，把win32 api中没有的unix风格的调用(如fork、spawn、signals、select、sockets等)封装在里面</li>
<li>也就是说，他们基于win32 api写了一个unix系统库的模拟层(这个模拟层是一个关键，它的底层是win32 api，上层提供unix风格的调用，所以我们才可以在windows下编译unix风格的C程序)</li>
<li>这样，只要把这些工具的源代码和这个共享库连接到一起，就可以使用unix主机上的交叉编译器来生成可以在windows平台上运行的工具集</li>
<li>以这些移植到windows平台上的开发工具为基础，cygnus又逐步把其他的工具(几乎不需要对源代码进行修改，只需要修改他们的配置脚本)软件移植到windows上来。这样，在windows平台上运行bash和开发工具、用户工具，感觉好像在unix上工作</li>
</ol>
<h2 id="0x4-使用Cygwin编程"><a href="#0x4-使用Cygwin编程" class="headerlink" title="0x4: 使用Cygwin编程"></a><strong><em>0x4: 使用Cygwin编程</em></strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#iuclude <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译<br>    gcc hello.c -o hello.exe<br>得到hello.exe，这个程序可以在windows上直接点击运行<br><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://zh.wikipedia.org/wiki/Cygwin" target="_blank" rel="external">http://zh.wikipedia.org/wiki/Cygwin</a><br>    <a href="https://www.cygwin.com/" target="_blank" rel="external">https://www.cygwin.com/</a><br>    <a href="http://www.ibm.com/developerworks/cn/linux/l-cn-cygwin/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-cn-cygwin/</a></p>
<h1 id="3-静态库编译及使用"><a href="#3-静态库编译及使用" class="headerlink" title="3. 静态库编译及使用"></a><strong>3. 静态库编译及使用</strong></h1><h2 id="0x1-什么是库"><a href="#0x1-什么是库" class="headerlink" title="0x1: 什么是库"></a><strong><em>0x1: 什么是库</em></strong></h2><p>库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在是很有必要的<br>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。库有两种</p>
<pre><code>1. 静态库(.a、.lib)
2. 动态库(.so、.dll)
</code></pre><p>所谓静态、动态是指”链接”的过程存在区别<br><img src="http://images.cnitblog.com/blog/532548/201409/191103358154415.png" alt=""></p>
<h2 id="0x2-动态库和静态库的默认路径PATH搜索顺序"><a href="#0x2-动态库和静态库的默认路径PATH搜索顺序" class="headerlink" title="0x2: 动态库和静态库的默认路径PATH搜索顺序"></a><strong><em>0x2: 动态库和静态库的默认路径PATH搜索顺序</em></strong></h2><p>库文件在连接(静态库和共享库)和运行(仅限于使用共享库的程序)时被使用，其搜索路径是在系统中进行设置的</p>
<pre><code>1. 静态库的搜索路径顺序
    1) /lib
    2) /usr/lib  
    3) /etc/ld.so.conf文件中添加库的搜索路径
    4) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
2. 动态库的搜索路径顺序
    1) LD_LIBRARY_PATH 
    2) /lib
    3) /usr/lib  
    4) /etc/ld.so.cache(使用ldconfig生成的库路径缓存)
    5) /etc/ld.so.conf文件中添加库的搜索路径
    6) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
</code></pre><h2 id="0x3-静态库"><a href="#0x3-静态库" class="headerlink" title="0x3: 静态库"></a><strong><em>0x3: 静态库</em></strong></h2><p>之所以称之为”静态库”，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。<br>从本质上来说，一个静态库可以简单看成是一组目标文件(.o/.obj文件)的集合，静态库与汇编生成的目标文件(.o/.obj)一起链接为可执行文件<br>静态库和.o文件格式相似。即很多目标文件经过压缩打包后形成的一个文件<br>静态库特点总结：</p>
<pre><code>1. 静态库对函数库的链接是放在编译时期完成的
2. 程序在运行时与函数库再无瓜葛，移植方便，因为代码已经嵌入到程序里面了，可以直接跟着程序走，不存在对外部文件的依赖
3. 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件，会增加原本程序的空间
</code></pre><h2 id="0x4-静态库编程"><a href="#0x4-静态库编程" class="headerlink" title="0x4: 静态库编程"></a><strong><em>0x4: 静态库编程</em></strong></h2><p>我们接下来学习一下如何创建用于C++应用的静态库(一个.lib 文件)。 使用静态库是重用代码的一种绝佳方式。 你不必在要求功能的每个应用中重新实现同一例程，而只需将其写入静态库一次，然后从应用引用它们即可。<br> 从静态库链接的代码成为了应用的一部分，这样你就不必安装另一个文件来使用代码。</p>
<h3 id="1-VS编译、使用静态库"><a href="#1-VS编译、使用静态库" class="headerlink" title="1. VS编译、使用静态库"></a><strong>1. VS编译、使用静态库</strong></h3><pre><code>//创建静态库项目
1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;
2. 在&quot;新建项目&quot;对话框的左窗格中，依次展开&quot;已安装&quot;、&quot;模板&quot;、&quot;Visual C++&quot;，然后选择&quot;Win32&quot;
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;
4. 在&quot;名称&quot;框中为项目指定名称，例如 MathFuncsLib。 在&quot;解决方案名称&quot;框中为解决方案指定名称，例如 StaticLibrary。 选择&quot;确定&quot;按钮
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮
6. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;静态库&quot;
7. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框
8. 选择&quot;完成&quot;按钮创建项目
</code></pre><p>MathFuncsLib.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsLib.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATHFUNCSLIB_H  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSLIB_H  </span></div><div class="line">  </div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> MyMathFuncs</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="comment">// Returns a + b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a - b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a * b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a / b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line">    &#125;;</div><div class="line">&#125;  </div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>MathFuncsLib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsLib.cpp</span></div><div class="line"><span class="comment">// compile with: cl /c /EHsc MathFuncsLib.cpp</span></div><div class="line"><span class="comment">// post-build command: lib MathFuncsLib.obj</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsLib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Add(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Subtract(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Multiply(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a * b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Divide(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a / b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译静态库文件<br>    //编译此静态库</p>
<pre><code>1. 在菜单栏上依次选择&quot;生成&quot;、&quot;生成解决方案&quot;
2. 这将创建一个可供其他程序使用的静态库
</code></pre><p>vs是windows操作系统下的编译平台，通过vs编译得到的.lib静态库只能在windows的程序代码中使用，主要是编译器、汇编器和连接器的不同，因此二者库的二进制是不兼容的。文章之后会学习到如何将linux下编译的静态库通过跨平台编译链接到windows的程序代码中</p>
<p>要在其他程序中使用静态库中的功能，必须引用静态库才能使用其中的例程<br>    //创建引用静态库的 C++ 控制台应用</p>
<pre><code>1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;。
2. 在左窗格中的&quot;Visual C++&quot;下，选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如 MyExecRefsLib。 在&quot;解决方案&quot;旁的下拉列表中选择&quot;添加到解决方案&quot;。 这会将新项目添加到包含此静
5. 态库的解决方案。 选择&quot;确定&quot;按钮。
6. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
7. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;控制台应用程序&quot;。
8. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框。
9. 选择&quot;完成&quot;按钮创建项目。

 //在应用中使用静态库的功能
1. 在创建一个控制台应用程序后，一个空的程序已经为你创建好了。 源文件的名称与你之前选择的名称相同。 在此示例中，源文件名为 MyExecRefsLib.cpp。
2. 必须引用静态库才能使用其中的算术例程。 为此，请在&quot;解决方案资源管理器&quot;中打开 MyExecRefsLib 项目的快捷菜单，然后选择&quot;引用&quot;。 在 MyExecRefsLib&quot;属性页&quot;对话框中，展开&quot;通用属性&quot;节点，选择&quot;框架和引用&quot;，然后选择&quot;添加新引用&quot;按钮。 有关&quot;引用&quot;对话框的更多信息，请参见&quot;&lt;Projectname&gt; 属性页&quot;对话框 -&gt;&quot;通用属性&quot;-&gt;&quot;框架和引用&quot;。
3. &quot;添加引用&quot;对话框列出了可以引用的库。 &quot;项目&quot;选项卡列出了当前解决方案中的所有项目以及它们包含的所有库。 在&quot;项目&quot;选项卡上，选中&quot;MathFuncsLib&quot;复选框，然后选择&quot;确定&quot;按钮。
4. 若要引用 MathFuncsLib.h 头文件，必须修改包含的目录路径。 在 MyExecRefsLib&quot;属性页&quot;对话框中，依次展开&quot;配置属性&quot;节点和&quot;C/C++&quot;节点，然后选择&quot;常规&quot;。 在&quot;附加包含目录&quot;旁，指定 MathFuncsLib 目录的路径或浏览至该目录。
5. 若要浏览至目录路径，请打开属性值下拉列表框，然后选择&quot;编辑&quot;。 在&quot;附加包含目录&quot;对话框中，在文本框中选择一个空行，然后选择行尾的省略号按钮 (…)。 在&quot;选择目录&quot;对话框中，选择 MathFuncsLib 目录，然后选择&quot;选择文件夹&quot;按钮以保存所做选择并关闭对话框。 在&quot;附加包含目录&quot;对话框中，选择&quot;确定&quot;按钮，然后在&quot;属性页&quot;对话框中，选择&quot;确定&quot;按钮以保存对该项目进行的更改。
</code></pre><p>MyExecRefsLib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyExecRefsLib.cpp</span></div><div class="line"><span class="comment">// compile with: cl /EHsc MyExecRefsLib.cpp /link MathFuncsLib.lib</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsLib.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">7.4</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">99</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Add(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a - b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Subtract(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a * b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Multiply(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Divide(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://msdn.microsoft.com/zh-cn/library/ms235627.aspx#BKMK_CreateLibProject" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/ms235627.aspx#BKMK_CreateLibProject</a></p>
<p>###<strong>2. GCC编译、使用静态库</strong><br>静态库的后缀是.a(并没有强制规定)，它的产生分两步</p>
<pre><code>1. 由源文件编译生成一堆.o，每个.o里都包含这个编译单元的符号表
2. ar命令将很多.o转换成.a，成为静态库，从这点也可以看出来，库是很多.o文件的集合
</code></pre><p>在linux下，库文件一般放在/usr/lib和/lib下<br>静态库的名字一般为libxxxx.a，其中xxxx是该lib的名称<br>动态库的名字一般为libxxxx.so.major.minor，xxxx是该lib的名称，major是主版本号，minor是副版本号(如果库的命名不遵循 libXXXXX.a的格式就找不到相应文件)</p>
<pre><code>ldd命令可以查看一个可执行程序依赖的共享库 
ldd /bin/ping
    linux-gate.so.1 =&gt;  (0x006cd000)
    libidn.so.11 =&gt; /lib/libidn.so.11 (0x005d6000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00927000)
    /lib/ld-linux.so.2 (0x005ac000)
</code></pre><p>首先，我们先完成函数库(静态库的代码)的编码<br>hello.h: 函数库(静态库)的头文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>hello.c: 函数库的实现代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello%s!\n"</span>, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，我们可以将当前的代码编译为静态库文件，需要注意的，静态库和可执行在本质上都是可执行代码，但是静态库没有main主程序，所以不能独立运行，需要被引入到别的程序中进行运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//将代码编译为对象文件.o</div><div class="line">gcc -c hello.c</div><div class="line">//将.o链接为静态库文件</div><div class="line">ar rcs libhello.a hello.o</div></pre></td></tr></table></figure></p>
<p>编译好静态库文件之后，我们就可以在其他程序中使用静态库文件中的函数了</p>
<pre><code>1. 只需要在使用到这些公用函数的源程序中包含这些公用函数的原型声明(include对应的头文件)
2. 然后在用gcc命令生成目标文件时指明静态库名
3. gcc将会从静态库中将公用函数连接到目标文件中
4. 注意，gcc会在静态库名前加上前缀lib，然后追加扩展名.a得到的静态库文件名来查找静态库文件,因此，我们在写需要连接的库时，只写名字就可以，如libhello.a的库，只写: -lhello
</code></pre><p>main.c: 调用静态库的程序代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    hello(<span class="string">"LittleHann"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译<br>    gcc -o hello main.c -L. -lhello<br>关于gcc的编译指令，请参阅另一篇文章<br>    <a href="http://www.cnblogs.com/LittleHann/p/3855905.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3855905.html</a></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://wenku.baidu.com/view/7d8602b265ce050877321301.html" target="_blank" rel="external">http://wenku.baidu.com/view/7d8602b265ce050877321301.html</a></p>
<h1 id="4-动态库编译及使用"><a href="#4-动态库编译及使用" class="headerlink" title="4. 动态库编译及使用"></a><strong>4. 动态库编译及使用</strong></h1><h2 id="0x1-动态库"><a href="#0x1-动态库" class="headerlink" title="0x1: 动态库"></a><strong><em>0x1: 动态库</em></strong></h2><p>动态库文件名命名规范和静态库文件名命名规范类似，也是在动态库名增加前缀lib，但其文件扩展名为.so。例如：我们将创建的动态库名为myhello，则动态库文件名就是libmyhello.so。</p>
<p>接下来我们继续学习如何创建用于 C++ 应用程序的动态链接库 (DLL)。 使用库是重用代码的一种绝佳方式。 您不必在自己创建的每个程序中重新实现同一例程，而只需对这些例程写入一次，然后从需要该功能的应用程序引用它们即可。 通过将代码放入 DLL，您节省在引用它的每个应用程序的空间，而且，您可以更新 DLL，而无需重新编译所有应用程序</p>
<h2 id="0x2-动态库编程"><a href="#0x2-动态库编程" class="headerlink" title="0x2: 动态库编程"></a><strong><em>0x2: 动态库编程</em></strong></h2><h3 id="1-VS编译、使用静态库-1"><a href="#1-VS编译、使用静态库-1" class="headerlink" title="1. VS编译、使用静态库"></a><strong>1. VS编译、使用静态库</strong></h3><pre><code>//创建动态链接库 (DLL) 项目
1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;。
2. 在&quot;新建项目&quot;对话框的左窗格中，依次展开&quot;已安装&quot;、&quot;模板&quot;、&quot;Visual C++&quot;，然后选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如，MathFuncsDll。 在&quot;解决方案名称&quot;框中为解决方案指定一个名称，例如 DynamicLibrary。 选择&quot;确定&quot;按钮。
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
6. 在&quot;应用程序设置&quot;页上的&quot;应用程序类型&quot;下，选择&quot;DLL&quot;。
7. 选择&quot;完成&quot;按钮创建项目。
</code></pre><p>编写动态库DLL的头文件，MathFuncsDll.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsDll.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATHFUNCSDll_H#<span class="meta-keyword">define</span> MATHFUNCSDll_H</span></div><div class="line"></div><div class="line"><span class="comment">/*当定义了 MATHFUNCSDLL_EXPORTS 符号时，MATHFUNCSDLL_API 符号将在此代码中的成员函数声明中设置 __declspec(dllexport) 修饰符，此修饰符使函数能作为 DLL 导出，以供其他应用程序调用</span></div><div class="line">当 MATHFUNCSDLL_EXPORTS 未定义时，MATHFUNCSDLL_API 会在成员函数声明中定义 __declspec(dllimport) 修饰符。 此修饰符能够使编译器优化从 DLL 导入的用于其他应用程序的函数</div><div class="line">默认情况下，生成 MathFuncsDll 项目时会定义 MATHFUNCSDLL_EXPORTS*/</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MATHFUNCSDLL_EXPORTS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSDLL_API __declspec(dllexport) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSDLL_API __declspec(dllimport) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="comment">// This class is exported from the MathFuncsDll.dll</span></div><div class="line">    <span class="keyword">class</span> MyMathFuncs</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="comment">// Returns a + b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a - b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a * b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a / b</span></div><div class="line">        <span class="comment">// Throws const std::invalid_argument&amp; if b is 0</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>编写动态库DLL的函数实现的.cpp文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsDll.cpp : Defines the exported functions for the DLL application.</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsDll.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line">	</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Add(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Subtract(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Multiply(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a * b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Divide(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> invalid_argument(<span class="string">"b cannot be zero!"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> a / b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译后可以得到一个.dll文件</p>
<p>编译得到一个dll文件后，我们就在其他的程序代码中去引入这个dll文件，并使用其中的函数功能了</p>
<pre><code>//创建引用 DLL 的应用程序
1. 为了创建一个项目引用你刚刚创建好的DLL，在菜单栏中选择 文件&gt;新建&gt;项目。
2. 在左窗格中的&quot;Visual C++&quot;下，选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如，MyExecRefsDll。 从&quot;解决方案&quot;旁边的下拉列表中选择&quot;添加到解决方案&quot;。 这会将新项目添加到包含 DLL 的同一个解决方案中。 选择&quot;确定&quot;按钮。
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
6. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;控制台应用程序&quot;。
7. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框。
8. 选择&quot;完成&quot;按钮创建项目。

//在应用程序中使用类库的功能
1. 在创建一个控制台应用程序后，一个空的程序已经为你创建好了。 源文件的名称与你之前选择的名称相同。 在本示例中，名为&quot;MyExecRefsDll.cpp&quot;。
2. 若要使用您 DLL 中创建的算术例程，必须引用 DLL。 为此，请在 解决方案资源管理器 中选择 MyExecRefsDll 项目，然后在菜单栏上，选择 项目，引用。 在&quot;属性页&quot;对话框中，展开&quot;通用属性&quot;节点，选择&quot;框架和引用&quot;，然后选择&quot;添加新引用&quot;按钮。 有关&quot;引用&quot;对话框的更多信息，请参见&quot;&lt;Projectname&gt; 属性页&quot;对话框 -&gt;&quot;通用属性&quot;-&gt;&quot;框架和引用&quot;。
3. &quot;添加引用&quot;对话框列出了可以引用的库。 &quot;项目&quot;选项卡列出了当前解决方案中的所有项目，以及它们包含的所有库。 在&quot;项目&quot;选项卡上，选中&quot;MathFuncsDll&quot;旁边的复选框，然后选中&quot;确定&quot;按钮。
4. 若要引用 DLL 的头文件，必须修改包含的目录路径。 为此，请在&quot;属性页&quot;对话框中展开&quot;配置属性&quot;节点，然后展开&quot;C/C++&quot;节点，并选择&quot;常规&quot;。 在&quot;附加包含目录&quot;旁边，指定 MathFuncsDll.h 头文件所在位置的路径。 可以使用相对路径（例如 ..\MathFuncsDll\），然后选择&quot;确定&quot;按钮。
5. 现在即可在此应用程序中使用 MyMathFuncs 类。 使用以下代码替换&quot;&quot;的内容：
</code></pre><p>MyExecRefsDll.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyExecRefsDll.cpp</span></div><div class="line"><span class="comment">// compile with: /EHsc /link MathFuncsDll.lib</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsDll.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">7.4</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">99</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Add(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a - b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Subtract(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a * b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Multiply(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Divide(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span>    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / 0 = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Divide(a, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> invalid_argument &amp;e) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Caught exception: "</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-GCC编译、使用静态库"><a href="#2-GCC编译、使用静态库" class="headerlink" title="2. GCC编译、使用静态库"></a><strong>2. GCC编译、使用静态库</strong></h3><p>foo.h:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> foo_h__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> foo_h__</span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// foo_h__</span></span></div></pre></td></tr></table></figure></p>
<p>foo.c:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Hello LittleHann, I'm a shared library"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译动态库文件.so<br>    gcc -shared -Wall -Werror -fpic -o libfoo.so foo.c</p>
<p>编译好动态库文件之后，我们就可以在其他程序中引入这个动态库文件.so，并使用其中的导出函数</p>
<p>main.c:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>#<span class="meta-keyword">include</span> <span class="meta-string">"foo.h"</span></span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"This is a shared library test..."</span>);</div><div class="line">    foo();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在main.c中引入了foo.h头文件<br>    gcc -L. -Wall -o test main.c -lfoo</p>
<p>编译成功后，还有一件很重要的事，我们回想一下Linux下静态库、动态库的默认搜索顺序</p>
<pre><code>1) LD_LIBRARY_PATH 
2) /lib
3) /usr/lib  
4) /etc/ld.so.cache(使用ldconfig生成的库路径缓存)
5) /etc/ld.so.conf文件中添加库的搜索路径
6) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
</code></pre><p>linux是默认不会去搜索当前目录的，所以我们必须将.so文件复制到默认路径下、或者使用LD_LIBRARY_PATH显示指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp libfoo.so /usr/lib</div><div class="line">./<span class="built_in">test</span></div><div class="line">rm <span class="_">-f</span> /usr/lib/libfoo.so</div></pre></td></tr></table></figure></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://msdn.microsoft.com/zh-cn/library/ms235636.aspx" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/ms235636.aspx</a><br>    <a href="http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html" target="_blank" rel="external">http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html</a></p>
<h1 id="5-MinGW简介"><a href="#5-MinGW简介" class="headerlink" title="5. MinGW简介"></a><strong>5. MinGW简介</strong></h1><h2 id="0x1-MinGW是什么"><a href="#0x1-MinGW是什么" class="headerlink" title="0x1: MinGW是什么"></a><strong><em>0x1: MinGW是什么</em></strong></h2><p>MinGW(Minimalist GNU for Windows)，又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件(Win32API)、库和可执行文件</p>
<p>GCC支持的语言大多在MinGW也受支持，其中涵盖</p>
<pre><code>1. C 
2. Objective-C
3. Fortran
4. Ada
5. 对于C语言之外的语言，MinGW使用标准的GNU运行库，如C++使用GNU libstdc++ 
</code></pre><p>但是MinGW使用Windows中的C运行库。因此用MinGW开发的程序不需要额外的第三方DLL支持就可以直接在Windows下运行，而且也不一定必须遵从GPL许可证。这同时造成了MinGW开发的程序只能使用Win32API和跨平台的第三方库，而缺少POSIX支持 ，大多数GNU软件无法在不修改源代码的情况下用MinGW编译</p>
<p>GCC是一个原本用于Unix系统下编程的编译器。不过，现在GCC也有了许多Win32下的移植版本，目前GCC在windows下有三个移植版本</p>
<pre><code>1. MinGW
2. Cygwin
3. Djgpp
</code></pre><p>MinGW是Minimalistic GNU for Windows 的缩写。它是一个建立在GCC和binutils 项目上的编译器系统。和其他GCC的移植版相比，它可以说是最接近Win32的一个了。因为，MinGW几乎支持所有的Win32 API，这也是MinGW的特色之一。它所连接的程序，不需要任何第三方库就可以运行了。在某种程度上看，MinGW更像是VC的替代品</p>
<h2 id="0x3-编程示例"><a href="#0x3-编程示例" class="headerlink" title="0x3: 编程示例"></a><strong><em>0x3: 编程示例</em></strong></h2><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://www.mingw.org/" target="_blank" rel="external">http://www.mingw.org/</a><br>    <a href="https://code.google.com/p/msys-cn/wiki/ChapterThree" target="_blank" rel="external">https://code.google.com/p/msys-cn/wiki/ChapterThree</a><br>    <a href="http://wenku.baidu.com/view/c6f71522af45b307e87197a6.html" target="_blank" rel="external">http://wenku.baidu.com/view/c6f71522af45b307e87197a6.html</a></p>
<h1 id="6-CodeBlocks简介"><a href="#6-CodeBlocks简介" class="headerlink" title="6. CodeBlocks简介"></a><strong>6. CodeBlocks简介</strong></h1><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://bbs.chinaunix.net/thread-3640636-1-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/thread-3640636-1-1.html</a><br>    <a href="http://zh.wikipedia.org/wiki/Code::Blocks" target="_blank" rel="external">http://zh.wikipedia.org/wiki/Code::Blocks</a><br>    <a href="http://blog.csdn.net/wtfmonking/article/details/17487705" target="_blank" rel="external">http://blog.csdn.net/wtfmonking/article/details/17487705</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0. 引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;0. 引言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;UNIX是一个注册商标，是要满足一大堆条件并且支付可观费用才能够被授权使用的一个操作系统。linux是unix的克隆版本，是由其创始人Linus和诸多世界知名的黑客手工打造的一个操作系统。为什么linux和unix之间有很多软件可以很轻松的移植？因为linux也满足POSIX规范，所以在运行机制上跟unix相近。同时，POSIX标准也是Linux、windows下能够进行交叉编译的基础
    
    </summary>
    
      <category term="DLL" scheme="http://HawkAaron.github.io/categories/DLL/"/>
    
    
      <category term="DLL" scheme="http://HawkAaron.github.io/tags/DLL/"/>
    
      <category term="mingw" scheme="http://HawkAaron.github.io/tags/mingw/"/>
    
      <category term="交叉编译" scheme="http://HawkAaron.github.io/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
</feed>
