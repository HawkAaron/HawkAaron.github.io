<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HMK&#39;s blog</title>
  <subtitle>Stay hungry. Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://HawkAaron.github.io/"/>
  <updated>2016-08-07T04:28:33.700Z</updated>
  <id>http://HawkAaron.github.io/</id>
  
  <author>
    <name>HMK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deep Learning Libraries by Language</title>
    <link href="http://HawkAaron.github.io/2016/08/07/Deep-Learning-Libraries-by-Language/"/>
    <id>http://HawkAaron.github.io/2016/08/07/Deep-Learning-Libraries-by-Language/</id>
    <published>2016-08-07T02:39:00.000Z</published>
    <updated>2016-08-07T04:28:33.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ol>
<li><p><a href="http://deeplearning.net/software/theano" target="_blank" rel="external">Theano</a> is a python library for defining and evaluating mathematical expressions with numerical arrays. It makes it easy to write deep learning algorithms in python. On the top of the Theano many more libraries are built.</p>
<ol>
<li><p><a href="http://keras.io/" target="_blank" rel="external">Keras</a> is a minimalist, highly modular neural network library in the spirit of Torch, written in Python, that uses Theano under the hood for optimized tensor manipulation on GPU and CPU.</p>
</li>
<li><p><a href="http://deeplearning.net/software/pylearn2/" target="_blank" rel="external">Pylearn2</a> is a library that wraps a lot of models and training algorithms such as Stochastic Gradient Descent that are commonly used in Deep Learning. Its functional libraries are built on top of Theano.</p>
</li>
<li><p><a href="https://github.com/Lasagne/Lasagne" target="_blank" rel="external">Lasagne</a> is a lightweight library to build and train neural networks in Theano. It is governed by simplicity, transparency, modularity, pragmatism , focus and restraint principles.</p>
</li>
<li><p><a href="https://github.com/mila-udem/blocks" target="_blank" rel="external">Blocks</a> a framework that helps you build neural network models on top of Theano.<a id="more"></a></p>
</li>
</ol>
</li>
<li><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">Caffe</a> is a deep learning framework made with expression, speed, and modularity in mind. It is developed by the Berkeley Vision and Learning Center (BVLC) and by community contributors. Google’s <a href="http://venturebeat.com/2015/07/01/google-open-sources-its-software-for-making-trippy-images-with-deep-learning/" target="_blank" rel="external">DeepDream</a> is based on Caffe Framework. This framework is a BSD-licensed C++ library with Python Interface.</p>
</li>
<li><p><a href="https://github.com/dnouri/nolearn" target="_blank" rel="external">nolearn</a> contains a number of wrappers and abstractions around existing neural network libraries, most notably <a href="http://lasagne.readthedocs.org/" target="_blank" rel="external">Lasagne</a>, along with a few machine learning utility modules.</p>
</li>
<li><p><a href="http://radimrehurek.com/gensim/" target="_blank" rel="external">Gensim</a> is deep learning toolkit implemented in python programming language intended for handling large text collections, using efficient algorithms.</p>
</li>
<li><p><a href="http://chainer.org/" target="_blank" rel="external">Chainer</a> bridge the gap between algorithms and implementations of deep learning. Its powerful, flexible and intuitive and is considered as the <a href="http://www.slideshare.net/beam2d/introduction-to-chainer-a-flexible-framework-for-deep-learning" target="_blank" rel="external">flexible framework</a> for Deep Learning.</p>
</li>
<li><p><a href="https://github.com/nitishsrivastava/deepnet" target="_blank" rel="external">deepnet</a> is a GPU-based python implementation of deep learning algorithms like Feed-forward Neural Nets, Restricted Boltzmann Machines, Deep Belief Nets, Autoencoders, Deep Boltzmann Machines and Convolutional Neural Nets.</p>
</li>
<li><p><a href="https://github.com/hannes-brt/hebel" target="_blank" rel="external">Hebel</a> is a library for deep learning with neural networks in Python using GPU acceleration with CUDA through PyCUDA. It implements the most important types of neural network models and offers a variety of different activation functions and training methods such as momentum, Nesterov momentum, dropout, and early stopping.</p>
</li>
<li><p><a href="https://github.com/dmlc/cxxnet" target="_blank" rel="external">CXXNET</a> is fast, concise, distributed deep learning framework based on MShadow. It is a lightweight and easy extensible C++/CUDA neural network toolkit with friendly Python/Matlab interface for training and prediction.</p>
</li>
<li><p><a href="https://github.com/andersbll/deeppy" target="_blank" rel="external">DeepPy</a> is a Pythonic deep learning framework built on top of NumPy.</p>
</li>
<li><p><a href="https://github.com/vishwa-raman/DeepLearning" target="_blank" rel="external">DeepLearning</a> is deep learning library, developed with C++ and python.</p>
</li>
<li><p><a href="https://github.com/NervanaSystems/neon" target="_blank" rel="external">Neon</a> is Nervana’s Python based Deep Learning framework.</p>
</li>
</ol>
<h1 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h1><ol>
<li><p><a href="https://github.com/sdemyanov/ConvNet" target="_blank" rel="external">ConvNet</a> Convolutional neural net is a type of deep learning classification algorithms, that can learn useful features from raw data by themselves and is performed by tuning its weighs.</p>
</li>
<li><p><a href="https://github.com/rasmusbergpalm/DeepLearnToolbox" target="_blank" rel="external">DeepLearnToolBox</a> is a matlab/octave toolbox for deep learning and includes Deep Belief Nets, Stacked Autoencoders, convolutional neural nets.</p>
</li>
<li><p><a href="https://code.google.com/p/cuda-convnet/" target="_blank" rel="external">cuda-convnet</a> is a fast C++/CUDA implementation of convolutional (or more generally, feed-forward) neural networks. It can model arbitrary layer connectivity and network depth. Any directed acyclic graph of layers will do. Training is done using the backpropagation algorithm.</p>
</li>
<li><p><a href="http://www.vlfeat.org/matconvnet/" target="_blank" rel="external">MatConvNet</a>  is a MATLAB toolbox implementing Convolutional Neural Networks (CNNs) for computer vision applications. It is simple, efficient, and can run and learn state-of-the-art CNNs</p>
</li>
</ol>
<h1 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h1><ol>
<li><p><a href="http://eblearn.sourceforge.net/index.shtml" target="_blank" rel="external">eblearn</a> is an open-source C++ library of machine learning by New York University’s machine learning lab, led by Yann LeCun. In particular, implementations of convolutional neural networks with energy-based models along with a GUI, demos and tutorials.</p>
</li>
<li><p><a href="http://www.comp.nus.edu.sg/~dbsystem/singa/" target="_blank" rel="external">SINGA</a> is designed to be general to implement the distributed training algorithms of existing systems. It is supported by Apache Software Foundation.</p>
</li>
<li><p><a href="https://developer.nvidia.com/digits" target="_blank" rel="external">NVIDIA DIGITS</a> is a new system for developing, training and visualizing deep neural networks. It puts the power of deep learning into an intuitive browser-based interface, so that data scientists and researchers can quickly design the best DNN for their data using real-time network behavior visualization.</p>
</li>
<li><p><a href="https://01.org/intel-deep-learning-framework" target="_blank" rel="external">Intel® Deep Learning Framework</a> provides a unified framework for Intel® platforms accelerating Deep Convolutional Neural Networks.</p>
</li>
</ol>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol>
<li><p><a href="http://nd4j.org/" target="_blank" rel="external">N-Dimensional Arrays for Java (ND4J)</a> is scientific computing libraries for the JVM. They are meant to be used in production environments, which means routines are designed to run fast with minimum RAM requirements.</p>
</li>
<li><p><a href="http://deeplearning4j.org/" target="_blank" rel="external">Deeplearning4j</a> is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. It is designed to be used in business environments, rather than as a research tool.</p>
</li>
<li><p><a href="http://www.heatonresearch.com/encog" target="_blank" rel="external">Encog</a> is an advanced machine learning framework which supports Support Vector Machines,Artificial Neural Networks, Genetic Programming, Bayesian Networks, Hidden Markov Models, Genetic Programming and Genetic Algorithms are supported.</p>
</li>
</ol>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol>
<li><a href="http://cs.stanford.edu/people/karpathy/convnetjs/" target="_blank" rel="external">Convnet.js</a> is a Javascript library for training Deep Learning models (mainly Neural Networks) entirely in a browser. No software requirements, no compilers, no installations, no GPUs, no sweat.</li>
</ol>
<h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><ol>
<li><a href="http://torch.ch/" target="_blank" rel="external">Torch</a> is a scientific computing framework with wide support for machine learning algorithms. It is easy to use and efficient, fast scripting language, LuaJIT, and an underlying C/CUDA implementation. Torch is based on Lua programming language.</li>
</ol>
<h1 id="Julia"><a href="#Julia" class="headerlink" title="Julia"></a>Julia</h1><ol>
<li><a href="https://github.com/pluskid/Mocha.jl" target="_blank" rel="external">Mocha</a> is a Deep Learning framework for Julia, inspired by the C++ framework Caffe. Efficient implementations of general stochastic gradient solvers and common layers in Mocha could be used to train deep / shallow (convolutional) neural networks, with (optional) unsupervised pre-training via (stacked) auto-encoders. Its best feature include Modular architecture, High-level Interface, portability with speed, compatibility and many more.</li>
</ol>
<h1 id="Lisp"><a href="#Lisp" class="headerlink" title="Lisp"></a>Lisp</h1><ol>
<li><a href="http://lush.sourceforge.net/" target="_blank" rel="external">Lush(Lisp Universal Shell)</a> is an object-oriented programming language designed for researchers, experimenters, and engineers interested in large-scale numerical and graphic applications. It comes with rich set of deep learning libraries as a part of machine learning libraries.</li>
</ol>
<h1 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h1><ol>
<li><a href="https://github.com/ajtulloch/dnngraph" target="_blank" rel="external">DNNGraph</a> is a deep neural network model generation DSL in Haskell.</li>
</ol>
<h1 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h1><ol>
<li><a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> is a .NET machine learning framework combined with audio and image processing libraries completely written in C#. It is a complete framework for building production-grade computer vision, computer audition, signal processing and statistics applications.</li>
</ol>
<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><ol>
<li><p><a href="http://cran.um.ac.ir/web/packages/darch/index.html" target="_blank" rel="external">darch</a> package can be used for generating neural networks with many layers (deep architectures). Training methods includes a pre training with the contrastive divergence method and a fine tuning with common known training algorithms like backpropagation or conjugate gradient.</p>
</li>
<li><p><a href="https://cran.r-project.org/web/packages/deepnet/index.html" target="_blank" rel="external">deepnet</a> implements some deep learning architectures and neural network algorithms, including BP,RBM,DBN,Deep autoencoder and so on.</p>
</li>
</ol>
<p><a href="http://www.teglor.com/b/deep-learning-libraries-language-cm569/" target="_blank" rel="external">Source: http://www.teglor.com/b/deep-learning-libraries-language-cm569/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://deeplearning.net/software/theano&quot;&gt;Theano&lt;/a&gt; is a python library for defining and evaluating mathematical expressions with numerical arrays. It makes it easy to write deep learning algorithms in python. On the top of the Theano many more libraries are built.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://keras.io/&quot;&gt;Keras&lt;/a&gt; is a minimalist, highly modular neural network library in the spirit of Torch, written in Python, that uses Theano under the hood for optimized tensor manipulation on GPU and CPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://deeplearning.net/software/pylearn2/&quot;&gt;Pylearn2&lt;/a&gt; is a library that wraps a lot of models and training algorithms such as Stochastic Gradient Descent that are commonly used in Deep Learning. Its functional libraries are built on top of Theano.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lasagne/Lasagne&quot;&gt;Lasagne&lt;/a&gt; is a lightweight library to build and train neural networks in Theano. It is governed by simplicity, transparency, modularity, pragmatism , focus and restraint principles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mila-udem/blocks&quot;&gt;Blocks&lt;/a&gt; a framework that helps you build neural network models on top of Theano.
    
    </summary>
    
      <category term="机器学习" scheme="http://HawkAaron.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://HawkAaron.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://HawkAaron.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Deep Learning" scheme="http://HawkAaron.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>数学在计算机图形学中的应用</title>
    <link href="http://HawkAaron.github.io/2016/08/06/%E6%95%B0%E5%AD%A6%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://HawkAaron.github.io/2016/08/06/数学在计算机图形学中的应用/</id>
    <published>2016-08-06T13:53:00.000Z</published>
    <updated>2016-08-07T04:28:18.730Z</updated>
    
    <content type="html"><![CDATA[<p><strong>“学习计算机图形学需要多少的数学？”</strong> 这是初学者最经常问的问题。狭义的计算机图形学指的是传统的三维建模，绘制，动画等，而广义的计算机图形学还包括计算机图像处理，视频处理，计算机视觉和机器学习等领域。</p>
<p>答案取决于你<strong>想在计算机图形学领域钻研多深：</strong></p>
<p>1、如果仅仅使用周围唾手可得的图形软件，如 Photoshop, 3D Studio Max, Maya, AutoCAD 等，你不需要知道多少数学知识；通过掌握简单的概念和阅读使用教程你就能使用这些软件的基本功能；但是如果你想精通这些软件，你还是需要学习计算机图形学的一些入门知识的；</p>
<p>2、如果想学习计算机图形学的入门知识，你至少需要掌握代数，三角学和线性代数的一些基本知识；这也是要成为图形软件高手所必需掌握的；</p>
<p>3、如果想成为一名计算机图形学的研究工作者，那么对数学的学习将是 “活到老，学到老”。重要的是，从以前看似枯燥的数学到看到它的实际应用的过程中，你会更容易享受数学的美妙。在你不断进行计算机图形学的研究的过程中，你会感觉到你的数学知识越来越不够用，从而真正理解 “数学不是没有用，而是不够用！”。<a id="more"></a></p>
<p>如果你并不特别喜欢数学，是否仍有在计算机图形学领域工作的机会？是的，计算机图形学的确有一些方面不需要考虑太多的数学问题。你不应该因为数学成绩不好而放弃它，如果你对计算机图形学具有强烈兴趣和好奇心的话，而且你还特别喜欢和擅长计算机编程的话。不过，如果学习了更多的数学知识，那么你将在研究课题上有更多的选择余地。如果你要做很好的计算机图形学的研究工作，则建议你还是多学习些数学。</p>
<p>对于在计算机图形学中哪些数学才是重要的？这个问题是没有明确的答案的。这领域里不同的方面要求掌握不同的数学知识，也许兴趣将会决定了你的方向。那些基本的数学知识和分析能力是最重要的，而其他的数学则是根据你所从事的方向相关。</p>
<p>下面将介绍我们认为对于计算机图形学有用的数学。别以为想成为一名计算机图形学的研究者就必须精通各门数学！在大学里，你所学的那些数学看起来都很抽象，枯燥无味，这是因为你并不知道它们的用处，甚至连讲课的老师也不知道，而你们的目的只是记住那些定理和公式，考个好分数。与大学学习数学不一样的是，你在计算机图形学的学习和研究过程中会感受到数学的用处和美妙，这时你学习数学的目的将更加明确，兴趣将更加浓厚，学习方法将更加有效。因为你是<strong>在使用数学的过程中在学习数学！</strong>想想看你是如何学会中文说话的？为了对用于计算机图形学的数学有一个全面的看法，这里特地列出了很多方面。注意，不是这里提到的每个方面你都必须熟悉，许多研究工作者从不需要考虑下面提到的某些数学知识，成功的研究者总是将某一方面的数学知识和数学工具用到极致！</p>
<p>最后，虽然读了这篇文章后，你应该会对数学在计算机图形学中的应用有所了解，不过这也是一家之言。也许你应该阅读更多的此类文章，或者至少从其他从事计算机图形学工作的人那里了解不同的学习重点。</p>
<h1 id="初等代数和三角学"><a href="#初等代数和三角学" class="headerlink" title="初等代数和三角学"></a><strong>初等代数和三角学</strong></h1><p>对于计算机图形学的初学者来说，高中的代数和三角学可能是最重要的数学。日复一日，我从简单的方程解出一个或更多的根。我时常还要解决类似求一些几何图形边长的简单三角学问题。代数和三角学是计算机图形学的最基础的知识。</p>
<p>那么高中的几何学怎么样呢？可能让人惊讶，不过在多数计算机图形学里，高中的几何学并不经常被用到。原因是许多学校教的几何学实际上是如何建立数学证明的课程。虽然证明题对提高智力显然是有效的，但对于计算机图形学来说，那些与几何课有关的定理和证明并不常被用到。如果你毕业于数学相关领域（包括计算机图形学），就会发现虽然你在证明定理，不过这对开始学习图形学不是必要的。</p>
<p>如果精通代数和三角学，就可以开始读一本计算机图形学的入门书了。下一个重要的用于计算机图形学的数学——线性代数，多数此类书籍至少包含了一个对线性代数的简要介绍。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Computer Graphics:  Principles and Practice<br>James Foley, Andries  van Dam, Steven Feiner, John Hughes<br>Addison-Wesley</p>
</blockquote>
<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a><strong>线性代数</strong></h1><p>线性代数的思想贯穿于计算机图形学。事实上，只要牵涉到几何数值表示法，就常常抽象出例如 x,y,z 坐标之类的数值，我们称之为矢量。计算机图形学自始至终离不开矢量和矩阵。用矢量和矩阵来描述旋转，平移，或者缩放是再好不过了。高中和大学都有线性代数的课程。只要想在计算机图形学领域工作，就应该打下坚实的线性代数基础。我刚才提到，许多图形学的书都有关于线性代数的简要介绍——足够教给你图形学的第一门课。</p>
<h1 id="数学分析（微积分学）"><a href="#数学分析（微积分学）" class="headerlink" title="数学分析（微积分学）"></a><strong>数学分析（微积分学）</strong></h1><p>微积分学是高级计算机图形学的重要成分。如果打算学习研究图形学，我强烈建议你应该对微积分学有初步认识。理由不仅仅是微积分学是一种很有用的工具，还有许多研究者用微积分学的术语来描述他们的问题和解决办法。另外，在许多重要的数学领域，微积分学被作为进一步学习的前提。学习了基本代数之后，微积分学又是一种能为你打开多数计算机图形学与后继的数学学习之门的课程。</p>
<h1 id="微分几何"><a href="#微分几何" class="headerlink" title="微分几何"></a><strong>微分几何</strong></h1><p>微分几何学研究描述和控制光滑曲线，曲面的方程。如果你要计算出经过某个远离曲面的点并垂直于曲面的矢量（法向矢量）就会用到微分几何学。让一辆汽车以特定速度在曲线上行驶也牵涉到微分几何学。有一种通用的绘制光滑曲面的图形学技术，叫做 “凹凸帖图”，这个技术用到了微分几何学。另外，要研究曲面的一些几何性质，如曲率、可展性、测地性质等，需要较多的微分几何知识。如果要着手于用曲线和曲面来创造形体（在图形学里称之为建模），你至少应该学习微分几何学的基础。</p>
<h1 id="数值方法（计算方法）"><a href="#数值方法（计算方法）" class="headerlink" title="数值方法（计算方法）"></a><strong>数值方法（计算方法）</strong></h1><p>几乎任何时候，我们在计算机里用近似值代替精确值来表示和操作数值，所以计算过程总是会有误差。而且对于给定的数值问题，常常有多种解决的方法，一些方法会更块，更精确或者对内存的需求更少。数值方法研究的对象包括 “计算方法” 和 “科学计算” 等等。这是一个很广阔的领域，而且我将提及的其他几门数学其实是数值方法的一些分支。这些分支包括抽样法理论，矩阵方程组，数值微分方程组和最优化。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Numerical Recipes in  C++: The Art of Scientific Computing<br>William Press, Saul  Teukolsky, William Vetterling and Brian Flannery<br>Cambridge University  Press</p>
</blockquote>
<h1 id="抽样法理论和信号处理"><a href="#抽样法理论和信号处理" class="headerlink" title="抽样法理论和信号处理"></a><strong>抽样法理论和信号处理</strong></h1><p>在计算机图形学里我们反复使用储存在正规二维数组里的数字集合来表示一些对象，例如图片和曲面。这时，我们就要用抽样法来表示这些对象。如果要控制这些对象的品质，抽样法理论就变得尤为重要。抽样法应用于图形学的常见例子是当物体被绘制在屏幕上时，它的轮廓呈现锯齿状的边缘。这锯齿状的边缘（被认为是 “混淆” 现象）是非常让人分散注意力的，用抽样法中著名的技术例如回旋，傅立叶变换，空间和频率的函数表示就能把这个现象减少到最小。这些思想在图像和音频处理领域是同样重要的。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>The Fourier Transform  and Its Applications<br>Ronald N.  Bracewell<br>McGraw Hill</p>
</blockquote>
<h1 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a><strong>矩阵计算</strong></h1><p>计算机图形学的许多问题要用到矩阵方程组的数值解法。一些涉及矩阵的问题包括：找出最好的位置与方向以使对象们互相匹配（最小二乘法），创建一个覆盖所给点集的曲面，并使皱折程度最小（薄板样条算法），还有材质模拟，例如水和衣服等。在图形学里矩阵表述相当流行，因此在用于图形学的数学中我对矩阵方程组的评价是很高的。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Matrix  Computations<br>Gene Golub and Charles  Van Loan<br>Johns Hopkins  University Press</p>
</blockquote>
<h1 id="物理学（物理模拟）"><a href="#物理学（物理模拟）" class="headerlink" title="物理学（物理模拟）"></a><strong>物理学（物理模拟）</strong></h1><p>物理学显然不是数学的分支，它是自成一家的学科。但是在计算机图形学的某些领域，物理学和数学是紧密联系的。在图形学里，牵涉物理学的问题包括光与物体的表面是怎样互相影响的，人与动物的移动方式，水与空气的流动。为了模拟这些自然现象，物理学的知识是必不可少的。这和解微分方程紧密联系，我将会在下一节提到微分方程。</p>
<h1 id="微分方程的数值解法（有限元方法）"><a href="#微分方程的数值解法（有限元方法）" class="headerlink" title="微分方程的数值解法（有限元方法）"></a><strong>微分方程的数值解法（有限元方法）</strong></h1><p>我相信对于计算机图形学来说，解微分方程的技巧是非常重要的。像我们刚才讨论的，计算机图形学致力于模拟源于真实世界的物理系统。波浪是怎样在水里形成的，动物是怎样在地面上行走的，这就是两个模拟物理系统的例子。模拟物理系统的问题经常就是怎样解微分方程的数值解。请注意，微分方程的数值解法与微分方程的符号解法是有很大差异的。符号解法求出没有误差的解，而且时常只用于一些非常简单的方程。有时大学课程里的 “微分方程” 只教符号解法，不过这并不会对多数计算机图形学的问题有帮助。</p>
<p>在对物理系统的模拟中，我们把世界细分为许多表示成矢量的小元素。然后这些元素之间的关系就可以用矩阵来描述。虽然要处理的矩阵方程组往往没有很精确的解，但是取而代之的是执行了一系列的计算，这些计算产生一个表示成数列的近似解。这就是微分方程的数值解法。请注意，矩阵方程的解法与微分方程数值解法的关系是很密切的。</p>
<h1 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a><strong>最优化</strong></h1><p>在计算机图形学里，我们常常为了期望的目标寻求一种合适的描述对象或者对象集的方法。例如安排灯的位置使得房间的照明看起来有种特殊的 “感觉”，动画里的人物要怎样活动四肢才能实现一个特殊的动作，怎样排版才不会使页面混乱。以上这些例子可以归结为最优化问题。十年前的计算机图形学几乎没有最优化技术的文献，不过最近这个领域越来越重视最优化理论。我认为在计算机图形学里，最优化的重要性将会日益增加。</p>
<h1 id="概率论与统计学"><a href="#概率论与统计学" class="headerlink" title="概率论与统计学"></a><strong>概率论与统计学</strong></h1><p>计算机图形学的许多领域都要用到概率论与统计学。当研究者涉足人类学科时，他们当然需要统计学来分析数据。图形学相关领域涉及人类学科，例如虚拟现实和人机交互 (HCI)。另外，许多用计算机描绘真实世界的问题牵涉到各种未知事件的概率。两个例子：一棵成长期的树, 它的树枝分杈的概率；虚拟的动物如何决定它的行走路线。最后，一些解高难度方程组的技巧用了随机数来估计方程组的解。重要的例子：蒙特卡罗方法经常用于光如何传播的问题。以上仅是一部分在计算机图形学里使用概率论和统计学的方法。</p>
<p>另外，在机器学习和统计学习中，需要非常多和深入的统计学知识。</p>
<h1 id="拓扑学"><a href="#拓扑学" class="headerlink" title="拓扑学"></a><strong>拓扑学</strong></h1><p>用一句话来形容拓扑学，它研究油炸圈饼与咖啡杯为什么在本质上是相同的。答案是他们都是只有一个洞的曲面。对于计算机图形学来说，拓扑学的形式（符号表示法）是表达思想的简便方法，常用于分析一些曲面的性质，在形状分析、形状匹配和搜索中得到应用。</p>
<h1 id="黎曼几何"><a href="#黎曼几何" class="headerlink" title="黎曼几何"></a><strong>黎曼几何</strong></h1><p>黎曼几何是研究流形曲面上的微积分与微分几何。不同与三维欧氏空间，它研究的曲面是在流形曲面上，其中用到不同的度量。这部分数学知识有点抽象，但是同样有效地被用到计算机图形学中。如共形几何理论就被发展起来在计算机图形学中得到广泛的应用。</p>
<h1 id="抽象代数"><a href="#抽象代数" class="headerlink" title="抽象代数"></a><strong>抽象代数</strong></h1><p>抽象代数就是研究群论，环论和域的代数学。相对于线性代数，内容也比较抽象。在计算机图形学上也时有用到。</p>
<h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a><strong>计算几何</strong></h1><p>计算几何学研究如何用计算机高效地表示与操作几何体。典型问题如，碰撞检测，把多边形分解为三角形，找出最靠近某个位置的点，这个学科包括了运算法则，数据结构和数学。图形学的研究者，只要涉足创建形体（建模），就要大量用到计算几何学。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Computational Geometry in C<br>Joseph O’Rourke<br>Cambridge University Press<br>Computational Geometry:  An Introduction<br>Franco Preparata  and Michael Shamos<br>Springer-Verlag </p>
</blockquote>
<h1 id="其他几何学"><a href="#其他几何学" class="headerlink" title="其他几何学"></a><strong>其他几何学</strong></h1><p>一些其他的几何学，如《仿射几何》、《射影几何》在计算机图形学的某些问题上用得比较多，对工程具有较大的促进应用。</p>
<h1 id="总结：数学应用和数学理论"><a href="#总结：数学应用和数学理论" class="headerlink" title="总结：数学应用和数学理论"></a><strong>总结：数学应用和数学理论</strong></h1><p>对于图形学来说，以上提到的许多数学学科都有个共同点：比起这些数学的理论价值，<strong>我们更倾向于发掘它们的应用价值。</strong>不要惊讶。计算机图形学的许多问题和物理学者与工程师们研究的问题是紧密联系的，并且物理学者与工程师们使用的数学工具正是计算机图形学研究者们使用的。多数研究纯数学理论的学科从不被用于计算机图形学。不过这不是绝对的。请注意这些特例：分子生物学正利用节理论来研究 DNA 分子动力学，亚原子物理学用到了抽象群论。也许有一天，纯数学理论也能推动计算机图形学的发展，谁知道呢？</p>
<p>事实上，文章中所提到一些数学分支，按照我国的教育体制，在数学系本科的学生（或者硕士研究生阶段的理工科学生）基本都能接触到。但是大学所学习的数学比较偏重于证明以构建完备的数学理论框架，而不太注重实际的使用，现在的大学教师授课的方式也是这样。</p>
<p>我认为，学习数学最好的方式就是使用它，使用它越多，你就觉得它越有用，越有趣，学得就越好，也越快，越扎实。当然，很少有人能精通全部的知识，对于计算机图形学的学习和实践，应当采取掌握较为宽广的数学知识基础，在需要的时候，对相关的数学知识再进行深入的学习和挖掘；不要因为自身数学知识的匮乏而沮丧，更不能因此而敌视数学，保持对计算机图形学强烈的兴趣和乐观上进的学习态度是学习计算机图形学的关键。</p>
<p>还有一点需要指出的是，在学习计算机图形学的过程中，你会发现各个方面的数学知识都会被用到，因此你掌握的数学知识会比较全面，也知道如何在实际中应用。这可能是应用数学在所有学科得到最好的体现。相反，一些做纯理论的数学工作者，掌握的数学知识就是他们所研究的一块，而对其他的数学知识掌握得就不够好，他们做得比较深入。当然，做应用数学和理论数学都有值得敬仰的地方，一个侧重在实际应用，而另一个侧重在理论深度，但要做好都不是很容易。数学说到底还是要学老用的。相对来讲，做计算机图形学能看到学到的数学在实际中所用了，<strong>“所用即所学”</strong>。试想一下，当你能看到自己做的美妙的东西被别人看到且被敬仰的时候，你的成就感一定会很大！</p>
<p>最后说一点的就是，学习计算机图形学和从事计算机图形学的研究，除了数学基础外，还需要较强的计算机编程能力，你务必要掌握和熟练一门编程语言，一般建议 C/C++，因为你要实现出你的想法，你必须编程去实现出来，做出漂亮的结果。编程也是很有趣的，只要你有兴趣，提高是非常快的！当然，这里我不阐述如何提高编程的能力和水平的方法。<strong>“数学” 和 “编程”，两手都要抓，两手都要硬！</strong>提醒大家一点的是，如果你对编程兴趣不大，或者就不愿编程，那你就不适合选择计算机图形学，可能更适合选择其他方向，比如统计学或理论数学。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;“学习计算机图形学需要多少的数学？”&lt;/strong&gt; 这是初学者最经常问的问题。狭义的计算机图形学指的是传统的三维建模，绘制，动画等，而广义的计算机图形学还包括计算机图像处理，视频处理，计算机视觉和机器学习等领域。&lt;/p&gt;
&lt;p&gt;答案取决于你&lt;strong&gt;想在计算机图形学领域钻研多深：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、如果仅仅使用周围唾手可得的图形软件，如 Photoshop, 3D Studio Max, Maya, AutoCAD 等，你不需要知道多少数学知识；通过掌握简单的概念和阅读使用教程你就能使用这些软件的基本功能；但是如果你想精通这些软件，你还是需要学习计算机图形学的一些入门知识的；&lt;/p&gt;
&lt;p&gt;2、如果想学习计算机图形学的入门知识，你至少需要掌握代数，三角学和线性代数的一些基本知识；这也是要成为图形软件高手所必需掌握的；&lt;/p&gt;
&lt;p&gt;3、如果想成为一名计算机图形学的研究工作者，那么对数学的学习将是 “活到老，学到老”。重要的是，从以前看似枯燥的数学到看到它的实际应用的过程中，你会更容易享受数学的美妙。在你不断进行计算机图形学的研究的过程中，你会感觉到你的数学知识越来越不够用，从而真正理解 “数学不是没有用，而是不够用！”。
    
    </summary>
    
      <category term="数学" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="计算机图形学" scheme="http://HawkAaron.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>前K个最频繁的元素</title>
    <link href="http://HawkAaron.github.io/2016/08/05/%E5%89%8DK%E4%B8%AA%E6%9C%80%E9%A2%91%E7%B9%81%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://HawkAaron.github.io/2016/08/05/前K个最频繁的元素/</id>
    <published>2016-08-05T14:06:00.000Z</published>
    <updated>2016-08-05T14:13:38.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a non-empty array of integers, return the <strong><code>k</code></strong> most frequent elements.</p>
<p>For example,<br>Given <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.</p>
<p><strong>Note: </strong></p>
<ul>
<li>You may assume <code>k</code> is always valid, 1 ≤ k ≤ number of unique elements.</li>
<li>Your algorithm’s time complexity <strong>must be</strong> better than $O(n\log (n))$, where $n$ is the array’s size.</li>
</ul>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>题目要求我们输出前k个出现最频繁的元素，因为k最大可以等于n，所以在最坏情况下我们需要统计所有数字的出现次数。那么这个问题就分成了两个部分：</p>
<ol>
<li>统计所有不同的数字出现的次数</li>
<li>找出出现次数前k大的数字</li>
</ol>
<p>对于问题1，因为数字可能很大，我们需要借助HashMap进行统计，时间复杂度是O(n)的。对于问题2，有多种方法：一种简单的方法是，对所有的次数快速排序，然后输出前k个，这样的时间复杂度是O(n log n)，不符合本题的要求。我们需要进行优化。</p>
<p>因为最后只需要返回k个数字，所以我们只需要一直维护一个大小为k的小根堆。当新的数字出现的次数大于堆中最小的次数时，我们对堆进行更新。时间复杂度是O(n log k)，是符合题目要求的。</p>
<p>那有没有办法进一步优化呢？因为k最坏情况下还是等于n的，n log k不是很理想。那么我们就需要换一种排序的方法。有一种排序的方法，其复杂度只和需要排序的数字的大小有关，而在本题中，需要排序的数字大小至多为n（某个数出现了n次）。答案是桶排序！桶排序就是用一个数组bucket记录每个数字出现的次数，每次把数字丢到相应编号的桶中，然后从后往前穷举每一个桶，取出其中的元素直到取满k个。时间复杂度是O(n)。</p>
<p>最后本问题的最优算法的时间复杂度是O(n)。</p>
<h1 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topKFrequent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span> (!nums.size()) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) cnt[num]++;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; bucket(nums.size() + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> kv : cnt) &#123;</div><div class="line">            bucket[kv.second].push_back(kv.first);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = bucket.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket[i].size(); ++j)&#123;</div><div class="line">                res.push_back(bucket[i][j]);</div><div class="line">                <span class="keyword">if</span> (res.size() == k) <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p><a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">LeetCode 347. Top K Frequent Elements</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;Given a non-empty array of integers, return the &lt;strong&gt;&lt;code&gt;
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="桶排序" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="HashMap" scheme="http://HawkAaron.github.io/tags/HashMap/"/>
    
      <category term="桶排序" scheme="http://HawkAaron.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Google面试题 3| 矩阵中的最长上升路径</title>
    <link href="http://HawkAaron.github.io/2016/08/04/Google%E9%9D%A2%E8%AF%95%E9%A2%983-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E8%B7%AF%E5%BE%84/"/>
    <id>http://HawkAaron.github.io/2016/08/04/Google面试题3-矩阵中的最长上升路径/</id>
    <published>2016-08-04T02:43:00.000Z</published>
    <updated>2016-08-04T03:07:23.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given an integer matrix, find the length of the longest increasing path.</p>
<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [9,9,4],</div><div class="line">  [6,6,8],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[1, 2, 6, 9]</code>.</p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [3,4,5],</div><div class="line">  [3,2,6],</div><div class="line">  [2,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed. <a id="more"></a></p>
<h1 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a>分析解答</h1><p>通过记忆化搜索实现动态规划，记忆化搜索是搜索和动态规划的结合，在搜索过程中记录已经求解完毕的状态，使得每个状态只需进行一次搜索。在本题中，<code>cache[i][j]</code>记录在(i,j)位置可以得到的最长上升路径，其值通过搜索相邻四个位置的最大路径值确定</p>
<ol>
<li>对每个点<code>DFS</code>，在4个方向找比当前小的数</li>
<li>利用动态规划的思想得到每个点的路径最大值</li>
<li>用<code>cache</code>数组存放距离，以后不用重复计算</li>
</ol>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>记忆化搜索<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; cache)</span> </span>&#123;</div><div class="line">        <span class="comment">// if calculated before, no need to do it again</span></div><div class="line">        <span class="keyword">if</span> (cache[x][y]) <span class="keyword">return</span> cache[x][y];</div><div class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + dr[i];</div><div class="line">            <span class="keyword">int</span> ny = y + dc[i];</div><div class="line">            <span class="comment">// if out of bond OR current cell value larger than previous cell value.</span></div><div class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= matrix.size() || ny &lt; <span class="number">0</span> || ny &gt;= matrix[<span class="number">0</span>].size() ||</div><div class="line">                matrix[nx][ny] &gt;= matrix[x][y]) <span class="keyword">continue</span>;</div><div class="line">            res = max(res, dfs(matrix, nx, ny, cache) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[x][y] = res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix.empty() || matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = matrix.size(), n = matrix[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cache(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                cache[i][j] = dfs(matrix, i, j, cache);</div><div class="line">                res = max(res, cache[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="external">LeetCode 329. Longest Increasing Path in a Matrix</a><br><a href="https://discuss.leetcode.com/topic/34835/15ms-concise-java-solution" target="_blank" rel="external">15ms Concise Java Solution</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;Given an integer matrix, find the length of the longest increasing path.&lt;/p&gt;
&lt;p&gt;From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nums = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [9,9,4],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [6,6,8],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [2,1,1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;4&lt;/code&gt;&lt;br&gt;The longest increasing path is &lt;code&gt;[1, 2, 6, 9]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nums = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [3,4,5],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [3,2,6],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [2,2,1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;4&lt;/code&gt;&lt;br&gt;The longest increasing path is &lt;code&gt;[3, 4, 5, 6]&lt;/code&gt;. Moving diagonally is not allowed.
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/DFS/"/>
    
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="DFS" scheme="http://HawkAaron.github.io/tags/DFS/"/>
    
      <category term="搜索" scheme="http://HawkAaron.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Longest Increasing Subsequence</title>
    <link href="http://HawkAaron.github.io/2016/08/03/Longest-Increasing-Subsequence/"/>
    <id>http://HawkAaron.github.io/2016/08/03/Longest-Increasing-Subsequence/</id>
    <published>2016-08-03T00:06:00.000Z</published>
    <updated>2016-08-04T00:14:18.866Z</updated>
    
    <content type="html"><![CDATA[<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,<br>Given <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br>The longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in $O(n^2)$ complexity.</p>
<p><strong>Follow up:</strong> Could you improve it to $O(n\log(n))$ time complexity?<a id="more"></a></p>
<h1 id="DP-solution-with-O-N-2-complexity"><a href="#DP-solution-with-O-N-2-complexity" class="headerlink" title="DP solution with O(N^2) complexity"></a>DP solution with O(N^2) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="comment">// This will be our array to track longest sequence length</span></div><div class="line">    <span class="keyword">int</span> dp[nums.size()];</div><div class="line"></div><div class="line">    <span class="comment">// Fill each position with value 1 in the array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        dp[i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Mark one pointer at i. For each i, start from j=0.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.size(); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">            <span class="comment">// It means next number contributes to increasing sequence.</span></div><div class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</div><div class="line">                <span class="comment">// But increase the value only if it results in a larger value of the sequence than dp[i]</span></div><div class="line">                <span class="comment">// It is possible that dp[i] already has larger value from some previous j'th iteration</span></div><div class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find the maximum length from the array that we just generated</span></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        res = max(res, dp[i]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-lines-C-code-with-O-NlogN-complexity"><a href="#9-lines-C-code-with-O-NlogN-complexity" class="headerlink" title="9 lines C++ code with O(NlogN) complexity"></a>9 lines C++ code with O(NlogN) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</div><div class="line">        <span class="keyword">auto</span> it = lower_bound(res.begin(), res.end(), x);</div><div class="line">        <span class="keyword">if</span> (it == res.end()) res.push_back(x);</div><div class="line">        <span class="keyword">else</span> *it = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="More-details"><a href="#More-details" class="headerlink" title="More details"></a>More details</h1><p><a href="https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation</a><br><a href="https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12" target="_blank" rel="external">https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12</a><br><a href="http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/" target="_blank" rel="external">http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an unsorted array of integers, find the length of longest increasing subsequence.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given &lt;code&gt;[10, 9, 2, 5, 3, 7, 101, 18]&lt;/code&gt;,&lt;br&gt;The longest increasing subsequence is &lt;code&gt;[2, 3, 7, 101]&lt;/code&gt;, therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.&lt;/p&gt;
&lt;p&gt;Your algorithm should run in $O(n^2)$ complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Could you improve it to $O(n\log(n))$ time complexity?
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DP" scheme="http://HawkAaron.github.io/tags/DP/"/>
    
      <category term="LeetCode" scheme="http://HawkAaron.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://HawkAaron.github.io/2016/08/02/hello-world/"/>
    <id>http://HawkAaron.github.io/2016/08/02/hello-world/</id>
    <published>2016-08-02T12:12:36.490Z</published>
    <updated>2016-08-03T11:57:21.416Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://HawkAaron.github.io/2016/08/01/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://HawkAaron.github.io/2016/08/01/线段树/</id>
    <published>2016-08-01T08:02:00.000Z</published>
    <updated>2016-08-03T15:21:21.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线段树的构造"><a href="#线段树的构造" class="headerlink" title="线段树的构造"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-build/" target="_blank" rel="external">线段树的构造</a></strong></h2><p>线段树是一棵二叉树，他的每个节点包含了两个额外的属性start和end用于表示该节点所代表的区间。start和end都是整数，并按照如下的方式赋值:</p>
<ul>
<li>根节点的 start 和 end 由 build 方法所给出。</li>
<li>对于节点 A 的左儿子，有 start=A.left, end=(A.left + A.right) / 2。</li>
<li>对于节点 A 的右儿子，有 start=(A.left + A.right) / 2 + 1, end=A.right。</li>
<li>如果 start 等于 end, 那么该节点是叶子节点，不再有左右儿子。</li>
</ul>
<p>实现一个 build 方法，接受 start 和 end 作为参数, 然后构造一个代表区间 [start, end] 的线段树，返回这棵线段树的根。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of SegmentTreeNode:</div><div class="line"> * class SegmentTreeNode &#123;</div><div class="line"> * public:</div><div class="line"> *     int start, end;</div><div class="line"> *     SegmentTreeNode *left, *right;</div><div class="line"> *     SegmentTreeNode(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start, this-&gt;end = end;</div><div class="line"> *         this-&gt;left = this-&gt;right = NULL;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param start, end: Denote an segment / interval</div><div class="line">     *@return: The root of Segment Tree</div><div class="line">     */</div><div class="line">    <span class="function">SegmentTreeNode * <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* node = <span class="keyword">new</span> SegmentTreeNode(start, end);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            node-&gt;left = build(start, mid);</div><div class="line">            node-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="线段树的查询"><a href="#线段树的查询" class="headerlink" title="线段树的查询"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-query/" target="_blank" rel="external">线段树的查询</a></strong></h2><p>对于一个有n个数的整数数组，在对应的线段树中, 根节点所代表的区间为0-n-1, 每个节点有一个额外的属性max，值为该节点所代表的数组区间start到end内的最大值。</p>
<p>为SegmentTree设计一个 query 的方法，接受3个参数root, start和end，线段树root所代表的数组中子区间[start, end]内的最大值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, start, end: The root of segment tree and </div><div class="line">     *                         an segment / interval</div><div class="line">     *@return: The maximum number in the interval [start, end]</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) <span class="keyword">return</span> root-&gt;max;</div><div class="line">        <span class="keyword">int</span> leftmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>, rightmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmax = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmax = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max(leftmax, rightmax);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="线段树的修改"><a href="#线段树的修改" class="headerlink" title="线段树的修改"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-modify/" target="_blank" rel="external">线段树的修改</a></strong></h2><p>对于一棵 最大线段树, 每个节点包含一个额外的 max 属性，用于存储该节点所代表区间的最大值。</p>
<p>设计一个 modify 的方法，接受三个参数 root、 index 和 value。该方法将 root 为跟的线段树中 [start, end] = [index, index] 的节点修改为了新的 value ，并确保在修改后，线段树的每个节点的 max 属性仍然具有正确的值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, index, value: The root of segment tree and </div><div class="line">     *@ change the node's value with [index, index] to the new given value</div><div class="line">     *@return: void</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;max = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;max = max(root-&gt;left-&gt;max, root-&gt;right-&gt;max);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="区间最小数"><a href="#区间最小数" class="headerlink" title="区间最小数"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/interval-minimum-number/" target="_blank" rel="external">区间最小数</a></strong></h2><p>给定一个整数数组（下标由 0 到 n-1，其中 n 表示数组的规模），以及一个查询列表。每一个查询列表有两个整数 [start, end]。 对于每个查询，计算出数组中从下标 start 到 end 之间的数的最小值，并返回在结果列表中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of Interval:</div><div class="line"> * classs Interval &#123;</div><div class="line"> *     int start, end;</div><div class="line"> *     Interval(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start;</div><div class="line"> *         this-&gt;end = end;</div><div class="line"> *     &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, * right;</div><div class="line">        <span class="keyword">int</span> start, end, min;</div><div class="line">        Node(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</div><div class="line">            <span class="keyword">this</span>-&gt;start = start;</div><div class="line">            <span class="keyword">this</span>-&gt;end = end;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">            min = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        Node* root = <span class="keyword">new</span> Node(start, end);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) </div><div class="line">            <span class="keyword">return</span> root-&gt;min;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> leftmin = <span class="number">1</span>&lt;&lt;<span class="number">30</span>, rightmin = leftmin;</div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmin = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmin = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> min(leftmin, rightmin);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Node* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;min = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;min = min(root-&gt;left-&gt;min, root-&gt;right-&gt;min);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param A, queries: Given an integer array and an query list</div><div class="line">     *@return: The result list</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intervalMinNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;Interval&gt; &amp;queries) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        <span class="keyword">if</span> (A.size() == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        Node* root = build(<span class="number">0</span>, A.size()<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.size(); i++) </div><div class="line">            modify(root, i, A[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;queries.size(); i++) &#123;</div><div class="line">            ret.push_back(query(root, queries[i].start, queries[i].end));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线段树的构造&quot;&gt;&lt;a href=&quot;#线段树的构造&quot; class=&quot;headerlink&quot; title=&quot;线段树的构造&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;http://www.lintcode.com/zh-cn/problem/segment-tree-build/&quot;&gt;线段树的构造&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;线段树是一棵二叉树，他的每个节点包含了两个额外的属性start和end用于表示该节点所代表的区间。start和end都是整数，并按照如下的方式赋值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点的 start 和 end 由 build 方法所给出。&lt;/li&gt;
&lt;li&gt;对于节点 A 的左儿子，有 start=A.left, end=(A.left + A.right) / 2。&lt;/li&gt;
&lt;li&gt;对于节点 A 的右儿子，有 start=(A.left + A.right) / 2 + 1, end=A.right。&lt;/li&gt;
&lt;li&gt;如果 start 等于 end, 那么该节点是叶子节点，不再有左右儿子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现一个 build 方法，接受 start 和 end 作为参数, 然后构造一个代表区间 [start, end] 的线段树，返回这棵线段树的根。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题6 | Count of Smaller Numbers After Self(数组计数)</title>
    <link href="http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%986-Count-of-Smaller-Numbers-After-Self(%E6%95%B0%E7%BB%84%E8%AE%A1%E6%95%B0)/"/>
    <id>http://HawkAaron.github.io/2016/08/01/Google-2016-面试题6-Count-of-Smaller-Numbers-After-Self(数组计数)/</id>
    <published>2016-08-01T04:38:00.000Z</published>
    <updated>2016-08-03T15:23:03.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给定一个数组nums,返回一个计数数组count，count[i]表示nums中第i个右边有多少个数小于nums[i]<br>Example:<br>nums = [5, 2, 6, 1]<br>输出[2,1,1,0]</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>此题不难给出O(N^2)的算法，先穷举nums中每个位置i，再穷举右边的数计算有多少个小于nums[i]。难点在于利用数据结构进行优化从而降低时间复杂度。线段树（segment tree）和平衡树（Balanced Binary Tree）是两种可以使用的数据结构。<a id="more"></a></p>
<p>线段树的每个节点表示一段区间，记录这个区间的某些信息，其基本思想是把区间一分为二，二分为四。。。直到不可再分（因此叶子节点的区间只包含一个数），如此可以把任意区间表示成log（区间大小）个子区间的拼接，以降低查询时间复杂度。在本题中，假设nums中的数字范围在0到maxnum之间，那么建树的区间为[0,maxnum]（也就是根节点所表示的区间）。每个节点记录其表示区间内的数字个数。本题涉及两种线段树基本操作：插入和查询。插入操作把nums[i]插入到线段树相应位置，同时对所有经过的区间的sum值进行累加；查询操作需要查询区间[0,nums[i]-1]所包含的数字个数，利用已经建好的线段树把查询区间分割为若干个节点所表示的区间，统计并返回这些节点的sum值之和。</p>
<p>平衡树用途更广，代码复杂度也更高，是一种保持叶子节点深度平衡的二叉搜索树，有多种方法实现，<a href="https://discuss.leetcode.com/category/395/count-of-smaller-numbers-after-self" target="_blank" rel="external">可以参照LeetCode</a>。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><h3 id="1-线段树-Segment-Tree"><a href="#1-线段树-Segment-Tree" class="headerlink" title="1.线段树 Segment Tree"></a><strong>1.线段树 Segment Tree</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> SegmentTreeNode &#123;</div><div class="line">        SegmentTreeNode* left, *right;</div><div class="line">        <span class="keyword">int</span> start, end;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        SegmentTreeNode(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> count)</div><div class="line">            : start(start), end(end), count(count) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function">SegmentTreeNode* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* root = <span class="keyword">new</span> SegmentTreeNode(start, end, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end)</div><div class="line">            <span class="keyword">return</span> root-&gt;count;</div><div class="line">        <span class="keyword">int</span> leftcount = <span class="number">0</span>, rightcount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> leftcount + rightcount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modifySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;count += value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modifySegmentTree(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modifySegmentTree(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        root-&gt;count = root-&gt;left-&gt;count + root-&gt;right-&gt;count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        SegmentTreeNode* root = build(<span class="number">-1000</span>, <span class="number">10000</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> ans = querySegmentTree(root, <span class="number">-1000</span>, nums[i]<span class="number">-1</span>);</div><div class="line">            modifySegmentTree(root, nums[i], <span class="number">1</span>);</div><div class="line">            ret.push_back(ans);</div><div class="line">        &#125;</div><div class="line">        reverse(ret.begin(), ret.end());</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>之前写的线段树居然不能有负区间，debug了好长时间，发现原来是区间中点计算有问题，应该类似于<code>int c = a + (b - a) / 2</code></p>
<h3 id="2-二叉搜索树-Binary-Search-Tree"><a href="#2-二叉搜索树-Binary-Search-Tree" class="headerlink" title="2.二叉搜索树 Binary Search Tree"></a><strong>2.二叉搜索树 Binary Search Tree</strong></h3><p>每个节点保存sum（左子树节点个数），dup（副本个数）。当插入一个数时，比它小的数的个数就是沿着树向右转时dup和sum之和，<a href="https://discuss.leetcode.com/topic/31405/9ms-short-java-bst-solution-get-answer-when-building-bst" target="_blank" rel="external">详情请见LeetCode</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum, dup = <span class="number">1</span>;</div><div class="line">        Node(<span class="keyword">int</span> v, <span class="keyword">int</span> s) : val(v), sum(s) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        Node* root = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            insert(nums[i], root, ret[i], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num, Node*&amp; root, <span class="keyword">int</span>&amp; ret, <span class="keyword">int</span> preSum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">            root = <span class="keyword">new</span> Node(num, <span class="number">0</span>);</div><div class="line">            ret = preSum;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">            root-&gt;sum++;</div><div class="line">            insert(num, root-&gt;left, ret, preSum);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; num) &#123;</div><div class="line">            insert(num, root-&gt;right, ret, preSum + root-&gt;dup + root-&gt;sum);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            root-&gt;dup++;</div><div class="line">            ret = preSum + root-&gt;sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a><strong>迭代版</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum = <span class="number">0</span>, dup = <span class="number">0</span>;</div><div class="line">        Node(<span class="keyword">int</span> v) : val(v) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        Node* root = <span class="keyword">new</span> Node(nums[nums.size()<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            ret[i] = insert(root, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Node* root, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (root-&gt;val != num) &#123;</div><div class="line">            <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">                root-&gt;sum++;</div><div class="line">                <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;left = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;left;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ret += root-&gt;dup + root-&gt;sum;</div><div class="line">                <span class="keyword">if</span> (root-&gt;right == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;right = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        root-&gt;dup++;</div><div class="line">        <span class="keyword">return</span> ret + root-&gt;sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给定一个数组nums,返回一个计数数组count，count[i]表示nums中第i个右边有多少个数小于nums[i]&lt;br&gt;Example:&lt;br&gt;nums = [5, 2, 6, 1]&lt;br&gt;输出[2,1,1,0]&lt;/p&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;此题不难给出O(N^2)的算法，先穷举nums中每个位置i，再穷举右边的数计算有多少个小于nums[i]。难点在于利用数据结构进行优化从而降低时间复杂度。线段树（segment tree）和平衡树（Balanced Binary Tree）是两种可以使用的数据结构。
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="BST" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/BST/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题5 | 岛屿计数2</title>
    <link href="http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%985-%E5%B2%9B%E5%B1%BF%E8%AE%A1%E6%95%B02/"/>
    <id>http://HawkAaron.github.io/2016/08/01/Google-2016-面试题5-岛屿计数2/</id>
    <published>2016-08-01T01:46:00.000Z</published>
    <updated>2016-08-03T15:22:40.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个m行n列的网格地图，每个位置为0或1，0表示海水1表示陆地。一开始地图全为0（没有陆地）。每次在一个位置加入一块陆地，返回此时地图中陆地的总块数（相邻陆地统计时为同一块陆地）。<br>Example:<br>操作#1: addLand(0, 0) turns the water at grid[0][0] into a land.<br><img src="http://img.blog.csdn.net/20160801094144259" alt="leetcode"><br>操作#2: addLand(0, 1) turns the water at grid[0][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094214103" alt="leetcode"><br>操作#3: addLand(1, 2) turns the water at grid[1][2] into a land.<br><img src="http://img.blog.csdn.net/20160801094236588" alt="leetcode"><br>操作#4: addLand(2, 1) turns the water at grid[2][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094255504" alt="leetcode"><br>返回答案数组: [1, 1, 2, 3]<br>你可以做到复杂度O(k log mn)吗？其中k为操作次数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。但是对于一个不断更新的地图，如果我们每次重新统计连通块个数，复杂度为O(m*n*k)，其中k为总操作个数。考虑到每次只有一个位置发生变化（从0变为1），完全不必重新统一，该陆地的产生职能影响周围四个位置。假设该陆地周围有t（p至多为4）个不连通的岛屿，那么该陆地为把这四个不同点岛屿合并为一个岛屿，使得总岛屿数下降t-1个。因此我们需要维护岛屿之间的连通性，自然的我们想到了并查集。<strong>并查集</strong>是一种解决此类问题的强力数据结构，以此题为例，初始时每个位置都是独立的、互不连通的，每个位置都有一个标签来identify自己，记录在fa数组中，fa[i]为i。当两个位置p、q相邻且都为1时，这两个位置需要统一它们的标签（表示这两个岛屿合并），即fa[p] = q。但是p、q的标签可能已经被修改，因此我们需要通过getfather函数递归找到它们的真实标签（getfather(i)的返回值也称为i的祖先），合并操作变为fa[getfather(p)] = getfather(q)。为了防止最坏情况下每次调用getfather函数都要经过m*n次递归，我们可以采用路径压缩的方法（详见代码中getfather函数），使得每个位置到其祖先的距离始终为一个很小的常数（与m、n无关）。本题中总体时间复杂度为O(m*n+k)，其中每次并查集的查询复杂度为一个常数（不超过4）。</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码 "></a><strong>参考代码 </strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numIslands2(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; positions) &#123;</div><div class="line">        <span class="keyword">bool</span> land[m][n];</div><div class="line">        <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> fa[m * n];</div><div class="line">        <span class="keyword">int</span> island = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line"></div><div class="line">        <span class="comment">// initialization</span></div><div class="line">        <span class="built_in">memset</span>(land, <span class="number">0</span>, <span class="keyword">sizeof</span>(land));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m*n; i++)</div><div class="line">            fa[i] = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;positions.size(); i++) &#123;</div><div class="line">            island++;</div><div class="line">            <span class="keyword">int</span> x = positions[i][<span class="number">0</span>], y = positions[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> f = x * n + y;</div><div class="line">            land[x][y] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;   <span class="comment">// 4 direction check</span></div><div class="line">                <span class="keyword">int</span> tx = x + dr[j];</div><div class="line">                <span class="keyword">int</span> ty = y + dc[j];</div><div class="line">                <span class="keyword">if</span> (tx &gt;=<span class="number">0</span> &amp;&amp; tx &lt; m &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; n &amp;&amp;</div><div class="line">                    land[tx][ty] &amp;&amp; getfather(fa, tx*n+ty) != f) &#123;</div><div class="line">                    fa[getfather(fa, tx*n+ty)] = f;</div><div class="line">                    island--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ret.push_back(island);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// disjoint-set and path compression</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> fa[], <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fa[i] == i) <span class="keyword">return</span> i;</div><div class="line">        <span class="keyword">return</span> fa[i] = getfather(fa, fa[i]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个m行n列的网格地图，每个位置为0或1，0表示海水1表示陆地。一开始地图全为0（没有陆地）。每次在一个位置加入一块陆地，返回此时地图中陆地的总块数（相邻陆地统计时为同一块陆地）。&lt;br&gt;Example:&lt;br&gt;操作#1: addLand(0, 0) turns the water at grid[0][0] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094144259&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#2: addLand(0, 1) turns the water at grid[0][1] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094214103&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#3: addLand(1, 2) turns the water at grid[1][2] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094236588&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;操作#4: addLand(2, 1) turns the water at grid[2][1] into a land.&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160801094255504&quot; alt=&quot;leetcode&quot;&gt;&lt;br&gt;返回答案数组: [1, 1, 2, 3]&lt;br&gt;你可以做到复杂度O(k log mn)吗？其中k为操作次数。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="http://HawkAaron.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Number of Islands</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Number-of-Islands/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Number-of-Islands/</id>
    <published>2016-07-31T13:44:00.000Z</published>
    <updated>2016-08-03T14:14:45.157Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<p>11110<br>11010<br>11000<br>00000<br>Answer: 1</p>
<p>Example 2:</p>
<p>11000<br>11000<br>00100<br>00011<br>Answer: 3</p>
<p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">public</span>:    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] != <span class="string">'1'</span>) <span class="keyword">return</span>;</div><div class="line">        grid[x][y] = <span class="string">'2'</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            dfs(x+dr[i], y+dc[i], grid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        m = grid.size(); </div><div class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dfs(i, j, grid);</div><div class="line">                    cnt++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Source: LeetCode 200. Number of Islands</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by conne
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="DFS" scheme="http://HawkAaron.github.io/tags/DFS/"/>
    
      <category term="图论" scheme="http://HawkAaron.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题3 | 摆动排序 II</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%983-%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F2/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题3-摆动排序2/</id>
    <published>2016-07-31T09:31:00.000Z</published>
    <updated>2016-08-03T15:22:32.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个整数数组nums，重新排列nums使得nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]…<br>Example:<br>nums = [1, 5, 1, 1, 6, 4], 一个可能的答案是[1, 4, 1, 5, 1, 6]<br>数据保证必定有解。</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p><strong>解法I O(nlogn)时间排序+O(n)空间辅助数组解法：</strong></p>
<ol>
<li><p>对原数组排序，得到排序后的辅助数组tmp</p>
</li>
<li><p>对原数组的偶数位下标填充tmp的末尾元素</p>
</li>
<li><p>对原数组的奇数位下标填充tmp的末尾元素</p>
</li>
</ol>
<p>算法复杂度是快速排序的复杂度O(NlogN)。<a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sz = nums.size();</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</div><div class="line">    <span class="keyword">int</span> k = sz - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解法II O(n)时间复杂度+O(1)空间复杂度解法：</strong></p>
<ol>
<li><p>使用O(n)时间复杂度的quickSelect算法，从未经排序的数组nums中选出中位数mid</p>
</li>
<li><p>参照解法I的思路，将nums数组的下标x通过函数idx()从[0, 1, 2, … , n - 1, n] 映射到 [1, 3, 5, … , 0, 2, 4, …]，得到新下标ix</p>
</li>
<li><p>以中位数mid为界，将大于mid的元素排列在ix的较小部分，而将小于mid的元素排列在ix的较大部分。</p>
</li>
</ol>
<p><strong><a href="https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing" target="_blank" rel="external">思路来源：https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing</a></strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line"></div><div class="line">    <span class="comment">// Find a median.</span></div><div class="line">    <span class="keyword">auto</span> midptr = nums.begin() + n / <span class="number">2</span>;</div><div class="line">    nth_element(nums.begin(), midptr, nums.end());</div><div class="line">    <span class="keyword">int</span> mid = *midptr;</div><div class="line"></div><div class="line">    <span class="comment">// Index-rewiring.</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> A(i) nums[(1+2*(i)) % (n|1)]</span></div><div class="line"></div><div class="line">    <span class="comment">// 3-way-partition-to-wiggly in O(n) time with O(1) space.</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (j &lt;= k) &#123;</div><div class="line">        <span class="keyword">if</span> (A(j) &gt; mid)</div><div class="line">            swap(A(i++), A(j++));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A(j) &lt; mid)</div><div class="line">            swap(A(j), A(k--));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-way-partition"><a href="#3-way-partition" class="headerlink" title="3-way-partition"></a><strong>3-way-partition</strong></h2><p><strong><a href="https://en.wikipedia.org/wiki/Dutch_national_flag_problem#Pseudocode" target="_blank" rel="external">详见维基百科</a></strong></p>
<p>伪码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">procedure three-way-partition(A : array of values, mid : value):</div><div class="line">    i ← 0</div><div class="line">    j ← 0</div><div class="line">    n ← size of A - 1</div><div class="line"></div><div class="line">    while j ≤ n:</div><div class="line">        if A[j] &lt; mid:</div><div class="line">            swap A[i] and A[j]</div><div class="line">            i ← i + 1</div><div class="line">            j ← j + 1</div><div class="line">        else if A[j] &gt; mid:</div><div class="line">            swap A[j] and A[n]</div><div class="line">            n ← n - 1</div><div class="line">        else:</div><div class="line">            j ← j + 1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个整数数组nums，重新排列nums使得nums[0] &amp;lt; nums[1] &amp;gt; nums[2] &amp;lt; nums[3]…&lt;br&gt;Example:&lt;br&gt;nums = [1, 5, 1, 1, 6, 4], 一个可能的答案是[1, 4, 1, 5, 1, 6]&lt;br&gt;数据保证必定有解。&lt;/p&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;解法I O(nlogn)时间排序+O(n)空间辅助数组解法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对原数组排序，得到排序后的辅助数组tmp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对原数组的偶数位下标填充tmp的末尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对原数组的奇数位下标填充tmp的末尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算法复杂度是快速排序的复杂度O(NlogN)。
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="排序" scheme="http://HawkAaron.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题2 | 不构造树的情况下验证先序遍历</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%982-%E4%B8%8D%E6%9E%84%E9%80%A0%E6%A0%91%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%AA%8C%E8%AF%81%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题2-不构造树的情况下验证先序遍历/</id>
    <published>2016-07-31T05:10:00.000Z</published>
    <updated>2016-08-03T15:22:20.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个字符序列，问该序列是否是一棵合法的二叉树的先序遍历？<br>找到一种不需要构造二叉树的方法。<br>For example：</p>
<blockquote>
<p>“9,3,4,#,#,1,#,#,2,#,6,#,#”<br>是下面这颗二叉树的先序遍历。其中＃代表空节点。</p>
</blockquote>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>通过观察上图中二叉树我们可以发现，一棵合法的二叉树去掉某个叶子节点后仍是合法的二叉树。在给出的字符序列中，叶子节点有很明显的特征，即叶子节点之后一定紧跟两个空节点＃。通过不断的把number,#,#的子串缩成空节点#(把number,#,#子串替换为#)，如果最后字符序列可以缩短到只有一个字符＃，那它就是我们要找的合法的先序遍历了。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSerialization</span><span class="params">(<span class="built_in">string</span> preorder)</span> </span>&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span> (preorder.length() &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> index = preorder.find(<span class="string">",#,#"</span>);</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> start = index;</div><div class="line">            <span class="keyword">while</span> (start &gt; <span class="number">0</span> &amp;&amp; preorder[start<span class="number">-1</span>] != <span class="string">','</span>)</div><div class="line">                start--;</div><div class="line">            <span class="keyword">if</span> (preorder[start] == <span class="string">'#'</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            preorder.erase(start, index-start+<span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag &amp;&amp; preorder[<span class="number">0</span>] == <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="external">LeetCode 331. Verify Preorder Serialization of a Binary Tree</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个字符序列，问该序列是否是一棵合法的二叉树的先序遍历？&lt;br&gt;找到一种不需要构造二叉树的方法。&lt;br&gt;For example：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“9,3,4,#,#,1,#,#,2,#,6,#,#”&lt;br&gt;是下面这颗二叉树的先序遍历。其中＃代表空节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析解答&quot;&gt;&lt;a href=&quot;#分析解答&quot; class=&quot;headerlink&quot; title=&quot;分析解答&quot;&gt;&lt;/a&gt;&lt;strong&gt;分析解答&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通过观察上图中二叉树我们可以发现，一棵合法的二叉树去掉某个叶子节点后仍是合法的二叉树。在给出的字符序列中，叶子节点有很明显的特征，即叶子节点之后一定紧跟两个空节点＃。通过不断的把number,#,#的子串缩成空节点#(把number,#,#子串替换为#)，如果最后字符序列可以缩短到只有一个字符＃，那它就是我们要找的合法的先序遍历了。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://HawkAaron.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="遍历" scheme="http://HawkAaron.github.io/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Google 2016 面试题1 | 数组补丁</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%981-%E6%95%B0%E7%BB%84%E8%A1%A5%E4%B8%81/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Google-2016-面试题1-数组补丁/</id>
    <published>2016-07-31T03:26:00.000Z</published>
    <updated>2016-08-03T15:22:09.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个从小到大排好序的整数数组nums和一个整数n，在数组中添加若干个补丁（元素）使得[1,n]的区间内的所有数都可以表示成nums中若干个数的和。返回最少需要添加的补丁个数。</p>
<blockquote>
<p>Example 1：<br>nums = [1, 3], n = 6</p>
</blockquote>
<p>返回1，表示至少需要添加1个数｛2｝，才可以表示1到6之间所有数。</p>
<blockquote>
<p>Example 2:<br>nums = [1, 5, 10], n = 20</p>
</blockquote>
<p>返回2，表示至少需要添加两个数｛2，4｝，才可以表示1到20之间所有数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答 "></a><strong>分析解答 </strong></h2><p>读者不难想到暴力搜索的做法：先穷举每一个不在数组里的数p，再穷举判断p是否可以表示为数组中若干个数的和；如果不能，则把p加入数组中，把答案加一。</p>
<p>然而，这种做法时间复杂度高且实际操作难度大（需要考虑穷举的顺序）。我们不妨先思考一个简单的问题，如果nums数组为空，那么最少需要多少个数字才能表示1到n之间所有数？相信大家都可以想到一个贪心算法，即按照1、2、4、8…都顺序添加，每次加入都数都比之前所有数的总和大1，直到总和大于n。本题的难点是预先给出了一些数，但这不影响我们的贪心策略：假设nums当前至多可以表示1到m之间的所有数，加入m+1；直到m大于等于n。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPatches</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (sum &lt; n) &#123;</div><div class="line">            <span class="keyword">while</span> (index &lt; nums.size() &amp;&amp; nums[index] &lt;= sum + <span class="number">1</span>) &#123;</div><div class="line">                sum += nums[index++];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum &lt; n) &#123;</div><div class="line">                res++;</div><div class="line">                sum += sum + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/patching-array/" target="_blank" rel="external">LeetCode 330. Patching Array</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述 &quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给出一个从小到大排好序的整数数组nums和一个整数n，在数组中添加若干个补丁（元素）使得[1,n]的区间内的所有数都可以表示成nums中若干个数的和。返回最少需要添加的补丁个数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 1：&lt;br&gt;nums = [1, 3], n = 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回1，表示至少需要添加1个数｛2｝，才可以表示1到6之间所有数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example 2:&lt;br&gt;nums = [1, 5, 10], n = 20&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回2，表示至少需要添加两个数｛2，4｝，才可以表示1到20之间所有数。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数组" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="面试题" scheme="http://HawkAaron.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Max Points on a Line</title>
    <link href="http://HawkAaron.github.io/2016/07/31/Max-Points-on-a-Line/"/>
    <id>http://HawkAaron.github.io/2016/07/31/Max-Points-on-a-Line/</id>
    <published>2016-07-31T01:55:00.000Z</published>
    <updated>2016-08-03T15:22:46.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>暴力枚举法。两点决定一条直线，$n$个点两两组合，可以得到$\dfrac{1}{2}n(n+1)$条直线，对每一条直线，判断$n$个点是否在该直线上，从而可以得到这条直线上的点的个数，选择最大的那条直线返回。复杂度$O(n^3)$。</p>
<p>上面的暴力枚举法以“边”为中心，再看另一种暴力枚举法，以每个“点”为中心，然后遍历剩余点，找到所有的斜率，如果斜率相同，那么一定共线对每个点，用一个哈希表，key为斜率，value为该直线上的点数，计算出哈希表后，取最大值，并更新全局最大值，最后就是结果。时间复杂度$O(n^2)$，空间复杂度$O(n)$。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序 "></a><strong>参考程序 </strong></h2><p>1.以“边”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * struct Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() : x(0), y(0) &#123;&#125;</div><div class="line"> *     Point(int a, int b) : x(a), y(b) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, zero = <span class="number">0</span>;</div><div class="line">                <span class="keyword">double</span> a, b, c;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    zero = <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    a = points[j].x - points[i].x;</div><div class="line">                    b = points[j].y - points[i].y;</div><div class="line">                    c = a * points[i].y - b * points[i].x;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;sz; k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (zero == <span class="number">0</span> &amp;&amp; a * points[k].y - b * points[k].x == c ||</div><div class="line">                        zero == <span class="number">1</span> &amp;&amp; points[k].x == points[i].x)</div><div class="line">                        cnt++;</div><div class="line">                &#125;</div><div class="line">                res = max(res, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2.以“点”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; slopemap;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            slopemap.clear();</div><div class="line">            <span class="keyword">int</span> samePoint = <span class="number">0</span>, cnt = <span class="number">0</span>, maxp = <span class="number">1</span>;</div><div class="line">            <span class="keyword">double</span> slope;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    slope = numeric_limits&lt;<span class="keyword">double</span>&gt;::infinity();</div><div class="line">                    <span class="keyword">if</span> (points[i].y == points[j].y) &#123;</div><div class="line">                        samePoint++;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    slope = (points[i].y - points[j].y) * <span class="number">1.0</span> / (points[i].x - points[j].x);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (slopemap.find(slope) != slopemap.end()) &#123;</div><div class="line">                    cnt = ++slopemap[slope];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    cnt = slopemap[slope] = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                maxp = max(maxp, cnt);</div><div class="line">            &#125;</div><div class="line">            res = max(res, maxp + samePoint);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.&lt;/p&gt;
&lt;h2 id=&quot;算法分析&quot;&gt;&lt;a href=&quot;#算法分析&quot; class=&quot;headerlink&quot; title=&quot;算法分析 &quot;&gt;&lt;/a&gt;&lt;strong&gt;算法分析 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;暴力枚举法。两点决定一条直线，$n$个点两两组合，可以得到$\dfrac{1}{2}n(n+1)$条直线，对每一条直线，判断$n$个点是否在该直线上，从而可以得到这条直线上的点的个数，选择最大的那条直线返回。复杂度$O(n^3)$。&lt;/p&gt;
&lt;p&gt;上面的暴力枚举法以“边”为中心，再看另一种暴力枚举法，以每个“点”为中心，然后遍历剩余点，找到所有的斜率，如果斜率相同，那么一定共线对每个点，用一个哈希表，key为斜率，value为该直线上的点数，计算出哈希表后，取最大值，并更新全局最大值，最后就是结果。时间复杂度$O(n^2)$，空间复杂度$O(n)$。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="平面几何" scheme="http://HawkAaron.github.io/categories/%E7%AE%97%E6%B3%95/%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95/"/>
    
    
      <category term="Google" scheme="http://HawkAaron.github.io/tags/Google/"/>
    
      <category term="几何" scheme="http://HawkAaron.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>轴对称</title>
    <link href="http://HawkAaron.github.io/2016/07/31/%E8%BD%B4%E5%AF%B9%E7%A7%B0/"/>
    <id>http://HawkAaron.github.io/2016/07/31/轴对称/</id>
    <published>2016-07-31T01:27:00.000Z</published>
    <updated>2016-08-03T15:23:16.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给定平面上的n个点，问是否存在一条平行于y轴的直线，使得这n个点相对于这条直线对称。</p>
<h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow-up "></a><strong>Follow-up </strong></h2><p>是否存在一条直线使得这n个点关于这条直线对称？<a id="more"></a></p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>因为对称轴一定平行于y轴，对称轴的特点就是每一个点都在另一边有一个对应的点。<strong>最左边的点一定对应某个最右边的点，因此最左边的点和最右边的点的中点应该在对称轴上。</strong></p>
<p>找到了对称轴的位置，我们就可以通过HashMap判断是否每一个点都有对应的点，最后输出答案即可。</p>
<p><strong>时间复杂度为O(n)。</strong></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Point &#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>) : x(x), y(y) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Point&gt; points;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; pmap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</div><div class="line">        Point p;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; p.x &gt;&gt; p.y;</div><div class="line">            points.push_back(p);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxv = -INF, minv = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            maxv = max(points[i].x, maxv);</div><div class="line">            minv = min(points[i].x, minv);</div><div class="line">            pmap[points[i].y].insert(points[i].x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;setx = pmap[points[i].y];</div><div class="line">            <span class="keyword">if</span> (setx.find(maxv + minv - points[i].x) == setx.end()) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        flag ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</div><div class="line">        points.clear();</div><div class="line">        pmap.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LeetCode相关练习题"><a href="#LeetCode相关练习题" class="headerlink" title="LeetCode相关练习题"></a><strong>LeetCode相关练习题</strong></h2><p><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="external">https://leetcode.com/problems/max-points-on-a-line/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;给定平面上的n个点，问是否存在一条平行于y轴的直线，使得这n个点相对于这条直线对称。&lt;/p&gt;
&lt;h2 id=&quot;Follow-up&quot;&gt;&lt;a href=&quot;#Follow-up&quot; class=&quot;headerlink&quot; title=&quot;Follow-up &quot;&gt;&lt;/a&gt;&lt;strong&gt;Follow-up &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;是否存在一条直线使得这n个点关于这条直线对称？
    
    </summary>
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="HashMap" scheme="http://HawkAaron.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>adb无线调试</title>
    <link href="http://HawkAaron.github.io/2016/05/29/adb%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/"/>
    <id>http://HawkAaron.github.io/2016/05/29/adb无线调试/</id>
    <published>2016-05-29T09:35:00.000Z</published>
    <updated>2016-08-03T10:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android开发会用到 adb，调试用的设备一般会选择模拟器，但不管怎么说没有真机流畅，而且有些场景还必须得用真机。问题是真机调试还得用数据线，连上电脑后各种弹框下载简直受不了。这里介绍一下如何通过WiFi无线调试：<br><a id="more"></a></p>
<h2 id="0x00-前期准备"><a href="#0x00-前期准备" class="headerlink" title="0x00 前期准备"></a><strong>0x00 前期准备</strong></h2><ol>
<li>无线调试的前提是终端设备在同一局域网（能相互ping通即可），这里我们在 PC 创建一个免费WiFi，手机连上。</li>
<li>手机需要root权限，以便于后面进行相关设置（目前各大厂商都有自己的权限管理中心，没有的可以刷开发版ROM或者用第三方root软件）。</li>
<li>安装<a href="https://www.baidu.com/s?wd=Android%20Terminal%20Emulator" target="_blank" rel="external">Android终端模拟器</a>。</li>
</ol>
<h2 id="0x01-终端配置"><a href="#0x01-终端配置" class="headerlink" title="0x01 终端配置"></a><strong>0x01 终端配置</strong></h2><p>打开终端模拟器，依次输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ su</div><div class="line"># stop adbd</div><div class="line"># setprop service.adb.tcp.port 5555</div><div class="line"># start adbd</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20160529171056030" alt="adbd"></p>
<p>注意<code>setprop service.adb.tcp.port 5555</code> 把adbd的监听端口号设置为默认的5555，可以换成其它的。</p>
<h2 id="0x02-连接终端"><a href="#0x02-连接终端" class="headerlink" title="0x02 连接终端"></a><strong>0x02 连接终端</strong></h2><p>首先需要获取手机的IP地址：<br>在终端模拟器中输入<code>ip addr</code> ：<br><img src="http://img.blog.csdn.net/20160529171712017" alt="ip addr"><br>可以看到下面 wlan0 的ip是 192.168.191.4<br>在CMD下输入以下命令：<br><code>adb connect 192.168.191.4</code><br>如果手机adbd的监听端口不是默认的5555，则输入以下命令：<br><code>adb connect 192.168.191.4:6666</code>（这里以6666为例）</p>
<p><img src="http://img.blog.csdn.net/20160529171921591" alt="adb devices"></p>
<p>可见已成功连接。</p>
<h2 id="0x03-调试运行"><a href="#0x03-调试运行" class="headerlink" title="0x03 调试运行"></a><strong>0x03 调试运行</strong></h2><p>这里简单的创建一个Android工程：<br><img src="http://img.blog.csdn.net/20160529172826384" alt="android"><br>注意此时 DDMS 中可以看见设备：<br><img src="http://img.blog.csdn.net/20160529172919073" alt="ddms"><br>可见我已经换了监听端口。</p>
<p>点击直接运行工程进入设备选择界面：<br><img src="http://img.blog.csdn.net/20160529173258867" alt="android device chooser"></p>
<p>选中后确定，很快地在手机中运行了：<br><img src="http://img.blog.csdn.net/20160529173457784" alt="hello world"></p>
<h2 id="0x04-步骤总结"><a href="#0x04-步骤总结" class="headerlink" title="0x04 步骤总结"></a><strong>0x04 步骤总结</strong></h2><p>1.进入android模拟终端，依次输入以下命令：<br><code>su</code> : 获取root权限（必须）<br><code>setprop service.adb.tcp.port 5555</code> ：设置adb监听端口（只用设置一次）<br><code>stop adbd</code> ：首先关闭 adbd<br><code>start adbd</code> ：然后开启 adbd<br><code>ip addr</code> ：获取手机IP，wlan0对应的IP</p>
<p>2.CMD下adb连接手机：<br><code>adb connect IP:PORT</code> : 端口默认为5555，如果设置成其它的需要在IP后显示指定<br><code>adb devices</code> ：查看已经连上的设备（可选）<br><code>adb shell</code> ：进入手机终端shell（可选）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发会用到 adb，调试用的设备一般会选择模拟器，但不管怎么说没有真机流畅，而且有些场景还必须得用真机。问题是真机调试还得用数据线，连上电脑后各种弹框下载简直受不了。这里介绍一下如何通过WiFi无线调试：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://HawkAaron.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://HawkAaron.github.io/tags/Android/"/>
    
      <category term="调试" scheme="http://HawkAaron.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="局域网" scheme="http://HawkAaron.github.io/tags/%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    
      <category term="手机" scheme="http://HawkAaron.github.io/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python开发环境搭建（Windows）</title>
    <link href="http://HawkAaron.github.io/2015/06/14/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAwin7/"/>
    <id>http://HawkAaron.github.io/2015/06/14/Python开发环境搭建win7/</id>
    <published>2015-06-14T13:47:00.000Z</published>
    <updated>2016-08-03T13:44:16.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装配置Python"><a href="#安装配置Python" class="headerlink" title="安装配置Python"></a>安装配置Python</h1><p>其实在开发python最好在ubuntu环境下，简单也便于扩展各个package。这次来讲一下如何在win7上搭建Python开发环境。由于python的跨平台性。在windows下和ubuntu下基本上没什么差别。下面从几个不步骤来搭建开发环境。</p>
<ol>
<li><p>下载（<a href="https://www.python.org/downloads/）安装python.2.7.8" target="_blank" rel="external">https://www.python.org/downloads/）安装python.2.7.8</a>. python有2.7的版本和3.x版本，建议还是使用python-2.7.x 版本，因为python的各大框架都支持2.7版本，但是不支持3.x版本。例如简介并且功能强大的webpy就不支持3.x版本，好像web2py,django 对3.x版本也支持不太好。<br>安装就按照默认安装模式即可，主要是安装完成后设置环境变量。python也要配置环境变量，不过比Java简单多了，windows7下：计算机-&gt;属性-&gt;计算机名称、域和工作组设置（更改设置）-&gt;高级-&gt;环境变量，在变量PATH中加入C:/Python27，即之前的安装路径。</p>
</li>
<li><p>在命令行输入Python，出现下图所示说明安装配置成功。<br><img src="http://img.blog.csdn.net/20150614220256424" alt=""></p>
<a id="more"></a>
</li>
</ol>
<h1 id="安装配置Pycharm-IDE开发工具"><a href="#安装配置Pycharm-IDE开发工具" class="headerlink" title="安装配置Pycharm IDE开发工具"></a>安装配置Pycharm IDE开发工具</h1><p>在python的开发过程中，刚开始一直没找到像eclipse 那样的方便的开发工具，大部分网友估计用过ecplise的pydev插件。其实早期学习的python过程，确实也用过这个工具。但是最终发现这个pycharm后，果断的放弃eclipse，因为它太好用啦。<br> PyCharm 是我用过的python编辑器中，比较顺手的一个。而且可以跨平台，在macos和windows下面都可以用，这点比较好。<br> <a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="external">pycharm的官方下载地址： http://www.jetbrains.com/pycharm/ </a><br> 我们可以下载free的社区版，这足够我们用了。安装按照默认安装即可，安装成功启动如下：代表安装成功。<br>首先预览一下 PyCharm 在实际应用中的界面：<br><img src="http://img.blog.csdn.net/20150614220848906" alt=""></p>
<p>PyCharm 的激活方式：<br>1，推荐购买正版。<br>2，可以选择试用，免费试用30天。<br>3，网上找激活码：<br>用户名：yueting3527<br>注册码：<br>===== LICENSE BEGIN =====<br>93347-12042010<br>00001FMHemWIs”6wozMZnat3IgXKXJ<br>2!nV2I6kSO48hgGLa9JNgjQ5oKz1Us<br>FFR8k”nGzJHzjQT6IBG!1fbQZn9!Vi<br>===== LICENSE END =====</p>
<h1 id="Pycharm的使用"><a href="#Pycharm的使用" class="headerlink" title="Pycharm的使用"></a>Pycharm的使用</h1><ol>
<li>点击Create New Project.</li>
<li>输入项目名、路径、选择python解释器。如果没有出现python解释器，进入步骤3.<br><img src="http://img.blog.csdn.net/20150614221056309" alt=""></li>
<li>选择python解释器。可以看到，一旦添加了python解释器，pycharm就会扫描出你已经安装的python扩展包，和这些扩展包的最新版本。</li>
<li>点击OK之后，就会创建一个空项目，里面包含一个.idea的文件夹，用于pycharm管理项目。</li>
<li>新建一个文件：右键单击刚建好的helloWord项目，选择New –&gt; Python File<br><img src="http://img.blog.csdn.net/20150614221428207" alt=""></li>
<li>输入文件名：<br><img src="http://img.blog.csdn.net/20150614221552477" alt=""></li>
<li><p>进入编写界面：PyCharm的默认编辑界面很怪，会自动生成一行 <strong>author</strong> = “作者” 的头。而比较常用的文件头，如：#coding=utf-8 等，反倒没有自动生成。<br><img src="http://img.blog.csdn.net/20150614221724802" alt=""><br>输入code：print “Hello word!”<br><img src="http://img.blog.csdn.net/20150614221923517" alt=""></p>
</li>
<li><p>设置控制台：运行之前，我们发现快捷菜单上的【运行】和【调试】都是灰色的，不可触发状态。是因为，我们需要先配置一下控制台。点击运行旁边的黑色倒三角，进入【Run/Debug<br>Configurations】配置界面。（或者点击Run –&gt; Edit Configurations 也一样）<br><img src="http://img.blog.csdn.net/20150614222121670" alt=""><br>在【Run/Debug Configurations】配置界面里，点击绿色的加号，新建一个配置项，并选择python。（因为hello word 就是个python程序）<br><img src="http://img.blog.csdn.net/20150614222249308" alt=""><br>在右边的配置界面里：Name 一栏里写个名字，比如Hello。点击Scrip选项，找到刚才我们写的hello_word.py<br><img src="http://img.blog.csdn.net/20150614222438443" alt=""><br>点击ok, 自动返回到编辑界面，这时候【运行】【调试】按钮全部变绿！<br><img src="http://img.blog.csdn.net/20150614222535224" alt=""></p>
</li>
<li><p>运行：点击绿色的运行按钮，观看输出的结果：<br><img src="http://img.blog.csdn.net/20150614222630525" alt=""><br>到此，Python开发环境搭建完成，第一个Python工程已经成功运行。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装配置Python&quot;&gt;&lt;a href=&quot;#安装配置Python&quot; class=&quot;headerlink&quot; title=&quot;安装配置Python&quot;&gt;&lt;/a&gt;安装配置Python&lt;/h1&gt;&lt;p&gt;其实在开发python最好在ubuntu环境下，简单也便于扩展各个package。这次来讲一下如何在win7上搭建Python开发环境。由于python的跨平台性。在windows下和ubuntu下基本上没什么差别。下面从几个不步骤来搭建开发环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载（&lt;a href=&quot;https://www.python.org/downloads/）安装python.2.7.8&quot;&gt;https://www.python.org/downloads/）安装python.2.7.8&lt;/a&gt;. python有2.7的版本和3.x版本，建议还是使用python-2.7.x 版本，因为python的各大框架都支持2.7版本，但是不支持3.x版本。例如简介并且功能强大的webpy就不支持3.x版本，好像web2py,django 对3.x版本也支持不太好。&lt;br&gt;安装就按照默认安装模式即可，主要是安装完成后设置环境变量。python也要配置环境变量，不过比Java简单多了，windows7下：计算机-&amp;gt;属性-&amp;gt;计算机名称、域和工作组设置（更改设置）-&amp;gt;高级-&amp;gt;环境变量，在变量PATH中加入C:/Python27，即之前的安装路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在命令行输入Python，出现下图所示说明安装配置成功。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150614220256424&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://HawkAaron.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://HawkAaron.github.io/tags/Python/"/>
    
      <category term="开发工具" scheme="http://HawkAaron.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>proteus解决LED二极管不发光问题</title>
    <link href="http://HawkAaron.github.io/2015/06/07/proteus%E8%A7%A3%E5%86%B3LED%E4%BA%8C%E6%9E%81%E7%AE%A1%E4%B8%8D%E5%8F%91%E5%85%89%E9%97%AE%E9%A2%98/"/>
    <id>http://HawkAaron.github.io/2015/06/07/proteus解决LED二极管不发光问题/</id>
    <published>2015-06-07T05:11:00.000Z</published>
    <updated>2016-08-03T13:44:54.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20150607130238443" alt=""><br>如上图，LED正接不亮，这种情况是LED和电阻之间没有导线连接造成的（一般元件之间必须要有导线连接，如果直接把元件拖到后面，看起来接上去了，其实是断开的）<br><img src="http://img.blog.csdn.net/20150607130353831" alt=""><br>拖动电阻，发现的确没有连接<br><img src="http://img.blog.csdn.net/20150607130443096" alt=""><br>连接后LED正常<br><a id="more"></a><br>也许你会发现连线正常后LED依然不亮，这时你应该注意一下电阻值的设定<br><img src="http://img.blog.csdn.net/20150607130632281" alt=""><br>如上图，5k的阻值，LED不亮了<br><img src="http://img.blog.csdn.net/20150607130931719" alt=""><br>阻值设为2k时很暗，这说明阻值高了，一般我们设置为100或200</p>
<p>最后，如果你发现连接正常并且电阻值很低时LED还是不亮，那很可能是你的LED接反了，注意图中的接法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130238443&quot; alt=&quot;&quot;&gt;&lt;br&gt;如上图，LED正接不亮，这种情况是LED和电阻之间没有导线连接造成的（一般元件之间必须要有导线连接，如果直接把元件拖到后面，看起来接上去了，其实是断开的）&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130353831&quot; alt=&quot;&quot;&gt;&lt;br&gt;拖动电阻，发现的确没有连接&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150607130443096&quot; alt=&quot;&quot;&gt;&lt;br&gt;连接后LED正常&lt;br&gt;
    
    </summary>
    
      <category term="数字逻辑" scheme="http://HawkAaron.github.io/categories/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="Proteus" scheme="http://HawkAaron.github.io/tags/Proteus/"/>
    
      <category term="数字逻辑" scheme="http://HawkAaron.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>C语言连接MySQL（codeblocks）</title>
    <link href="http://HawkAaron.github.io/2015/06/06/C%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySQL-codeblocks/"/>
    <id>http://HawkAaron.github.io/2015/06/06/C语言连接MySQL-codeblocks/</id>
    <published>2015-06-06T08:55:00.000Z</published>
    <updated>2016-08-03T11:56:56.332Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></div><div class="line"><span class="comment">/*数据库连接用宏*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HOST <span class="meta-string">"localhost"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USERNAME <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DATABASE <span class="meta-string">"mysql"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *query;</div><div class="line">    query=<span class="string">"select host,user from user"</span>;</div><div class="line">    query_sql(query);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_sql</span><span class="params">(<span class="keyword">char</span>* sql)</span></span></div><div class="line">&#123;</div><div class="line">    MYSQL my_connection; <span class="comment">/*这是一个数据库连接*/</span></div><div class="line">    <span class="keyword">int</span> res; <span class="comment">/*执行sql語句后的返回标志*/</span></div><div class="line">    MYSQL_RES *res_ptr; <span class="comment">/*指向查询结果的指针*/</span></div><div class="line">    MYSQL_FIELD *field; <span class="comment">/*字段结构指针*/</span></div><div class="line">    MYSQL_ROW result_row; <span class="comment">/*按行返回的查询信息*/</span></div><div class="line">    <span class="keyword">int</span> row, column; <span class="comment">/*查询返回的行数和列数*/</span></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="comment">/*初始化mysql连接my_connection*/</span></div><div class="line">    mysql_init(&amp;my_connection);</div><div class="line">    <span class="comment">/*建立mysql连接*/</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != mysql_real_connect(&amp;my_connection, HOST, USERNAME, PASSWORD,</div><div class="line">                                   DATABASE, <span class="number">0</span>, <span class="literal">NULL</span>, CLIENT_FOUND_ROWS))  <span class="comment">/*连接成功*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库查询query_sql连接成功！\n"</span>);</div><div class="line">        <span class="comment">/*设置查询编码为gbk，以支持中文*/</span></div><div class="line">        mysql_query(&amp;my_connection, <span class="string">"set names gbk"</span>);</div><div class="line">        res = mysql_query(&amp;my_connection, sql);</div><div class="line">        <span class="keyword">if</span> (res)   <span class="comment">/*执行失败*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Error： mysql_query !\n"</span>);</div><div class="line">            <span class="comment">/*关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>     <span class="comment">/*现在就代表执行成功了*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">/*将查询的結果给res_ptr*/</span></div><div class="line">            res_ptr = mysql_store_result(&amp;my_connection);</div><div class="line">            <span class="comment">/*如果结果不为空，就把结果print*/</span></div><div class="line">            <span class="keyword">if</span> (res_ptr)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/*取得結果的行数和*/</span></div><div class="line">                column = mysql_num_fields(res_ptr);</div><div class="line">                row = mysql_num_rows(res_ptr);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"查询到 %d 行 \n"</span>, row);</div><div class="line">                <span class="comment">/*输出結果的字段名*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; field = mysql_fetch_field(res_ptr); i++)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%10s "</span>, field-&gt;name);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                <span class="comment">/*按行输出結果*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; row+<span class="number">1</span>; i++)</div><div class="line">                &#123;</div><div class="line">                    result_row = mysql_fetch_row(res_ptr);</div><div class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; column; j++)</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%10s "</span>, result_row[j]);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*不要忘了关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库连接失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意事项：</p>
<ol>
<li>在Linker settings-&gt;Link libraries中添加libmysql.lib的路径</li>
<li>在Search directories-&gt;的Compiler中添加mysql.h的文件夹路径（总之就是让编译器能找到libmysql.lib和mysql.h）</li>
<li>在#include <mysql.h>之前添加#include <winsock2.h>（网上很多资料没有这一步，但是我这边实际操作时发现不加这一句编译无法通过）<br>运行结果：<br><img src="http://img.blog.csdn.net/20150606170050484" alt=""></winsock2.h></mysql.h></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;winsock2.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;mysql.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*数据库连接用宏*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; HOST &lt;span class=&quot;meta-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; USERNAME &lt;span class=&quot;meta-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PASSWORD &lt;span class=&quot;meta-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; DATABASE &lt;span class=&quot;meta-string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *query;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query=&lt;span class=&quot;string&quot;&gt;&quot;select host,user from user&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    query_sql(query);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query_sql&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* sql)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL my_connection; &lt;span class=&quot;comment&quot;&gt;/*这是一个数据库连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res; &lt;span class=&quot;comment&quot;&gt;/*执行sql語句后的返回标志*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_RES *res_ptr; &lt;span class=&quot;comment&quot;&gt;/*指向查询结果的指针*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_FIELD *field; &lt;span class=&quot;comment&quot;&gt;/*字段结构指针*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MYSQL_ROW result_row; &lt;span class=&quot;comment&quot;&gt;/*按行返回的查询信息*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, column; &lt;span class=&quot;comment&quot;&gt;/*查询返回的行数和列数*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*初始化mysql连接my_connection*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mysql_init(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*建立mysql连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; != mysql_real_connect(&amp;amp;my_connection, HOST, USERNAME, PASSWORD,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                   DATABASE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, CLIENT_FOUND_ROWS))  &lt;span class=&quot;comment&quot;&gt;/*连接成功*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;数据库查询query_sql连接成功！\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*设置查询编码为gbk，以支持中文*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mysql_query(&amp;amp;my_connection, &lt;span class=&quot;string&quot;&gt;&quot;set names gbk&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res = mysql_query(&amp;amp;my_connection, sql);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res)   &lt;span class=&quot;comment&quot;&gt;/*执行失败*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Error： mysql_query !\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*关闭连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            mysql_close(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;/*现在就代表执行成功了*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*将查询的結果给res_ptr*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res_ptr = mysql_store_result(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*如果结果不为空，就把结果print*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res_ptr)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*取得結果的行数和*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                column = mysql_num_fields(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                row = mysql_num_rows(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;查询到 %d 行 \n&quot;&lt;/span&gt;, row);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*输出結果的字段名*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; field = mysql_fetch_field(res_ptr); i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%10s &quot;&lt;/span&gt;, field-&amp;gt;name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*按行输出結果*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; row+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    result_row = mysql_fetch_row(res_ptr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; column; j++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%10s &quot;&lt;/span&gt;, result_row[j]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*不要忘了关闭连接*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            mysql_close(&amp;amp;my_connection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;数据库连接失败&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://HawkAaron.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://HawkAaron.github.io/tags/MySQL/"/>
    
      <category term="C" scheme="http://HawkAaron.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>终于解决“Git Windows客户端保存用户名与密码”的问题</title>
    <link href="http://HawkAaron.github.io/2015/06/02/Git-Windows%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://HawkAaron.github.io/2015/06/02/Git-Windows客户端保存用户名与密码的问题/</id>
    <published>2015-06-02T14:03:00.000Z</published>
    <updated>2016-08-03T13:50:18.107Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows" target="_blank" rel="external">Git - How to use netrc file on windows - Stack Overflow</a><br><img src="http://img.blog.csdn.net/20150602220505492" alt=""><br><a id="more"></a><br>这就是正确答案，我们已经验证过了，下面详细描述一下解决方法：</p>
<ol>
<li><p>在Windows中添加一个HOME环境变量，值为%USERPROFILE%，如下图：<br><img src="http://img.blog.csdn.net/20150602220742394" alt=""></p>
</li>
<li><p>在“开始》运行”中打开%Home%，新建一个名为“_netrc”的文件。</p>
</li>
<li>用记事本打开_netrc文件，输入Git服务器名、用户名、密码，并保存。示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine git.cnblogs.com</div><div class="line">login cnblogs_user</div><div class="line">password cnblogs_pwd</div></pre></td></tr></table></figure>
</li>
</ol>
<p>That is the answer, and that is exactly the fucking git!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows&quot;&gt;Git - How to use netrc file on windows - Stack Overflow&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150602220505492&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://HawkAaron.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://HawkAaron.github.io/tags/Git/"/>
    
      <category term="StackOverflow" scheme="http://HawkAaron.github.io/tags/StackOverflow/"/>
    
  </entry>
  
</feed>
