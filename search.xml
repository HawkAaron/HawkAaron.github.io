<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[9个优秀的标签云免费生成工具]]></title>
      <url>http://HawkAaron.github.io/2016/08/07/9%E4%B8%AA%E4%BC%98%E7%A7%80%E7%9A%84%E6%A0%87%E7%AD%BE%E4%BA%91%E5%85%8D%E8%B4%B9%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>标签云或文字云是关键词的视觉化描述，用于汇总用户生成的标签或一个网站的文字内容。标签一般是独立的词汇，常常按字母顺序排列，其重要程度又能通过改变字体大小或颜色来表现，所以标签云可以灵活地依照字序或热门程度来检索一个标签。 大多数标签本身就是超级链接，直接指向与标签相联的一系列条目。</p>
</blockquote>
<p>我经常看到一些网站有云标签，我也很喜欢这样的云标签，网上我发现有很多的标签云教程，但是找到理想的并不是太多，这就是为什么我今天共享这几个标签元的原因。<a id="more"></a></p>
<h1 id="Wordle"><a href="#Wordle" class="headerlink" title="Wordle"></a><a href="http://www.wordle.net/" target="_blank" rel="external">Wordle</a></h1><p><img src="Wordle.jpg" alt=""><br>Wordle是产生“词云：。不同的字体，布局和配色方案，你可以调整你的云。。您可以打印出来，或将它们保存到Wordle画廊与朋友分享。</p>
<h1 id="tagCloud-生成器"><a href="#tagCloud-生成器" class="headerlink" title="tagCloud 生成器"></a><a href="http://www.tag-cloud.de/" target="_blank" rel="external">tagCloud 生成器</a></h1><p><img src="tagCloud-generator.jpg" alt=""><br>只需几步下载表格，这可以产生HTML和Flash在线标签云。</p>
<h1 id="ImageChef"><a href="#ImageChef" class="headerlink" title="ImageChef"></a><a href="http://www.imagechef.com/ic/word_mosaic/" target="_blank" rel="external">ImageChef</a></h1><p><img src="ImageChef.jpg" alt=""><br>您可以创建不同的风格和异形词云，并作为明信片发送给您的朋友等。</p>
<h1 id="ABCya"><a href="#ABCya" class="headerlink" title="ABCya"></a><a href="http://www.abcya.com/word_clouds.htm" target="_blank" rel="external">ABCya</a></h1><p><img src="ABCya.jpg" alt=""><br>A字云是一个字频的图形表示。您可以键入或粘贴到自己的主页上显示框的文字和按箭头按钮来查看生成的字云方向。使用云以上的图形按钮，可以改变一个字云的外观。这是专门为学校的孩子们设计的。</p>
<h1 id="Tagul"><a href="#Tagul" class="headerlink" title="Tagul"></a><a href="http://tagul.com/" target="_blank" rel="external">Tagul</a></h1><p><img src="Tagul.jpg" alt=""><br>Tagul是专为网络大师们要放置在网页上漂亮的云彩而准备的。Tagul云可以自定义字体，云的形状，颜色等，为您的网站访问者提供更好的用户体验。</p>
<h1 id="字云"><a href="#字云" class="headerlink" title="字云"></a><a href="http://www.tocloud.com/" target="_blank" rel="external">字云</a></h1><p><img src="Word-Cloud.jpg" alt=""><br>ToCloud是一个网上的自由标签云生成器，你可以设置词的长度和频率。因此，页面生成的字云给出了一个快速了解如何优化某些词的页面。ToCloud也非常好用，他能提取短语，是一个比较好的标签云工具之一。</p>
<h1 id="WordItOut"><a href="#WordItOut" class="headerlink" title="WordItOut"></a><a href="http://worditout.com/" target="_blank" rel="external">WordItOut</a></h1><p><img src="WordItOut.jpg" alt=""><br>WordItOut让您的文字转换成字云。然后您可以保存和共享，使每个人都可以找到。</p>
<h1 id="Tagxedo"><a href="#Tagxedo" class="headerlink" title="Tagxedo"></a><a href="http://www.tagxedo.com/" target="_blank" rel="external">Tagxedo</a></h1><p><img src="Tagxedo.jpg" alt=""><br>Tagxedo将著名的演讲、新闻、口号、主题，甚至情书变成令人震撼的文字云。文字各自的大小恰好突出其在正文中出现的频率。</p>
<h1 id="TagCrowd"><a href="#TagCrowd" class="headerlink" title="TagCrowd"></a><a href="http://tagcrowd.com/" target="_blank" rel="external">TagCrowd</a></h1><p><img src="TagCrowd.jpg" alt=""><br>TagCrowd是一个通过创建词云来可视化词频的Web应用程序。它专注于使词云易于阅读，分析和比较。</p>
<p><a href="http://www.smashingapps.com/2011/12/15/nine-excellent-yet-free-online-word-cloud-generators.html" target="_blank" rel="external">Source: smashingapps</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux安装gcc-6.1.0]]></title>
      <url>http://HawkAaron.github.io/2016/08/07/Linux%E5%AE%89%E8%A3%85gcc-6.1.0/</url>
      <content type="html"><![CDATA[<h1 id="获取gcc源码包"><a href="#获取gcc源码包" class="headerlink" title="获取gcc源码包"></a>获取gcc源码包</h1><p><a href="https://ftp.gnu.org/gnu/gcc" target="_blank" rel="external">gcc各版本地址：https://ftp.gnu.org/gnu/gcc</a><br><a href="https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2" target="_blank" rel="external">目前最新的是6.1.0版：https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># wget https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2</span></div><div class="line"><span class="comment"># tar -jxvf gcc-6.1.0.tar.bz2</span></div></pre></td></tr></table></figure></p>
<h1 id="下载依赖项"><a href="#下载依赖项" class="headerlink" title="下载依赖项"></a>下载依赖项</h1><p>执行<code>download_prerequisites</code>将会自动下载这些软件并解压到当前目录，生成gcc编译的make文件。自动安装gcc需要下载诸如gmp、mpfr、mpc等依赖文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd gcc-6.1.0</span></div><div class="line"><span class="comment"># ./contrib/download_prerequisites</span></div></pre></td></tr></table></figure></p>
<p>如果你的Linux无法直接联网，那么你只能打开文件download_prerequisites，获取到这些文件的下载链接，然后通过其他上网设备下载这些软件。最后把这些软件直接解压到gcc源程序目录(/路径/6.1.0)下即可。</p>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir gcc-build</span></div><div class="line"><span class="comment"># cd gcc-build</span></div><div class="line"><span class="comment"># ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib</span></div><div class="line"><span class="comment"># make</span></div><div class="line"><span class="comment"># make install</span></div></pre></td></tr></table></figure>
<p>注意<code>make</code>的<code>-j</code>选项可以指定同时运行的作业数量，即CPU核数，如果有4核则可以加上<code>-j4</code><br><a id="more"></a></p>
<h1 id="出错解决"><a href="#出错解决" class="headerlink" title="出错解决"></a>出错解决</h1><ol>
<li>make过程中可能会出现以下错误信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> build/genattrtab ../.././gcc/config/i386/i386.md insn-conditions.md \</div><div class="line">  -Atmp-attrtab.c -Dtmp-dfatab.c -Ltmp-latencytab.c</div><div class="line">make[3]: *** [s-attrtab] Killed</div><div class="line">make[3]: Leaving directory `/usr/src/gcc-4.9.2/host-x86_64-unknown-linux-gnu/gcc&apos;</div><div class="line">make[2]: *** [all-stage1-gcc] Error 2</div><div class="line">make[2]: Leaving directory `/usr/src/gcc-4.9.2&apos;</div><div class="line">make[1]: *** [stage1-bubble] Error 2</div><div class="line">make[1]: Leaving directory `/usr/src/gcc-4.9.2&apos;</div><div class="line">make: *** [all] Error 2</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以通过添加swap分区的方法解决：<br><a href="http://blog.csdn.net/qq_20480611/article/details/52144399" target="_blank" rel="external">http://blog.csdn.net/qq_20480611/article/details/52144399</a></p>
<ol>
<li>动态库<strong>libstdc++.so.6</strong>版本不匹配<br>可以正常编译程序，但是运行时出现以下问题：<br><a href="http://stackoverflow.com/questions/5216399/usr-lib-libstdc-so-6-version-glibcxx-3-4-15-not-found" target="_blank" rel="external"><strong>/usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.15’ not found</strong></a><br>添加<strong>LD_LIBRARY_PATH</strong>环境变量即可解决：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim ~/.bash_profile</span></div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib:/usr/lib:/usr/<span class="built_in">local</span>/lib64:/usr/lib64</div><div class="line"><span class="comment"># source ~/.bash_profile</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="GCC新特征"><a href="#GCC新特征" class="headerlink" title="GCC新特征"></a>GCC新特征</h1><p>GCC 6.1 发布了，该版本较之前GCC5 新怎了大量的功能特性，默认采用C++14为新的标准，替代了之前的C++98。OpenMP 4.5规范将在本版本中被支持。此外，GCC 6.1 增强了对 C++17 的试验性支持；大大改进了诊断特性，包括位置，位置范围，拼写错误标识符建议，选项名字等等改进；新增了修复提示和一些警告提示。改进记录如下：</p>
<ul>
<li><p>UndefinedBehaviorSanitizer gained a new sanitization option, -fsanitize=bounds-strict, which enables strict checking of array bounds.  In particular, it enables -fsanitize=bounds as well as instrumentation of flexible array member-like arrays.</p>
</li>
<li><p>Type-based alias analysis now disambiguates accesses to different pointers. This improves precision of the alias oracle by about 20-30% on higher-level C++ programs. Programs doing invalid type punning of pointer types may now need -fno-strict-aliasing to work correctly.</p>
</li>
<li><p>Alias analysis now correctly supports weakref and alias attributes. This makes it possible to access both a variable and its alias in one translation unit which is common with link-time optimization.</p>
</li>
<li><p>Value range propagation now assumes that the this pointer of C++ member functions is non-null.  This eliminates common null pointer checks but also breaks some non-conforming code-bases (such as Qt-5, Chromium, KDevelop). As a temporary work-around-fno-delete-null-pointer-checks can be used. Wrong code can be identified by using-fsanitize=undefined.</p>
</li>
</ul>
<p>完整发布说明，可以在<a href="https://gcc.gnu.org/gcc-6/changes.html" target="_blank" rel="external">这里</a>查看。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/tangyi2008/article/details/42100049" target="_blank" rel="external">CentOS下安装gcc-4.9.2</a><br><a href="http://www.cnblogs.com/destim/p/5643574.html" target="_blank" rel="external">centos6.5安装gcc6.1等c++环境</a><br><a href="https://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.how_to_set_paths" target="_blank" rel="external">https://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.how_to_set_paths</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux添加swap分区]]></title>
      <url>http://HawkAaron.github.io/2016/08/07/Linux%E6%B7%BB%E5%8A%A0swap%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p>根据Redhat公司的建议,Linux系统swap分区最适合的大小是物理内存的1-2倍.不过Linux上有些软件对swap分区得需求较大,例如要顺利执行Oracle数据库软件,swap分区至少需要400MB或者物理内存2倍以上的空间.当然我们在安装Linux的时候,就能直接讲swap分区设置到足够的大小,但如果已经安装好Linux了,之后又想再安装类似Oracle的软件,却发现swap分区空间不够,该如何处理?</p>
<p>针对此种情况,有两种解决方法:一是创建新的swap分区;另一则是创建swap文件.</p>
<p><a href="http://blog.csdn.net/qq_20480611/article/details/50234945" target="_blank" rel="external"><strong>点此查看如何创建新分区</strong></a></p>
<p>下面介绍创建swap文件的过程：<br>如果你的硬盘空间已经全部分配给其他分区,也没有多余的预算新添购硬盘,我们可以利用swap文件的方式增加虚拟的swap空间,不过执行性能会较实际的swap分区差.<a id="more"></a></p>
<h1 id="产生swap文件"><a href="#产生swap文件" class="headerlink" title="产生swap文件"></a>产生swap文件</h1><p>执行<strong>dd</strong>命令新增一个1G的swap文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dd if=/dev/zero of=/opt/swapfile bs=1M count=1000</span></div></pre></td></tr></table></figure></p>
<p>更多关于<strong>dd</strong>命令的解释请参考man手册<code>man dd</code></p>
<h1 id="格式化swap文件"><a href="#格式化swap文件" class="headerlink" title="格式化swap文件"></a>格式化swap文件</h1><p>接下来执行<strong>mkswap</strong>命令,将myswap文件格式化成swap文件系统：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkswap /tmp/myswap</span></div></pre></td></tr></table></figure></p>
<h1 id="使能swap文件"><a href="#使能swap文件" class="headerlink" title="使能swap文件"></a>使能swap文件</h1><p>执行<strong>swapon</strong>命令可以使能myswap文件为swap分区，对应的执行<strong>swapoff</strong>命令可以关闭这种效果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># swapon /tmp/myswap</span></div></pre></td></tr></table></figure></p>
<p>此时可以通过 <code>free -h</code> 查看内存使用情况及swap分区</p>
<h1 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h1><p>编辑<code>/etc/fstab</code>文件，添加开机使能swap文件项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /tmp/myswap</span></div><div class="line">/tmp/myswap swap swap defaults 0 0 <span class="comment"># 待添加的行</span></div></pre></td></tr></table></figure></p>
<p>最后执行以下命令自动挂载所有在fstab中的文件系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mount -a</span></div></pre></td></tr></table></figure></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/tangyi2008/article/details/42099427" target="_blank" rel="external">LINUX下手动添加swap分区</a><br><a href="http://blog.163.com/zhang_jinnan/blog/static/4656383220101258831514/" target="_blank" rel="external">linux的中swap分区的创建</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deep Learning Libraries by Language]]></title>
      <url>http://HawkAaron.github.io/2016/08/07/Deep-Learning-Libraries-by-Language/</url>
      <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ol>
<li><p><a href="http://deeplearning.net/software/theano" target="_blank" rel="external">Theano</a> is a python library for defining and evaluating mathematical expressions with numerical arrays. It makes it easy to write deep learning algorithms in python. On the top of the Theano many more libraries are built.</p>
<ol>
<li><p><a href="http://keras.io/" target="_blank" rel="external">Keras</a> is a minimalist, highly modular neural network library in the spirit of Torch, written in Python, that uses Theano under the hood for optimized tensor manipulation on GPU and CPU.</p>
</li>
<li><p><a href="http://deeplearning.net/software/pylearn2/" target="_blank" rel="external">Pylearn2</a> is a library that wraps a lot of models and training algorithms such as Stochastic Gradient Descent that are commonly used in Deep Learning. Its functional libraries are built on top of Theano.</p>
</li>
<li><p><a href="https://github.com/Lasagne/Lasagne" target="_blank" rel="external">Lasagne</a> is a lightweight library to build and train neural networks in Theano. It is governed by simplicity, transparency, modularity, pragmatism , focus and restraint principles.</p>
</li>
<li><p><a href="https://github.com/mila-udem/blocks" target="_blank" rel="external">Blocks</a> a framework that helps you build neural network models on top of Theano.<a id="more"></a></p>
</li>
</ol>
</li>
<li><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">Caffe</a> is a deep learning framework made with expression, speed, and modularity in mind. It is developed by the Berkeley Vision and Learning Center (BVLC) and by community contributors. Google’s <a href="http://venturebeat.com/2015/07/01/google-open-sources-its-software-for-making-trippy-images-with-deep-learning/" target="_blank" rel="external">DeepDream</a> is based on Caffe Framework. This framework is a BSD-licensed C++ library with Python Interface.</p>
</li>
<li><p><a href="https://github.com/dnouri/nolearn" target="_blank" rel="external">nolearn</a> contains a number of wrappers and abstractions around existing neural network libraries, most notably <a href="http://lasagne.readthedocs.org/" target="_blank" rel="external">Lasagne</a>, along with a few machine learning utility modules.</p>
</li>
<li><p><a href="http://radimrehurek.com/gensim/" target="_blank" rel="external">Gensim</a> is deep learning toolkit implemented in python programming language intended for handling large text collections, using efficient algorithms.</p>
</li>
<li><p><a href="http://chainer.org/" target="_blank" rel="external">Chainer</a> bridge the gap between algorithms and implementations of deep learning. Its powerful, flexible and intuitive and is considered as the <a href="http://www.slideshare.net/beam2d/introduction-to-chainer-a-flexible-framework-for-deep-learning" target="_blank" rel="external">flexible framework</a> for Deep Learning.</p>
</li>
<li><p><a href="https://github.com/nitishsrivastava/deepnet" target="_blank" rel="external">deepnet</a> is a GPU-based python implementation of deep learning algorithms like Feed-forward Neural Nets, Restricted Boltzmann Machines, Deep Belief Nets, Autoencoders, Deep Boltzmann Machines and Convolutional Neural Nets.</p>
</li>
<li><p><a href="https://github.com/hannes-brt/hebel" target="_blank" rel="external">Hebel</a> is a library for deep learning with neural networks in Python using GPU acceleration with CUDA through PyCUDA. It implements the most important types of neural network models and offers a variety of different activation functions and training methods such as momentum, Nesterov momentum, dropout, and early stopping.</p>
</li>
<li><p><a href="https://github.com/dmlc/cxxnet" target="_blank" rel="external">CXXNET</a> is fast, concise, distributed deep learning framework based on MShadow. It is a lightweight and easy extensible C++/CUDA neural network toolkit with friendly Python/Matlab interface for training and prediction.</p>
</li>
<li><p><a href="https://github.com/andersbll/deeppy" target="_blank" rel="external">DeepPy</a> is a Pythonic deep learning framework built on top of NumPy.</p>
</li>
<li><p><a href="https://github.com/vishwa-raman/DeepLearning" target="_blank" rel="external">DeepLearning</a> is deep learning library, developed with C++ and python.</p>
</li>
<li><p><a href="https://github.com/NervanaSystems/neon" target="_blank" rel="external">Neon</a> is Nervana’s Python based Deep Learning framework.</p>
</li>
</ol>
<h1 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h1><ol>
<li><p><a href="https://github.com/sdemyanov/ConvNet" target="_blank" rel="external">ConvNet</a> Convolutional neural net is a type of deep learning classification algorithms, that can learn useful features from raw data by themselves and is performed by tuning its weighs.</p>
</li>
<li><p><a href="https://github.com/rasmusbergpalm/DeepLearnToolbox" target="_blank" rel="external">DeepLearnToolBox</a> is a matlab/octave toolbox for deep learning and includes Deep Belief Nets, Stacked Autoencoders, convolutional neural nets.</p>
</li>
<li><p><a href="https://code.google.com/p/cuda-convnet/" target="_blank" rel="external">cuda-convnet</a> is a fast C++/CUDA implementation of convolutional (or more generally, feed-forward) neural networks. It can model arbitrary layer connectivity and network depth. Any directed acyclic graph of layers will do. Training is done using the backpropagation algorithm.</p>
</li>
<li><p><a href="http://www.vlfeat.org/matconvnet/" target="_blank" rel="external">MatConvNet</a>  is a MATLAB toolbox implementing Convolutional Neural Networks (CNNs) for computer vision applications. It is simple, efficient, and can run and learn state-of-the-art CNNs</p>
</li>
</ol>
<h1 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h1><ol>
<li><p><a href="http://eblearn.sourceforge.net/index.shtml" target="_blank" rel="external">eblearn</a> is an open-source C++ library of machine learning by New York University’s machine learning lab, led by Yann LeCun. In particular, implementations of convolutional neural networks with energy-based models along with a GUI, demos and tutorials.</p>
</li>
<li><p><a href="http://www.comp.nus.edu.sg/~dbsystem/singa/" target="_blank" rel="external">SINGA</a> is designed to be general to implement the distributed training algorithms of existing systems. It is supported by Apache Software Foundation.</p>
</li>
<li><p><a href="https://developer.nvidia.com/digits" target="_blank" rel="external">NVIDIA DIGITS</a> is a new system for developing, training and visualizing deep neural networks. It puts the power of deep learning into an intuitive browser-based interface, so that data scientists and researchers can quickly design the best DNN for their data using real-time network behavior visualization.</p>
</li>
<li><p><a href="https://01.org/intel-deep-learning-framework" target="_blank" rel="external">Intel® Deep Learning Framework</a> provides a unified framework for Intel® platforms accelerating Deep Convolutional Neural Networks.</p>
</li>
</ol>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol>
<li><p><a href="http://nd4j.org/" target="_blank" rel="external">N-Dimensional Arrays for Java (ND4J)</a> is scientific computing libraries for the JVM. They are meant to be used in production environments, which means routines are designed to run fast with minimum RAM requirements.</p>
</li>
<li><p><a href="http://deeplearning4j.org/" target="_blank" rel="external">Deeplearning4j</a> is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. It is designed to be used in business environments, rather than as a research tool.</p>
</li>
<li><p><a href="http://www.heatonresearch.com/encog" target="_blank" rel="external">Encog</a> is an advanced machine learning framework which supports Support Vector Machines,Artificial Neural Networks, Genetic Programming, Bayesian Networks, Hidden Markov Models, Genetic Programming and Genetic Algorithms are supported.</p>
</li>
</ol>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol>
<li><a href="http://cs.stanford.edu/people/karpathy/convnetjs/" target="_blank" rel="external">Convnet.js</a> is a Javascript library for training Deep Learning models (mainly Neural Networks) entirely in a browser. No software requirements, no compilers, no installations, no GPUs, no sweat.</li>
</ol>
<h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><ol>
<li><a href="http://torch.ch/" target="_blank" rel="external">Torch</a> is a scientific computing framework with wide support for machine learning algorithms. It is easy to use and efficient, fast scripting language, LuaJIT, and an underlying C/CUDA implementation. Torch is based on Lua programming language.</li>
</ol>
<h1 id="Julia"><a href="#Julia" class="headerlink" title="Julia"></a>Julia</h1><ol>
<li><a href="https://github.com/pluskid/Mocha.jl" target="_blank" rel="external">Mocha</a> is a Deep Learning framework for Julia, inspired by the C++ framework Caffe. Efficient implementations of general stochastic gradient solvers and common layers in Mocha could be used to train deep / shallow (convolutional) neural networks, with (optional) unsupervised pre-training via (stacked) auto-encoders. Its best feature include Modular architecture, High-level Interface, portability with speed, compatibility and many more.</li>
</ol>
<h1 id="Lisp"><a href="#Lisp" class="headerlink" title="Lisp"></a>Lisp</h1><ol>
<li><a href="http://lush.sourceforge.net/" target="_blank" rel="external">Lush(Lisp Universal Shell)</a> is an object-oriented programming language designed for researchers, experimenters, and engineers interested in large-scale numerical and graphic applications. It comes with rich set of deep learning libraries as a part of machine learning libraries.</li>
</ol>
<h1 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h1><ol>
<li><a href="https://github.com/ajtulloch/dnngraph" target="_blank" rel="external">DNNGraph</a> is a deep neural network model generation DSL in Haskell.</li>
</ol>
<h1 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h1><ol>
<li><a href="http://accord-framework.net/" target="_blank" rel="external">Accord.NET</a> is a .NET machine learning framework combined with audio and image processing libraries completely written in C#. It is a complete framework for building production-grade computer vision, computer audition, signal processing and statistics applications.</li>
</ol>
<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><ol>
<li><p><a href="http://cran.um.ac.ir/web/packages/darch/index.html" target="_blank" rel="external">darch</a> package can be used for generating neural networks with many layers (deep architectures). Training methods includes a pre training with the contrastive divergence method and a fine tuning with common known training algorithms like backpropagation or conjugate gradient.</p>
</li>
<li><p><a href="https://cran.r-project.org/web/packages/deepnet/index.html" target="_blank" rel="external">deepnet</a> implements some deep learning architectures and neural network algorithms, including BP,RBM,DBN,Deep autoencoder and so on.</p>
</li>
</ol>
<p><a href="http://www.teglor.com/b/deep-learning-libraries-language-cm569/" target="_blank" rel="external">Source: http://www.teglor.com/b/deep-learning-libraries-language-cm569/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数学在计算机图形学中的应用]]></title>
      <url>http://HawkAaron.github.io/2016/08/06/%E6%95%B0%E5%AD%A6%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>“学习计算机图形学需要多少的数学？”</strong> 这是初学者最经常问的问题。狭义的计算机图形学指的是传统的三维建模，绘制，动画等，而广义的计算机图形学还包括计算机图像处理，视频处理，计算机视觉和机器学习等领域。</p>
<p>答案取决于你<strong>想在计算机图形学领域钻研多深：</strong></p>
<p>1、如果仅仅使用周围唾手可得的图形软件，如 Photoshop, 3D Studio Max, Maya, AutoCAD 等，你不需要知道多少数学知识；通过掌握简单的概念和阅读使用教程你就能使用这些软件的基本功能；但是如果你想精通这些软件，你还是需要学习计算机图形学的一些入门知识的；</p>
<p>2、如果想学习计算机图形学的入门知识，你至少需要掌握代数，三角学和线性代数的一些基本知识；这也是要成为图形软件高手所必需掌握的；</p>
<p>3、如果想成为一名计算机图形学的研究工作者，那么对数学的学习将是 “活到老，学到老”。重要的是，从以前看似枯燥的数学到看到它的实际应用的过程中，你会更容易享受数学的美妙。在你不断进行计算机图形学的研究的过程中，你会感觉到你的数学知识越来越不够用，从而真正理解 “数学不是没有用，而是不够用！”。<a id="more"></a></p>
<p>如果你并不特别喜欢数学，是否仍有在计算机图形学领域工作的机会？是的，计算机图形学的确有一些方面不需要考虑太多的数学问题。你不应该因为数学成绩不好而放弃它，如果你对计算机图形学具有强烈兴趣和好奇心的话，而且你还特别喜欢和擅长计算机编程的话。不过，如果学习了更多的数学知识，那么你将在研究课题上有更多的选择余地。如果你要做很好的计算机图形学的研究工作，则建议你还是多学习些数学。</p>
<p>对于在计算机图形学中哪些数学才是重要的？这个问题是没有明确的答案的。这领域里不同的方面要求掌握不同的数学知识，也许兴趣将会决定了你的方向。那些基本的数学知识和分析能力是最重要的，而其他的数学则是根据你所从事的方向相关。</p>
<p>下面将介绍我们认为对于计算机图形学有用的数学。别以为想成为一名计算机图形学的研究者就必须精通各门数学！在大学里，你所学的那些数学看起来都很抽象，枯燥无味，这是因为你并不知道它们的用处，甚至连讲课的老师也不知道，而你们的目的只是记住那些定理和公式，考个好分数。与大学学习数学不一样的是，你在计算机图形学的学习和研究过程中会感受到数学的用处和美妙，这时你学习数学的目的将更加明确，兴趣将更加浓厚，学习方法将更加有效。因为你是<strong>在使用数学的过程中在学习数学！</strong>想想看你是如何学会中文说话的？为了对用于计算机图形学的数学有一个全面的看法，这里特地列出了很多方面。注意，不是这里提到的每个方面你都必须熟悉，许多研究工作者从不需要考虑下面提到的某些数学知识，成功的研究者总是将某一方面的数学知识和数学工具用到极致！</p>
<p>最后，虽然读了这篇文章后，你应该会对数学在计算机图形学中的应用有所了解，不过这也是一家之言。也许你应该阅读更多的此类文章，或者至少从其他从事计算机图形学工作的人那里了解不同的学习重点。</p>
<h1 id="初等代数和三角学"><a href="#初等代数和三角学" class="headerlink" title="初等代数和三角学"></a><strong>初等代数和三角学</strong></h1><p>对于计算机图形学的初学者来说，高中的代数和三角学可能是最重要的数学。日复一日，我从简单的方程解出一个或更多的根。我时常还要解决类似求一些几何图形边长的简单三角学问题。代数和三角学是计算机图形学的最基础的知识。</p>
<p>那么高中的几何学怎么样呢？可能让人惊讶，不过在多数计算机图形学里，高中的几何学并不经常被用到。原因是许多学校教的几何学实际上是如何建立数学证明的课程。虽然证明题对提高智力显然是有效的，但对于计算机图形学来说，那些与几何课有关的定理和证明并不常被用到。如果你毕业于数学相关领域（包括计算机图形学），就会发现虽然你在证明定理，不过这对开始学习图形学不是必要的。</p>
<p>如果精通代数和三角学，就可以开始读一本计算机图形学的入门书了。下一个重要的用于计算机图形学的数学——线性代数，多数此类书籍至少包含了一个对线性代数的简要介绍。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Computer Graphics:  Principles and Practice<br>James Foley, Andries  van Dam, Steven Feiner, John Hughes<br>Addison-Wesley</p>
</blockquote>
<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a><strong>线性代数</strong></h1><p>线性代数的思想贯穿于计算机图形学。事实上，只要牵涉到几何数值表示法，就常常抽象出例如 x,y,z 坐标之类的数值，我们称之为矢量。计算机图形学自始至终离不开矢量和矩阵。用矢量和矩阵来描述旋转，平移，或者缩放是再好不过了。高中和大学都有线性代数的课程。只要想在计算机图形学领域工作，就应该打下坚实的线性代数基础。我刚才提到，许多图形学的书都有关于线性代数的简要介绍——足够教给你图形学的第一门课。</p>
<h1 id="数学分析（微积分学）"><a href="#数学分析（微积分学）" class="headerlink" title="数学分析（微积分学）"></a><strong>数学分析（微积分学）</strong></h1><p>微积分学是高级计算机图形学的重要成分。如果打算学习研究图形学，我强烈建议你应该对微积分学有初步认识。理由不仅仅是微积分学是一种很有用的工具，还有许多研究者用微积分学的术语来描述他们的问题和解决办法。另外，在许多重要的数学领域，微积分学被作为进一步学习的前提。学习了基本代数之后，微积分学又是一种能为你打开多数计算机图形学与后继的数学学习之门的课程。</p>
<h1 id="微分几何"><a href="#微分几何" class="headerlink" title="微分几何"></a><strong>微分几何</strong></h1><p>微分几何学研究描述和控制光滑曲线，曲面的方程。如果你要计算出经过某个远离曲面的点并垂直于曲面的矢量（法向矢量）就会用到微分几何学。让一辆汽车以特定速度在曲线上行驶也牵涉到微分几何学。有一种通用的绘制光滑曲面的图形学技术，叫做 “凹凸帖图”，这个技术用到了微分几何学。另外，要研究曲面的一些几何性质，如曲率、可展性、测地性质等，需要较多的微分几何知识。如果要着手于用曲线和曲面来创造形体（在图形学里称之为建模），你至少应该学习微分几何学的基础。</p>
<h1 id="数值方法（计算方法）"><a href="#数值方法（计算方法）" class="headerlink" title="数值方法（计算方法）"></a><strong>数值方法（计算方法）</strong></h1><p>几乎任何时候，我们在计算机里用近似值代替精确值来表示和操作数值，所以计算过程总是会有误差。而且对于给定的数值问题，常常有多种解决的方法，一些方法会更块，更精确或者对内存的需求更少。数值方法研究的对象包括 “计算方法” 和 “科学计算” 等等。这是一个很广阔的领域，而且我将提及的其他几门数学其实是数值方法的一些分支。这些分支包括抽样法理论，矩阵方程组，数值微分方程组和最优化。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Numerical Recipes in  C++: The Art of Scientific Computing<br>William Press, Saul  Teukolsky, William Vetterling and Brian Flannery<br>Cambridge University  Press</p>
</blockquote>
<h1 id="抽样法理论和信号处理"><a href="#抽样法理论和信号处理" class="headerlink" title="抽样法理论和信号处理"></a><strong>抽样法理论和信号处理</strong></h1><p>在计算机图形学里我们反复使用储存在正规二维数组里的数字集合来表示一些对象，例如图片和曲面。这时，我们就要用抽样法来表示这些对象。如果要控制这些对象的品质，抽样法理论就变得尤为重要。抽样法应用于图形学的常见例子是当物体被绘制在屏幕上时，它的轮廓呈现锯齿状的边缘。这锯齿状的边缘（被认为是 “混淆” 现象）是非常让人分散注意力的，用抽样法中著名的技术例如回旋，傅立叶变换，空间和频率的函数表示就能把这个现象减少到最小。这些思想在图像和音频处理领域是同样重要的。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>The Fourier Transform  and Its Applications<br>Ronald N.  Bracewell<br>McGraw Hill</p>
</blockquote>
<h1 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a><strong>矩阵计算</strong></h1><p>计算机图形学的许多问题要用到矩阵方程组的数值解法。一些涉及矩阵的问题包括：找出最好的位置与方向以使对象们互相匹配（最小二乘法），创建一个覆盖所给点集的曲面，并使皱折程度最小（薄板样条算法），还有材质模拟，例如水和衣服等。在图形学里矩阵表述相当流行，因此在用于图形学的数学中我对矩阵方程组的评价是很高的。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Matrix  Computations<br>Gene Golub and Charles  Van Loan<br>Johns Hopkins  University Press</p>
</blockquote>
<h1 id="物理学（物理模拟）"><a href="#物理学（物理模拟）" class="headerlink" title="物理学（物理模拟）"></a><strong>物理学（物理模拟）</strong></h1><p>物理学显然不是数学的分支，它是自成一家的学科。但是在计算机图形学的某些领域，物理学和数学是紧密联系的。在图形学里，牵涉物理学的问题包括光与物体的表面是怎样互相影响的，人与动物的移动方式，水与空气的流动。为了模拟这些自然现象，物理学的知识是必不可少的。这和解微分方程紧密联系，我将会在下一节提到微分方程。</p>
<h1 id="微分方程的数值解法（有限元方法）"><a href="#微分方程的数值解法（有限元方法）" class="headerlink" title="微分方程的数值解法（有限元方法）"></a><strong>微分方程的数值解法（有限元方法）</strong></h1><p>我相信对于计算机图形学来说，解微分方程的技巧是非常重要的。像我们刚才讨论的，计算机图形学致力于模拟源于真实世界的物理系统。波浪是怎样在水里形成的，动物是怎样在地面上行走的，这就是两个模拟物理系统的例子。模拟物理系统的问题经常就是怎样解微分方程的数值解。请注意，微分方程的数值解法与微分方程的符号解法是有很大差异的。符号解法求出没有误差的解，而且时常只用于一些非常简单的方程。有时大学课程里的 “微分方程” 只教符号解法，不过这并不会对多数计算机图形学的问题有帮助。</p>
<p>在对物理系统的模拟中，我们把世界细分为许多表示成矢量的小元素。然后这些元素之间的关系就可以用矩阵来描述。虽然要处理的矩阵方程组往往没有很精确的解，但是取而代之的是执行了一系列的计算，这些计算产生一个表示成数列的近似解。这就是微分方程的数值解法。请注意，矩阵方程的解法与微分方程数值解法的关系是很密切的。</p>
<h1 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a><strong>最优化</strong></h1><p>在计算机图形学里，我们常常为了期望的目标寻求一种合适的描述对象或者对象集的方法。例如安排灯的位置使得房间的照明看起来有种特殊的 “感觉”，动画里的人物要怎样活动四肢才能实现一个特殊的动作，怎样排版才不会使页面混乱。以上这些例子可以归结为最优化问题。十年前的计算机图形学几乎没有最优化技术的文献，不过最近这个领域越来越重视最优化理论。我认为在计算机图形学里，最优化的重要性将会日益增加。</p>
<h1 id="概率论与统计学"><a href="#概率论与统计学" class="headerlink" title="概率论与统计学"></a><strong>概率论与统计学</strong></h1><p>计算机图形学的许多领域都要用到概率论与统计学。当研究者涉足人类学科时，他们当然需要统计学来分析数据。图形学相关领域涉及人类学科，例如虚拟现实和人机交互 (HCI)。另外，许多用计算机描绘真实世界的问题牵涉到各种未知事件的概率。两个例子：一棵成长期的树, 它的树枝分杈的概率；虚拟的动物如何决定它的行走路线。最后，一些解高难度方程组的技巧用了随机数来估计方程组的解。重要的例子：蒙特卡罗方法经常用于光如何传播的问题。以上仅是一部分在计算机图形学里使用概率论和统计学的方法。</p>
<p>另外，在机器学习和统计学习中，需要非常多和深入的统计学知识。</p>
<h1 id="拓扑学"><a href="#拓扑学" class="headerlink" title="拓扑学"></a><strong>拓扑学</strong></h1><p>用一句话来形容拓扑学，它研究油炸圈饼与咖啡杯为什么在本质上是相同的。答案是他们都是只有一个洞的曲面。对于计算机图形学来说，拓扑学的形式（符号表示法）是表达思想的简便方法，常用于分析一些曲面的性质，在形状分析、形状匹配和搜索中得到应用。</p>
<h1 id="黎曼几何"><a href="#黎曼几何" class="headerlink" title="黎曼几何"></a><strong>黎曼几何</strong></h1><p>黎曼几何是研究流形曲面上的微积分与微分几何。不同与三维欧氏空间，它研究的曲面是在流形曲面上，其中用到不同的度量。这部分数学知识有点抽象，但是同样有效地被用到计算机图形学中。如共形几何理论就被发展起来在计算机图形学中得到广泛的应用。</p>
<h1 id="抽象代数"><a href="#抽象代数" class="headerlink" title="抽象代数"></a><strong>抽象代数</strong></h1><p>抽象代数就是研究群论，环论和域的代数学。相对于线性代数，内容也比较抽象。在计算机图形学上也时有用到。</p>
<h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a><strong>计算几何</strong></h1><p>计算几何学研究如何用计算机高效地表示与操作几何体。典型问题如，碰撞检测，把多边形分解为三角形，找出最靠近某个位置的点，这个学科包括了运算法则，数据结构和数学。图形学的研究者，只要涉足创建形体（建模），就要大量用到计算几何学。</p>
<p>推荐的参考书:</p>
<blockquote>
<p>Computational Geometry in C<br>Joseph O’Rourke<br>Cambridge University Press<br>Computational Geometry:  An Introduction<br>Franco Preparata  and Michael Shamos<br>Springer-Verlag </p>
</blockquote>
<h1 id="其他几何学"><a href="#其他几何学" class="headerlink" title="其他几何学"></a><strong>其他几何学</strong></h1><p>一些其他的几何学，如《仿射几何》、《射影几何》在计算机图形学的某些问题上用得比较多，对工程具有较大的促进应用。</p>
<h1 id="总结：数学应用和数学理论"><a href="#总结：数学应用和数学理论" class="headerlink" title="总结：数学应用和数学理论"></a><strong>总结：数学应用和数学理论</strong></h1><p>对于图形学来说，以上提到的许多数学学科都有个共同点：比起这些数学的理论价值，<strong>我们更倾向于发掘它们的应用价值。</strong>不要惊讶。计算机图形学的许多问题和物理学者与工程师们研究的问题是紧密联系的，并且物理学者与工程师们使用的数学工具正是计算机图形学研究者们使用的。多数研究纯数学理论的学科从不被用于计算机图形学。不过这不是绝对的。请注意这些特例：分子生物学正利用节理论来研究 DNA 分子动力学，亚原子物理学用到了抽象群论。也许有一天，纯数学理论也能推动计算机图形学的发展，谁知道呢？</p>
<p>事实上，文章中所提到一些数学分支，按照我国的教育体制，在数学系本科的学生（或者硕士研究生阶段的理工科学生）基本都能接触到。但是大学所学习的数学比较偏重于证明以构建完备的数学理论框架，而不太注重实际的使用，现在的大学教师授课的方式也是这样。</p>
<p>我认为，学习数学最好的方式就是使用它，使用它越多，你就觉得它越有用，越有趣，学得就越好，也越快，越扎实。当然，很少有人能精通全部的知识，对于计算机图形学的学习和实践，应当采取掌握较为宽广的数学知识基础，在需要的时候，对相关的数学知识再进行深入的学习和挖掘；不要因为自身数学知识的匮乏而沮丧，更不能因此而敌视数学，保持对计算机图形学强烈的兴趣和乐观上进的学习态度是学习计算机图形学的关键。</p>
<p>还有一点需要指出的是，在学习计算机图形学的过程中，你会发现各个方面的数学知识都会被用到，因此你掌握的数学知识会比较全面，也知道如何在实际中应用。这可能是应用数学在所有学科得到最好的体现。相反，一些做纯理论的数学工作者，掌握的数学知识就是他们所研究的一块，而对其他的数学知识掌握得就不够好，他们做得比较深入。当然，做应用数学和理论数学都有值得敬仰的地方，一个侧重在实际应用，而另一个侧重在理论深度，但要做好都不是很容易。数学说到底还是要学老用的。相对来讲，做计算机图形学能看到学到的数学在实际中所用了，<strong>“所用即所学”</strong>。试想一下，当你能看到自己做的美妙的东西被别人看到且被敬仰的时候，你的成就感一定会很大！</p>
<p>最后说一点的就是，学习计算机图形学和从事计算机图形学的研究，除了数学基础外，还需要较强的计算机编程能力，你务必要掌握和熟练一门编程语言，一般建议 C/C++，因为你要实现出你的想法，你必须编程去实现出来，做出漂亮的结果。编程也是很有趣的，只要你有兴趣，提高是非常快的！当然，这里我不阐述如何提高编程的能力和水平的方法。<strong>“数学” 和 “编程”，两手都要抓，两手都要硬！</strong>提醒大家一点的是，如果你对编程兴趣不大，或者就不愿编程，那你就不适合选择计算机图形学，可能更适合选择其他方向，比如统计学或理论数学。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前K个最频繁的元素]]></title>
      <url>http://HawkAaron.github.io/2016/08/05/%E5%89%8DK%E4%B8%AA%E6%9C%80%E9%A2%91%E7%B9%81%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a non-empty array of integers, return the <strong><code>k</code></strong> most frequent elements.</p>
<p>For example,<br>Given <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.</p>
<p><strong>Note: </strong></p>
<ul>
<li>You may assume <code>k</code> is always valid, 1 ≤ k ≤ number of unique elements.</li>
<li>Your algorithm’s time complexity <strong>must be</strong> better than $O(n\log (n))$, where $n$ is the array’s size.</li>
</ul>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>题目要求我们输出前k个出现最频繁的元素，因为k最大可以等于n，所以在最坏情况下我们需要统计所有数字的出现次数。那么这个问题就分成了两个部分：</p>
<ol>
<li>统计所有不同的数字出现的次数</li>
<li>找出出现次数前k大的数字</li>
</ol>
<p>对于问题1，因为数字可能很大，我们需要借助HashMap进行统计，时间复杂度是O(n)的。对于问题2，有多种方法：一种简单的方法是，对所有的次数快速排序，然后输出前k个，这样的时间复杂度是O(n log n)，不符合本题的要求。我们需要进行优化。</p>
<p>因为最后只需要返回k个数字，所以我们只需要一直维护一个大小为k的小根堆。当新的数字出现的次数大于堆中最小的次数时，我们对堆进行更新。时间复杂度是O(n log k)，是符合题目要求的。</p>
<p>那有没有办法进一步优化呢？因为k最坏情况下还是等于n的，n log k不是很理想。那么我们就需要换一种排序的方法。有一种排序的方法，其复杂度只和需要排序的数字的大小有关，而在本题中，需要排序的数字大小至多为n（某个数出现了n次）。答案是桶排序！桶排序就是用一个数组bucket记录每个数字出现的次数，每次把数字丢到相应编号的桶中，然后从后往前穷举每一个桶，取出其中的元素直到取满k个。时间复杂度是O(n)。</p>
<p>最后本问题的最优算法的时间复杂度是O(n)。</p>
<h1 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topKFrequent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">if</span> (!nums.size()) <span class="keyword">return</span> res;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) cnt[num]++;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; bucket(nums.size() + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> kv : cnt) &#123;</div><div class="line">            bucket[kv.second].push_back(kv.first);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = bucket.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket[i].size(); ++j)&#123;</div><div class="line">                res.push_back(bucket[i][j]);</div><div class="line">                <span class="keyword">if</span> (res.size() == k) <span class="keyword">return</span> res;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h1><p><a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="external">LeetCode 347. Top K Frequent Elements</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google面试题 3| 矩阵中的最长上升路径]]></title>
      <url>http://HawkAaron.github.io/2016/08/04/Google%E9%9D%A2%E8%AF%95%E9%A2%983-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given an integer matrix, find the length of the longest increasing path.</p>
<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [9,9,4],</div><div class="line">  [6,6,8],</div><div class="line">  [2,1,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[1, 2, 6, 9]</code>.</p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nums = [</div><div class="line">  [3,4,5],</div><div class="line">  [3,2,6],</div><div class="line">  [2,2,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Return <code>4</code><br>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed. <a id="more"></a></p>
<h1 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a>分析解答</h1><p>通过记忆化搜索实现动态规划，记忆化搜索是搜索和动态规划的结合，在搜索过程中记录已经求解完毕的状态，使得每个状态只需进行一次搜索。在本题中，<code>cache[i][j]</code>记录在(i,j)位置可以得到的最长上升路径，其值通过搜索相邻四个位置的最大路径值确定</p>
<ol>
<li>对每个点<code>DFS</code>，在4个方向找比当前小的数</li>
<li>利用动态规划的思想得到每个点的路径最大值</li>
<li>用<code>cache</code>数组存放距离，以后不用重复计算</li>
</ol>
<h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>记忆化搜索<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; cache)</span> </span>&#123;</div><div class="line">        <span class="comment">// if calculated before, no need to do it again</span></div><div class="line">        <span class="keyword">if</span> (cache[x][y]) <span class="keyword">return</span> cache[x][y];</div><div class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> nx = x + dr[i];</div><div class="line">            <span class="keyword">int</span> ny = y + dc[i];</div><div class="line">            <span class="comment">// if out of bond OR current cell value larger than previous cell value.</span></div><div class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= matrix.size() || ny &lt; <span class="number">0</span> || ny &gt;= matrix[<span class="number">0</span>].size() ||</div><div class="line">                matrix[nx][ny] &gt;= matrix[x][y]) <span class="keyword">continue</span>;</div><div class="line">            res = max(res, dfs(matrix, nx, ny, cache) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[x][y] = res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix.empty() || matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> m = matrix.size(), n = matrix[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cache(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                cache[i][j] = dfs(matrix, i, j, cache);</div><div class="line">                res = max(res, cache[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="external">LeetCode 329. Longest Increasing Path in a Matrix</a><br><a href="https://discuss.leetcode.com/topic/34835/15ms-concise-java-solution" target="_blank" rel="external">15ms Concise Java Solution</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Increasing Subsequence]]></title>
      <url>http://HawkAaron.github.io/2016/08/03/Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,<br>Given <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br>The longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in $O(n^2)$ complexity.</p>
<p><strong>Follow up:</strong> Could you improve it to $O(n\log(n))$ time complexity?<a id="more"></a></p>
<h1 id="DP-solution-with-O-N-2-complexity"><a href="#DP-solution-with-O-N-2-complexity" class="headerlink" title="DP solution with O(N^2) complexity"></a>DP solution with O(N^2) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="comment">// This will be our array to track longest sequence length</span></div><div class="line">    <span class="keyword">int</span> dp[nums.size()];</div><div class="line"></div><div class="line">    <span class="comment">// Fill each position with value 1 in the array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        dp[i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Mark one pointer at i. For each i, start from j=0.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.size(); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">            <span class="comment">// It means next number contributes to increasing sequence.</span></div><div class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</div><div class="line">                <span class="comment">// But increase the value only if it results in a larger value of the sequence than dp[i]</span></div><div class="line">                <span class="comment">// It is possible that dp[i] already has larger value from some previous j'th iteration</span></div><div class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find the maximum length from the array that we just generated</span></div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)</div><div class="line">        res = max(res, dp[i]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-lines-C-code-with-O-NlogN-complexity"><a href="#9-lines-C-code-with-O-NlogN-complexity" class="headerlink" title="9 lines C++ code with O(NlogN) complexity"></a>9 lines C++ code with O(NlogN) complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</div><div class="line">        <span class="keyword">auto</span> it = lower_bound(res.begin(), res.end(), x);</div><div class="line">        <span class="keyword">if</span> (it == res.end()) res.push_back(x);</div><div class="line">        <span class="keyword">else</span> *it = x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="More-details"><a href="#More-details" class="headerlink" title="More details"></a>More details</h1><p><a href="https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/30721/my-easy-to-understand-o-n-2-solution-using-dp-with-video-explanation</a><br><a href="https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12" target="_blank" rel="external">https://discuss.leetcode.com/topic/28696/9-lines-c-code-with-o-nlogn-complexity/12</a><br><a href="http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/" target="_blank" rel="external">http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://HawkAaron.github.io/2016/08/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线段树]]></title>
      <url>http://HawkAaron.github.io/2016/08/01/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2 id="线段树的构造"><a href="#线段树的构造" class="headerlink" title="线段树的构造"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-build/" target="_blank" rel="external">线段树的构造</a></strong></h2><p>线段树是一棵二叉树，他的每个节点包含了两个额外的属性start和end用于表示该节点所代表的区间。start和end都是整数，并按照如下的方式赋值:</p>
<ul>
<li>根节点的 start 和 end 由 build 方法所给出。</li>
<li>对于节点 A 的左儿子，有 start=A.left, end=(A.left + A.right) / 2。</li>
<li>对于节点 A 的右儿子，有 start=(A.left + A.right) / 2 + 1, end=A.right。</li>
<li>如果 start 等于 end, 那么该节点是叶子节点，不再有左右儿子。</li>
</ul>
<p>实现一个 build 方法，接受 start 和 end 作为参数, 然后构造一个代表区间 [start, end] 的线段树，返回这棵线段树的根。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of SegmentTreeNode:</div><div class="line"> * class SegmentTreeNode &#123;</div><div class="line"> * public:</div><div class="line"> *     int start, end;</div><div class="line"> *     SegmentTreeNode *left, *right;</div><div class="line"> *     SegmentTreeNode(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start, this-&gt;end = end;</div><div class="line"> *         this-&gt;left = this-&gt;right = NULL;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param start, end: Denote an segment / interval</div><div class="line">     *@return: The root of Segment Tree</div><div class="line">     */</div><div class="line">    <span class="function">SegmentTreeNode * <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* node = <span class="keyword">new</span> SegmentTreeNode(start, end);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            node-&gt;left = build(start, mid);</div><div class="line">            node-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="线段树的查询"><a href="#线段树的查询" class="headerlink" title="线段树的查询"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-query/" target="_blank" rel="external">线段树的查询</a></strong></h2><p>对于一个有n个数的整数数组，在对应的线段树中, 根节点所代表的区间为0-n-1, 每个节点有一个额外的属性max，值为该节点所代表的数组区间start到end内的最大值。</p>
<p>为SegmentTree设计一个 query 的方法，接受3个参数root, start和end，线段树root所代表的数组中子区间[start, end]内的最大值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, start, end: The root of segment tree and </div><div class="line">     *                         an segment / interval</div><div class="line">     *@return: The maximum number in the interval [start, end]</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) <span class="keyword">return</span> root-&gt;max;</div><div class="line">        <span class="keyword">int</span> leftmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>, rightmax = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmax = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmax = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmax = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max(leftmax, rightmax);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="线段树的修改"><a href="#线段树的修改" class="headerlink" title="线段树的修改"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/segment-tree-modify/" target="_blank" rel="external">线段树的修改</a></strong></h2><p>对于一棵 最大线段树, 每个节点包含一个额外的 max 属性，用于存储该节点所代表区间的最大值。</p>
<p>设计一个 modify 的方法，接受三个参数 root、 index 和 value。该方法将 root 为跟的线段树中 [start, end] = [index, index] 的节点修改为了新的 value ，并确保在修改后，线段树的每个节点的 max 属性仍然具有正确的值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param root, index, value: The root of segment tree and </div><div class="line">     *@ change the node's value with [index, index] to the new given value</div><div class="line">     *@return: void</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(SegmentTreeNode *root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;max = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;max = max(root-&gt;left-&gt;max, root-&gt;right-&gt;max);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="区间最小数"><a href="#区间最小数" class="headerlink" title="区间最小数"></a><strong><a href="http://www.lintcode.com/zh-cn/problem/interval-minimum-number/" target="_blank" rel="external">区间最小数</a></strong></h2><p>给定一个整数数组（下标由 0 到 n-1，其中 n 表示数组的规模），以及一个查询列表。每一个查询列表有两个整数 [start, end]。 对于每个查询，计算出数组中从下标 start 到 end 之间的数的最小值，并返回在结果列表中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition of Interval:</div><div class="line"> * classs Interval &#123;</div><div class="line"> *     int start, end;</div><div class="line"> *     Interval(int start, int end) &#123;</div><div class="line"> *         this-&gt;start = start;</div><div class="line"> *         this-&gt;end = end;</div><div class="line"> *     &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123; </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, * right;</div><div class="line">        <span class="keyword">int</span> start, end, min;</div><div class="line">        Node(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</div><div class="line">            <span class="keyword">this</span>-&gt;start = start;</div><div class="line">            <span class="keyword">this</span>-&gt;end = end;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">            min = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        Node* root = <span class="keyword">new</span> Node(start, end);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end) </div><div class="line">            <span class="keyword">return</span> root-&gt;min;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> leftmin = <span class="number">1</span>&lt;&lt;<span class="number">30</span>, rightmin = leftmin;</div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftmin = query(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightmin = query(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightmin = query(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> min(leftmin, rightmin);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Node* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;min = value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (root-&gt;start + root-&gt;end) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modify(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modify(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        root-&gt;min = min(root-&gt;left-&gt;min, root-&gt;right-&gt;min);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     *@param A, queries: Given an integer array and an query list</div><div class="line">     *@return: The result list</div><div class="line">     */</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intervalMinNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;Interval&gt; &amp;queries) &#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        <span class="keyword">if</span> (A.size() == <span class="number">0</span>) <span class="keyword">return</span> ret;</div><div class="line">        Node* root = build(<span class="number">0</span>, A.size()<span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.size(); i++) </div><div class="line">            modify(root, i, A[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;queries.size(); i++) &#123;</div><div class="line">            ret.push_back(query(root, queries[i].start, queries[i].end));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google 2016 面试题6 | Count of Smaller Numbers After Self(数组计数)]]></title>
      <url>http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%986-Count-of-Smaller-Numbers-After-Self(%E6%95%B0%E7%BB%84%E8%AE%A1%E6%95%B0)/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给定一个数组nums,返回一个计数数组count，count[i]表示nums中第i个右边有多少个数小于nums[i]<br>Example:<br>nums = [5, 2, 6, 1]<br>输出[2,1,1,0]</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>此题不难给出O(N^2)的算法，先穷举nums中每个位置i，再穷举右边的数计算有多少个小于nums[i]。难点在于利用数据结构进行优化从而降低时间复杂度。线段树（segment tree）和平衡树（Balanced Binary Tree）是两种可以使用的数据结构。<a id="more"></a></p>
<p>线段树的每个节点表示一段区间，记录这个区间的某些信息，其基本思想是把区间一分为二，二分为四。。。直到不可再分（因此叶子节点的区间只包含一个数），如此可以把任意区间表示成log（区间大小）个子区间的拼接，以降低查询时间复杂度。在本题中，假设nums中的数字范围在0到maxnum之间，那么建树的区间为[0,maxnum]（也就是根节点所表示的区间）。每个节点记录其表示区间内的数字个数。本题涉及两种线段树基本操作：插入和查询。插入操作把nums[i]插入到线段树相应位置，同时对所有经过的区间的sum值进行累加；查询操作需要查询区间[0,nums[i]-1]所包含的数字个数，利用已经建好的线段树把查询区间分割为若干个节点所表示的区间，统计并返回这些节点的sum值之和。</p>
<p>平衡树用途更广，代码复杂度也更高，是一种保持叶子节点深度平衡的二叉搜索树，有多种方法实现，<a href="https://discuss.leetcode.com/category/395/count-of-smaller-numbers-after-self" target="_blank" rel="external">可以参照LeetCode</a>。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><h3 id="1-线段树-Segment-Tree"><a href="#1-线段树-Segment-Tree" class="headerlink" title="1.线段树 Segment Tree"></a><strong>1.线段树 Segment Tree</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> SegmentTreeNode &#123;</div><div class="line">        SegmentTreeNode* left, *right;</div><div class="line">        <span class="keyword">int</span> start, end;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        SegmentTreeNode(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> count)</div><div class="line">            : start(start), end(end), count(count) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function">SegmentTreeNode* <span class="title">build</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        SegmentTreeNode* root = <span class="keyword">new</span> SegmentTreeNode(start, end, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (start != end) &#123;</div><div class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</div><div class="line">            root-&gt;left = build(start, mid);</div><div class="line">            root-&gt;right = build(mid+<span class="number">1</span>, end);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == start &amp;&amp; root-&gt;end == end)</div><div class="line">            <span class="keyword">return</span> root-&gt;count;</div><div class="line">        <span class="keyword">int</span> leftcount = <span class="number">0</span>, rightcount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// left half part</span></div><div class="line">        <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">            <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, mid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                leftcount = querySegmentTree(root-&gt;left, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// right half part</span></div><div class="line">        <span class="keyword">if</span> (mid &lt; end) &#123;</div><div class="line">            <span class="keyword">if</span> (start &lt;= mid) &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, mid+<span class="number">1</span>, end);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                rightcount = querySegmentTree(root-&gt;right, start, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> leftcount + rightcount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modifySegmentTree</span><span class="params">(SegmentTreeNode* root, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start == index &amp;&amp; root-&gt;end == index) &#123;</div><div class="line">            root-&gt;count += value;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (root-&gt;start &lt;= index &amp;&amp; index &lt;= mid) &#123;</div><div class="line">            modifySegmentTree(root-&gt;left, index, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mid &lt; index &amp;&amp; index &lt;= root-&gt;end) &#123;</div><div class="line">            modifySegmentTree(root-&gt;right, index, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        root-&gt;count = root-&gt;left-&gt;count + root-&gt;right-&gt;count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line">        SegmentTreeNode* root = build(<span class="number">-1000</span>, <span class="number">10000</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> ans = querySegmentTree(root, <span class="number">-1000</span>, nums[i]<span class="number">-1</span>);</div><div class="line">            modifySegmentTree(root, nums[i], <span class="number">1</span>);</div><div class="line">            ret.push_back(ans);</div><div class="line">        &#125;</div><div class="line">        reverse(ret.begin(), ret.end());</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>之前写的线段树居然不能有负区间，debug了好长时间，发现原来是区间中点计算有问题，应该类似于<code>int c = a + (b - a) / 2</code></p>
<h3 id="2-二叉搜索树-Binary-Search-Tree"><a href="#2-二叉搜索树-Binary-Search-Tree" class="headerlink" title="2.二叉搜索树 Binary Search Tree"></a><strong>2.二叉搜索树 Binary Search Tree</strong></h3><p>每个节点保存sum（左子树节点个数），dup（副本个数）。当插入一个数时，比它小的数的个数就是沿着树向右转时dup和sum之和，<a href="https://discuss.leetcode.com/topic/31405/9ms-short-java-bst-solution-get-answer-when-building-bst" target="_blank" rel="external">详情请见LeetCode</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum, dup = <span class="number">1</span>;</div><div class="line">        Node(<span class="keyword">int</span> v, <span class="keyword">int</span> s) : val(v), sum(s) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        Node* root = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            insert(nums[i], root, ret[i], <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num, Node*&amp; root, <span class="keyword">int</span>&amp; ret, <span class="keyword">int</span> preSum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">            root = <span class="keyword">new</span> Node(num, <span class="number">0</span>);</div><div class="line">            ret = preSum;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">            root-&gt;sum++;</div><div class="line">            insert(num, root-&gt;left, ret, preSum);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; num) &#123;</div><div class="line">            insert(num, root-&gt;right, ret, preSum + root-&gt;dup + root-&gt;sum);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            root-&gt;dup++;</div><div class="line">            ret = preSum + root-&gt;sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a><strong>迭代版</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct</span> Node &#123;</div><div class="line">        Node* left, *right;</div><div class="line">        <span class="keyword">int</span> val, sum = <span class="number">0</span>, dup = <span class="number">0</span>;</div><div class="line">        Node(<span class="keyword">int</span> v) : val(v) &#123;</div><div class="line">            left = right = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; countSmaller(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret(nums.size());</div><div class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line">        Node* root = <span class="keyword">new</span> Node(nums[nums.size()<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">            ret[i] = insert(root, nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Node* root, <span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (root-&gt;val != num) &#123;</div><div class="line">            <span class="keyword">if</span> (root-&gt;val &gt; num) &#123;</div><div class="line">                root-&gt;sum++;</div><div class="line">                <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;left = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;left;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ret += root-&gt;dup + root-&gt;sum;</div><div class="line">                <span class="keyword">if</span> (root-&gt;right == <span class="literal">NULL</span>)</div><div class="line">                    root-&gt;right = <span class="keyword">new</span> Node(num);</div><div class="line">                root = root-&gt;right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        root-&gt;dup++;</div><div class="line">        <span class="keyword">return</span> ret + root-&gt;sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google 2016 面试题5 | 岛屿计数2]]></title>
      <url>http://HawkAaron.github.io/2016/08/01/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%985-%E5%B2%9B%E5%B1%BF%E8%AE%A1%E6%95%B02/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个m行n列的网格地图，每个位置为0或1，0表示海水1表示陆地。一开始地图全为0（没有陆地）。每次在一个位置加入一块陆地，返回此时地图中陆地的总块数（相邻陆地统计时为同一块陆地）。<br>Example:<br>操作#1: addLand(0, 0) turns the water at grid[0][0] into a land.<br><img src="http://img.blog.csdn.net/20160801094144259" alt="leetcode"><br>操作#2: addLand(0, 1) turns the water at grid[0][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094214103" alt="leetcode"><br>操作#3: addLand(1, 2) turns the water at grid[1][2] into a land.<br><img src="http://img.blog.csdn.net/20160801094236588" alt="leetcode"><br>操作#4: addLand(2, 1) turns the water at grid[2][1] into a land.<br><img src="http://img.blog.csdn.net/20160801094255504" alt="leetcode"><br>返回答案数组: [1, 1, 2, 3]<br>你可以做到复杂度O(k log mn)吗？其中k为操作次数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。但是对于一个不断更新的地图，如果我们每次重新统计连通块个数，复杂度为O(m*n*k)，其中k为总操作个数。考虑到每次只有一个位置发生变化（从0变为1），完全不必重新统一，该陆地的产生职能影响周围四个位置。假设该陆地周围有t（p至多为4）个不连通的岛屿，那么该陆地为把这四个不同点岛屿合并为一个岛屿，使得总岛屿数下降t-1个。因此我们需要维护岛屿之间的连通性，自然的我们想到了并查集。<strong>并查集</strong>是一种解决此类问题的强力数据结构，以此题为例，初始时每个位置都是独立的、互不连通的，每个位置都有一个标签来identify自己，记录在fa数组中，fa[i]为i。当两个位置p、q相邻且都为1时，这两个位置需要统一它们的标签（表示这两个岛屿合并），即fa[p] = q。但是p、q的标签可能已经被修改，因此我们需要通过getfather函数递归找到它们的真实标签（getfather(i)的返回值也称为i的祖先），合并操作变为fa[getfather(p)] = getfather(q)。为了防止最坏情况下每次调用getfather函数都要经过m*n次递归，我们可以采用路径压缩的方法（详见代码中getfather函数），使得每个位置到其祖先的距离始终为一个很小的常数（与m、n无关）。本题中总体时间复杂度为O(m*n+k)，其中每次并查集的查询复杂度为一个常数（不超过4）。</p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码 "></a><strong>参考代码 </strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numIslands2(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; positions) &#123;</div><div class="line">        <span class="keyword">bool</span> land[m][n];</div><div class="line">        <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> fa[m * n];</div><div class="line">        <span class="keyword">int</span> island = <span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</div><div class="line"></div><div class="line">        <span class="comment">// initialization</span></div><div class="line">        <span class="built_in">memset</span>(land, <span class="number">0</span>, <span class="keyword">sizeof</span>(land));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m*n; i++)</div><div class="line">            fa[i] = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;positions.size(); i++) &#123;</div><div class="line">            island++;</div><div class="line">            <span class="keyword">int</span> x = positions[i][<span class="number">0</span>], y = positions[i][<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> f = x * n + y;</div><div class="line">            land[x][y] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;   <span class="comment">// 4 direction check</span></div><div class="line">                <span class="keyword">int</span> tx = x + dr[j];</div><div class="line">                <span class="keyword">int</span> ty = y + dc[j];</div><div class="line">                <span class="keyword">if</span> (tx &gt;=<span class="number">0</span> &amp;&amp; tx &lt; m &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; n &amp;&amp;</div><div class="line">                    land[tx][ty] &amp;&amp; getfather(fa, tx*n+ty) != f) &#123;</div><div class="line">                    fa[getfather(fa, tx*n+ty)] = f;</div><div class="line">                    island--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ret.push_back(island);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// disjoint-set and path compression</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> fa[], <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fa[i] == i) <span class="keyword">return</span> i;</div><div class="line">        <span class="keyword">return</span> fa[i] = getfather(fa, fa[i]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Number of Islands]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/Number-of-Islands/</url>
      <content type="html"><![CDATA[<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:</p>
<p>11110<br>11010<br>11000<br>00000<br>Answer: 1</p>
<p>Example 2:</p>
<p>11000<br>11000<br>00100<br>00011<br>Answer: 3</p>
<p>对于一个静态的地图，统计岛屿个数可以使用dfs（类似于寻找一个图中的连通块个数），算法复杂度是O(m*n)。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">int</span> m, n;</div><div class="line">    <span class="keyword">int</span> dr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> dc[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">public</span>:    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] != <span class="string">'1'</span>) <span class="keyword">return</span>;</div><div class="line">        grid[x][y] = <span class="string">'2'</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">            dfs(x+dr[i], y+dc[i], grid);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        m = grid.size(); </div><div class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        n = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dfs(i, j, grid);</div><div class="line">                    cnt++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cnt;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="external">Source: LeetCode 200. Number of Islands</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google 2016 面试题3 | 摆动排序 II]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%983-%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F2/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个整数数组nums，重新排列nums使得nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]…<br>Example:<br>nums = [1, 5, 1, 1, 6, 4], 一个可能的答案是[1, 4, 1, 5, 1, 6]<br>数据保证必定有解。</p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p><strong>解法I O(nlogn)时间排序+O(n)空间辅助数组解法：</strong></p>
<ol>
<li><p>对原数组排序，得到排序后的辅助数组tmp</p>
</li>
<li><p>对原数组的偶数位下标填充tmp的末尾元素</p>
</li>
<li><p>对原数组的奇数位下标填充tmp的末尾元素</p>
</li>
</ol>
<p>算法复杂度是快速排序的复杂度O(NlogN)。<a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sz = nums.size();</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = nums;</div><div class="line">    <span class="keyword">int</span> k = sz - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i+=<span class="number">2</span>)</div><div class="line">        nums[i] = tmp[k--];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解法II O(n)时间复杂度+O(1)空间复杂度解法：</strong></p>
<ol>
<li><p>使用O(n)时间复杂度的quickSelect算法，从未经排序的数组nums中选出中位数mid</p>
</li>
<li><p>参照解法I的思路，将nums数组的下标x通过函数idx()从[0, 1, 2, … , n - 1, n] 映射到 [1, 3, 5, … , 0, 2, 4, …]，得到新下标ix</p>
</li>
<li><p>以中位数mid为界，将大于mid的元素排列在ix的较小部分，而将小于mid的元素排列在ix的较大部分。</p>
</li>
</ol>
<p><strong><a href="https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing" target="_blank" rel="external">思路来源：https://discuss.leetcode.com/topic/32929/o-n-o-1-after-median-virtual-indexing</a></strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line"></div><div class="line">    <span class="comment">// Find a median.</span></div><div class="line">    <span class="keyword">auto</span> midptr = nums.begin() + n / <span class="number">2</span>;</div><div class="line">    nth_element(nums.begin(), midptr, nums.end());</div><div class="line">    <span class="keyword">int</span> mid = *midptr;</div><div class="line"></div><div class="line">    <span class="comment">// Index-rewiring.</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> A(i) nums[(1+2*(i)) % (n|1)]</span></div><div class="line"></div><div class="line">    <span class="comment">// 3-way-partition-to-wiggly in O(n) time with O(1) space.</span></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (j &lt;= k) &#123;</div><div class="line">        <span class="keyword">if</span> (A(j) &gt; mid)</div><div class="line">            swap(A(i++), A(j++));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A(j) &lt; mid)</div><div class="line">            swap(A(j), A(k--));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            j++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-way-partition"><a href="#3-way-partition" class="headerlink" title="3-way-partition"></a><strong>3-way-partition</strong></h2><p><strong><a href="https://en.wikipedia.org/wiki/Dutch_national_flag_problem#Pseudocode" target="_blank" rel="external">详见维基百科</a></strong></p>
<p>伪码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">procedure three-way-partition(A : array of values, mid : value):</div><div class="line">    i ← 0</div><div class="line">    j ← 0</div><div class="line">    n ← size of A - 1</div><div class="line"></div><div class="line">    while j ≤ n:</div><div class="line">        if A[j] &lt; mid:</div><div class="line">            swap A[i] and A[j]</div><div class="line">            i ← i + 1</div><div class="line">            j ← j + 1</div><div class="line">        else if A[j] &gt; mid:</div><div class="line">            swap A[j] and A[n]</div><div class="line">            n ← n - 1</div><div class="line">        else:</div><div class="line">            j ← j + 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google 2016 面试题2 | 不构造树的情况下验证先序遍历]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%982-%E4%B8%8D%E6%9E%84%E9%80%A0%E6%A0%91%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%AA%8C%E8%AF%81%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给出一个字符序列，问该序列是否是一棵合法的二叉树的先序遍历？<br>找到一种不需要构造二叉树的方法。<br>For example：</p>
<blockquote>
<p>“9,3,4,#,#,1,#,#,2,#,6,#,#”<br>是下面这颗二叉树的先序遍历。其中＃代表空节点。</p>
</blockquote>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a><strong>分析解答</strong></h2><p>通过观察上图中二叉树我们可以发现，一棵合法的二叉树去掉某个叶子节点后仍是合法的二叉树。在给出的字符序列中，叶子节点有很明显的特征，即叶子节点之后一定紧跟两个空节点＃。通过不断的把number,#,#的子串缩成空节点#(把number,#,#子串替换为#)，如果最后字符序列可以缩短到只有一个字符＃，那它就是我们要找的合法的先序遍历了。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSerialization</span><span class="params">(<span class="built_in">string</span> preorder)</span> </span>&#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span> (preorder.length() &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> index = preorder.find(<span class="string">",#,#"</span>);</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> start = index;</div><div class="line">            <span class="keyword">while</span> (start &gt; <span class="number">0</span> &amp;&amp; preorder[start<span class="number">-1</span>] != <span class="string">','</span>)</div><div class="line">                start--;</div><div class="line">            <span class="keyword">if</span> (preorder[start] == <span class="string">'#'</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            preorder.erase(start, index-start+<span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag &amp;&amp; preorder[<span class="number">0</span>] == <span class="string">'#'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/" target="_blank" rel="external">LeetCode 331. Verify Preorder Serialization of a Binary Tree</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google 2016 面试题1 | 数组补丁]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/Google-2016-%E9%9D%A2%E8%AF%95%E9%A2%981-%E6%95%B0%E7%BB%84%E8%A1%A5%E4%B8%81/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述 "></a><strong>题目描述 </strong></h2><p>给出一个从小到大排好序的整数数组nums和一个整数n，在数组中添加若干个补丁（元素）使得[1,n]的区间内的所有数都可以表示成nums中若干个数的和。返回最少需要添加的补丁个数。</p>
<blockquote>
<p>Example 1：<br>nums = [1, 3], n = 6</p>
</blockquote>
<p>返回1，表示至少需要添加1个数｛2｝，才可以表示1到6之间所有数。</p>
<blockquote>
<p>Example 2:<br>nums = [1, 5, 10], n = 20</p>
</blockquote>
<p>返回2，表示至少需要添加两个数｛2，4｝，才可以表示1到20之间所有数。<br><a id="more"></a></p>
<h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答 "></a><strong>分析解答 </strong></h2><p>读者不难想到暴力搜索的做法：先穷举每一个不在数组里的数p，再穷举判断p是否可以表示为数组中若干个数的和；如果不能，则把p加入数组中，把答案加一。</p>
<p>然而，这种做法时间复杂度高且实际操作难度大（需要考虑穷举的顺序）。我们不妨先思考一个简单的问题，如果nums数组为空，那么最少需要多少个数字才能表示1到n之间所有数？相信大家都可以想到一个贪心算法，即按照1、2、4、8…都顺序添加，每次加入都数都比之前所有数的总和大1，直到总和大于n。本题的难点是预先给出了一些数，但这不影响我们的贪心策略：假设nums当前至多可以表示1到m之间的所有数，加入m+1；直到m大于等于n。</p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPatches</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (sum &lt; n) &#123;</div><div class="line">            <span class="keyword">while</span> (index &lt; nums.size() &amp;&amp; nums[index] &lt;= sum + <span class="number">1</span>) &#123;</div><div class="line">                sum += nums[index++];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum &lt; n) &#123;</div><div class="line">                res++;</div><div class="line">                sum += sum + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><strong>题目来源</strong></h2><p><a href="https://leetcode.com/problems/patching-array/" target="_blank" rel="external">LeetCode 330. Patching Array</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Max Points on a Line]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/Max-Points-on-a-Line/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>暴力枚举法。两点决定一条直线，$n$个点两两组合，可以得到$\dfrac{1}{2}n(n+1)$条直线，对每一条直线，判断$n$个点是否在该直线上，从而可以得到这条直线上的点的个数，选择最大的那条直线返回。复杂度$O(n^3)$。</p>
<p>上面的暴力枚举法以“边”为中心，再看另一种暴力枚举法，以每个“点”为中心，然后遍历剩余点，找到所有的斜率，如果斜率相同，那么一定共线对每个点，用一个哈希表，key为斜率，value为该直线上的点数，计算出哈希表后，取最大值，并更新全局最大值，最后就是结果。时间复杂度$O(n^2)$，空间复杂度$O(n)$。<br><a id="more"></a></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序 "></a><strong>参考程序 </strong></h2><p>1.以“边”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a point.</div><div class="line"> * struct Point &#123;</div><div class="line"> *     int x;</div><div class="line"> *     int y;</div><div class="line"> *     Point() : x(0), y(0) &#123;&#125;</div><div class="line"> *     Point(int a, int b) : x(a), y(b) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, zero = <span class="number">0</span>;</div><div class="line">                <span class="keyword">double</span> a, b, c;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    zero = <span class="number">1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    a = points[j].x - points[i].x;</div><div class="line">                    b = points[j].y - points[i].y;</div><div class="line">                    c = a * points[i].y - b * points[i].x;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;sz; k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (zero == <span class="number">0</span> &amp;&amp; a * points[k].y - b * points[k].x == c ||</div><div class="line">                        zero == <span class="number">1</span> &amp;&amp; points[k].x == points[i].x)</div><div class="line">                        cnt++;</div><div class="line">                &#125;</div><div class="line">                res = max(res, cnt);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2.以“点”为中心<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sz = points.size();</div><div class="line">        <span class="keyword">if</span> (sz &lt; <span class="number">3</span>) <span class="keyword">return</span> sz;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; slopemap;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++) &#123;</div><div class="line">            slopemap.clear();</div><div class="line">            <span class="keyword">int</span> samePoint = <span class="number">0</span>, cnt = <span class="number">0</span>, maxp = <span class="number">1</span>;</div><div class="line">            <span class="keyword">double</span> slope;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;sz; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (points[i].x == points[j].x) &#123;</div><div class="line">                    slope = numeric_limits&lt;<span class="keyword">double</span>&gt;::infinity();</div><div class="line">                    <span class="keyword">if</span> (points[i].y == points[j].y) &#123;</div><div class="line">                        samePoint++;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    slope = (points[i].y - points[j].y) * <span class="number">1.0</span> / (points[i].x - points[j].x);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (slopemap.find(slope) != slopemap.end()) &#123;</div><div class="line">                    cnt = ++slopemap[slope];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    cnt = slopemap[slope] = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                maxp = max(maxp, cnt);</div><div class="line">            &#125;</div><div class="line">            res = max(res, maxp + samePoint);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[轴对称]]></title>
      <url>http://HawkAaron.github.io/2016/07/31/%E8%BD%B4%E5%AF%B9%E7%A7%B0/</url>
      <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h2><p>给定平面上的n个点，问是否存在一条平行于y轴的直线，使得这n个点相对于这条直线对称。</p>
<h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow-up "></a><strong>Follow-up </strong></h2><p>是否存在一条直线使得这n个点关于这条直线对称？<a id="more"></a></p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析 "></a><strong>算法分析 </strong></h2><p>因为对称轴一定平行于y轴，对称轴的特点就是每一个点都在另一边有一个对应的点。<strong>最左边的点一定对应某个最右边的点，因此最左边的点和最右边的点的中点应该在对称轴上。</strong></p>
<p>找到了对称轴的位置，我们就可以通过HashMap判断是否每一个点都有对应的点，最后输出答案即可。</p>
<p><strong>时间复杂度为O(n)。</strong></p>
<h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a><strong>参考程序</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Point &#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>) : x(x), y(y) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Point&gt; points;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; pmap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</div><div class="line">        Point p;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; p.x &gt;&gt; p.y;</div><div class="line">            points.push_back(p);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxv = -INF, minv = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            maxv = max(points[i].x, maxv);</div><div class="line">            minv = min(points[i].x, minv);</div><div class="line">            pmap[points[i].y].insert(points[i].x);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;points.size(); i++) &#123;</div><div class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;setx = pmap[points[i].y];</div><div class="line">            <span class="keyword">if</span> (setx.find(maxv + minv - points[i].x) == setx.end()) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        flag ? <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</div><div class="line">        points.clear();</div><div class="line">        pmap.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LeetCode相关练习题"><a href="#LeetCode相关练习题" class="headerlink" title="LeetCode相关练习题"></a><strong>LeetCode相关练习题</strong></h2><p><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="external">https://leetcode.com/problems/max-points-on-a-line/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[adb无线调试]]></title>
      <url>http://HawkAaron.github.io/2016/05/29/adb%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>Android开发会用到 adb，调试用的设备一般会选择模拟器，但不管怎么说没有真机流畅，而且有些场景还必须得用真机。问题是真机调试还得用数据线，连上电脑后各种弹框下载简直受不了。这里介绍一下如何通过WiFi无线调试：<br><a id="more"></a></p>
<h2 id="0x00-前期准备"><a href="#0x00-前期准备" class="headerlink" title="0x00 前期准备"></a><strong>0x00 前期准备</strong></h2><ol>
<li>无线调试的前提是终端设备在同一局域网（能相互ping通即可），这里我们在 PC 创建一个免费WiFi，手机连上。</li>
<li>手机需要root权限，以便于后面进行相关设置（目前各大厂商都有自己的权限管理中心，没有的可以刷开发版ROM或者用第三方root软件）。</li>
<li>安装<a href="https://www.baidu.com/s?wd=Android%20Terminal%20Emulator" target="_blank" rel="external">Android终端模拟器</a>。</li>
</ol>
<h2 id="0x01-终端配置"><a href="#0x01-终端配置" class="headerlink" title="0x01 终端配置"></a><strong>0x01 终端配置</strong></h2><p>打开终端模拟器，依次输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ su</div><div class="line"># stop adbd</div><div class="line"># setprop service.adb.tcp.port 5555</div><div class="line"># start adbd</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20160529171056030" alt="adbd"></p>
<p>注意<code>setprop service.adb.tcp.port 5555</code> 把adbd的监听端口号设置为默认的5555，可以换成其它的。</p>
<h2 id="0x02-连接终端"><a href="#0x02-连接终端" class="headerlink" title="0x02 连接终端"></a><strong>0x02 连接终端</strong></h2><p>首先需要获取手机的IP地址：<br>在终端模拟器中输入<code>ip addr</code> ：<br><img src="http://img.blog.csdn.net/20160529171712017" alt="ip addr"><br>可以看到下面 wlan0 的ip是 192.168.191.4<br>在CMD下输入以下命令：<br><code>adb connect 192.168.191.4</code><br>如果手机adbd的监听端口不是默认的5555，则输入以下命令：<br><code>adb connect 192.168.191.4:6666</code>（这里以6666为例）</p>
<p><img src="http://img.blog.csdn.net/20160529171921591" alt="adb devices"></p>
<p>可见已成功连接。</p>
<h2 id="0x03-调试运行"><a href="#0x03-调试运行" class="headerlink" title="0x03 调试运行"></a><strong>0x03 调试运行</strong></h2><p>这里简单的创建一个Android工程：<br><img src="http://img.blog.csdn.net/20160529172826384" alt="android"><br>注意此时 DDMS 中可以看见设备：<br><img src="http://img.blog.csdn.net/20160529172919073" alt="ddms"><br>可见我已经换了监听端口。</p>
<p>点击直接运行工程进入设备选择界面：<br><img src="http://img.blog.csdn.net/20160529173258867" alt="android device chooser"></p>
<p>选中后确定，很快地在手机中运行了：<br><img src="http://img.blog.csdn.net/20160529173457784" alt="hello world"></p>
<h2 id="0x04-步骤总结"><a href="#0x04-步骤总结" class="headerlink" title="0x04 步骤总结"></a><strong>0x04 步骤总结</strong></h2><p>1.进入android模拟终端，依次输入以下命令：<br><code>su</code> : 获取root权限（必须）<br><code>setprop service.adb.tcp.port 5555</code> ：设置adb监听端口（只用设置一次）<br><code>stop adbd</code> ：首先关闭 adbd<br><code>start adbd</code> ：然后开启 adbd<br><code>ip addr</code> ：获取手机IP，wlan0对应的IP</p>
<p>2.CMD下adb连接手机：<br><code>adb connect IP:PORT</code> : 端口默认为5555，如果设置成其它的需要在IP后显示指定<br><code>adb devices</code> ：查看已经连上的设备（可选）<br><code>adb shell</code> ：进入手机终端shell（可选）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python开发环境搭建（Windows）]]></title>
      <url>http://HawkAaron.github.io/2015/06/14/Python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAwin7/</url>
      <content type="html"><![CDATA[<h1 id="安装配置Python"><a href="#安装配置Python" class="headerlink" title="安装配置Python"></a>安装配置Python</h1><p>其实在开发python最好在ubuntu环境下，简单也便于扩展各个package。这次来讲一下如何在win7上搭建Python开发环境。由于python的跨平台性。在windows下和ubuntu下基本上没什么差别。下面从几个不步骤来搭建开发环境。</p>
<ol>
<li><p>下载（<a href="https://www.python.org/downloads/）安装python.2.7.8" target="_blank" rel="external">https://www.python.org/downloads/）安装python.2.7.8</a>. python有2.7的版本和3.x版本，建议还是使用python-2.7.x 版本，因为python的各大框架都支持2.7版本，但是不支持3.x版本。例如简介并且功能强大的webpy就不支持3.x版本，好像web2py,django 对3.x版本也支持不太好。<br>安装就按照默认安装模式即可，主要是安装完成后设置环境变量。python也要配置环境变量，不过比Java简单多了，windows7下：计算机-&gt;属性-&gt;计算机名称、域和工作组设置（更改设置）-&gt;高级-&gt;环境变量，在变量PATH中加入C:/Python27，即之前的安装路径。</p>
</li>
<li><p>在命令行输入Python，出现下图所示说明安装配置成功。<br><img src="http://img.blog.csdn.net/20150614220256424" alt=""></p>
<a id="more"></a>
</li>
</ol>
<h1 id="安装配置Pycharm-IDE开发工具"><a href="#安装配置Pycharm-IDE开发工具" class="headerlink" title="安装配置Pycharm IDE开发工具"></a>安装配置Pycharm IDE开发工具</h1><p>在python的开发过程中，刚开始一直没找到像eclipse 那样的方便的开发工具，大部分网友估计用过ecplise的pydev插件。其实早期学习的python过程，确实也用过这个工具。但是最终发现这个pycharm后，果断的放弃eclipse，因为它太好用啦。<br> PyCharm 是我用过的python编辑器中，比较顺手的一个。而且可以跨平台，在macos和windows下面都可以用，这点比较好。<br> <a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="external">pycharm的官方下载地址： http://www.jetbrains.com/pycharm/ </a><br> 我们可以下载free的社区版，这足够我们用了。安装按照默认安装即可，安装成功启动如下：代表安装成功。<br>首先预览一下 PyCharm 在实际应用中的界面：<br><img src="http://img.blog.csdn.net/20150614220848906" alt=""></p>
<p>PyCharm 的激活方式：<br>1，推荐购买正版。<br>2，可以选择试用，免费试用30天。<br>3，网上找激活码：<br>用户名：yueting3527<br>注册码：<br>===== LICENSE BEGIN =====<br>93347-12042010<br>00001FMHemWIs”6wozMZnat3IgXKXJ<br>2!nV2I6kSO48hgGLa9JNgjQ5oKz1Us<br>FFR8k”nGzJHzjQT6IBG!1fbQZn9!Vi<br>===== LICENSE END =====</p>
<h1 id="Pycharm的使用"><a href="#Pycharm的使用" class="headerlink" title="Pycharm的使用"></a>Pycharm的使用</h1><ol>
<li>点击Create New Project.</li>
<li>输入项目名、路径、选择python解释器。如果没有出现python解释器，进入步骤3.<br><img src="http://img.blog.csdn.net/20150614221056309" alt=""></li>
<li>选择python解释器。可以看到，一旦添加了python解释器，pycharm就会扫描出你已经安装的python扩展包，和这些扩展包的最新版本。</li>
<li>点击OK之后，就会创建一个空项目，里面包含一个.idea的文件夹，用于pycharm管理项目。</li>
<li>新建一个文件：右键单击刚建好的helloWord项目，选择New –&gt; Python File<br><img src="http://img.blog.csdn.net/20150614221428207" alt=""></li>
<li>输入文件名：<br><img src="http://img.blog.csdn.net/20150614221552477" alt=""></li>
<li><p>进入编写界面：PyCharm的默认编辑界面很怪，会自动生成一行 <strong>author</strong> = “作者” 的头。而比较常用的文件头，如：#coding=utf-8 等，反倒没有自动生成。<br><img src="http://img.blog.csdn.net/20150614221724802" alt=""><br>输入code：print “Hello word!”<br><img src="http://img.blog.csdn.net/20150614221923517" alt=""></p>
</li>
<li><p>设置控制台：运行之前，我们发现快捷菜单上的【运行】和【调试】都是灰色的，不可触发状态。是因为，我们需要先配置一下控制台。点击运行旁边的黑色倒三角，进入【Run/Debug<br>Configurations】配置界面。（或者点击Run –&gt; Edit Configurations 也一样）<br><img src="http://img.blog.csdn.net/20150614222121670" alt=""><br>在【Run/Debug Configurations】配置界面里，点击绿色的加号，新建一个配置项，并选择python。（因为hello word 就是个python程序）<br><img src="http://img.blog.csdn.net/20150614222249308" alt=""><br>在右边的配置界面里：Name 一栏里写个名字，比如Hello。点击Scrip选项，找到刚才我们写的hello_word.py<br><img src="http://img.blog.csdn.net/20150614222438443" alt=""><br>点击ok, 自动返回到编辑界面，这时候【运行】【调试】按钮全部变绿！<br><img src="http://img.blog.csdn.net/20150614222535224" alt=""></p>
</li>
<li><p>运行：点击绿色的运行按钮，观看输出的结果：<br><img src="http://img.blog.csdn.net/20150614222630525" alt=""><br>到此，Python开发环境搭建完成，第一个Python工程已经成功运行。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[proteus解决LED二极管不发光问题]]></title>
      <url>http://HawkAaron.github.io/2015/06/07/proteus%E8%A7%A3%E5%86%B3LED%E4%BA%8C%E6%9E%81%E7%AE%A1%E4%B8%8D%E5%8F%91%E5%85%89%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20150607130238443" alt=""><br>如上图，LED正接不亮，这种情况是LED和电阻之间没有导线连接造成的（一般元件之间必须要有导线连接，如果直接把元件拖到后面，看起来接上去了，其实是断开的）<br><img src="http://img.blog.csdn.net/20150607130353831" alt=""><br>拖动电阻，发现的确没有连接<br><img src="http://img.blog.csdn.net/20150607130443096" alt=""><br>连接后LED正常<br><a id="more"></a><br>也许你会发现连线正常后LED依然不亮，这时你应该注意一下电阻值的设定<br><img src="http://img.blog.csdn.net/20150607130632281" alt=""><br>如上图，5k的阻值，LED不亮了<br><img src="http://img.blog.csdn.net/20150607130931719" alt=""><br>阻值设为2k时很暗，这说明阻值高了，一般我们设置为100或200</p>
<p>最后，如果你发现连接正常并且电阻值很低时LED还是不亮，那很可能是你的LED接反了，注意图中的接法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言连接MySQL（codeblocks）]]></title>
      <url>http://HawkAaron.github.io/2015/06/06/C%E8%AF%AD%E8%A8%80%E8%BF%9E%E6%8E%A5MySQL-codeblocks/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></div><div class="line"><span class="comment">/*数据库连接用宏*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HOST <span class="meta-string">"localhost"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> USERNAME <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"root"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DATABASE <span class="meta-string">"mysql"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *query;</div><div class="line">    query=<span class="string">"select host,user from user"</span>;</div><div class="line">    query_sql(query);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_sql</span><span class="params">(<span class="keyword">char</span>* sql)</span></span></div><div class="line">&#123;</div><div class="line">    MYSQL my_connection; <span class="comment">/*这是一个数据库连接*/</span></div><div class="line">    <span class="keyword">int</span> res; <span class="comment">/*执行sql語句后的返回标志*/</span></div><div class="line">    MYSQL_RES *res_ptr; <span class="comment">/*指向查询结果的指针*/</span></div><div class="line">    MYSQL_FIELD *field; <span class="comment">/*字段结构指针*/</span></div><div class="line">    MYSQL_ROW result_row; <span class="comment">/*按行返回的查询信息*/</span></div><div class="line">    <span class="keyword">int</span> row, column; <span class="comment">/*查询返回的行数和列数*/</span></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="comment">/*初始化mysql连接my_connection*/</span></div><div class="line">    mysql_init(&amp;my_connection);</div><div class="line">    <span class="comment">/*建立mysql连接*/</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != mysql_real_connect(&amp;my_connection, HOST, USERNAME, PASSWORD,</div><div class="line">                                   DATABASE, <span class="number">0</span>, <span class="literal">NULL</span>, CLIENT_FOUND_ROWS))  <span class="comment">/*连接成功*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库查询query_sql连接成功！\n"</span>);</div><div class="line">        <span class="comment">/*设置查询编码为gbk，以支持中文*/</span></div><div class="line">        mysql_query(&amp;my_connection, <span class="string">"set names gbk"</span>);</div><div class="line">        res = mysql_query(&amp;my_connection, sql);</div><div class="line">        <span class="keyword">if</span> (res)   <span class="comment">/*执行失败*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Error： mysql_query !\n"</span>);</div><div class="line">            <span class="comment">/*关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>     <span class="comment">/*现在就代表执行成功了*/</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">/*将查询的結果给res_ptr*/</span></div><div class="line">            res_ptr = mysql_store_result(&amp;my_connection);</div><div class="line">            <span class="comment">/*如果结果不为空，就把结果print*/</span></div><div class="line">            <span class="keyword">if</span> (res_ptr)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">/*取得結果的行数和*/</span></div><div class="line">                column = mysql_num_fields(res_ptr);</div><div class="line">                row = mysql_num_rows(res_ptr);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"查询到 %d 行 \n"</span>, row);</div><div class="line">                <span class="comment">/*输出結果的字段名*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; field = mysql_fetch_field(res_ptr); i++)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%10s "</span>, field-&gt;name);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                <span class="comment">/*按行输出結果*/</span></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; row+<span class="number">1</span>; i++)</div><div class="line">                &#123;</div><div class="line">                    result_row = mysql_fetch_row(res_ptr);</div><div class="line">                    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; column; j++)</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%10s "</span>, result_row[j]);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*不要忘了关闭连接*/</span></div><div class="line">            mysql_close(&amp;my_connection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"数据库连接失败"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意事项：</p>
<ol>
<li>在Linker settings-&gt;Link libraries中添加libmysql.lib的路径</li>
<li>在Search directories-&gt;的Compiler中添加mysql.h的文件夹路径（总之就是让编译器能找到libmysql.lib和mysql.h）</li>
<li>在#include <mysql.h>之前添加#include <winsock2.h>（网上很多资料没有这一步，但是我这边实际操作时发现不加这一句编译无法通过）<br>运行结果：<br><img src="http://img.blog.csdn.net/20150606170050484" alt=""></winsock2.h></mysql.h></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[终于解决“Git Windows客户端保存用户名与密码”的问题]]></title>
      <url>http://HawkAaron.github.io/2015/06/02/Git-Windows%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows" target="_blank" rel="external">Git - How to use netrc file on windows - Stack Overflow</a><br><img src="http://img.blog.csdn.net/20150602220505492" alt=""><br><a id="more"></a><br>这就是正确答案，我们已经验证过了，下面详细描述一下解决方法：</p>
<ol>
<li><p>在Windows中添加一个HOME环境变量，值为%USERPROFILE%，如下图：<br><img src="http://img.blog.csdn.net/20150602220742394" alt=""></p>
</li>
<li><p>在“开始》运行”中打开%Home%，新建一个名为“_netrc”的文件。</p>
</li>
<li>用记事本打开_netrc文件，输入Git服务器名、用户名、密码，并保存。示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">machine git.cnblogs.com</div><div class="line">login cnblogs_user</div><div class="line">password cnblogs_pwd</div></pre></td></tr></table></figure>
</li>
</ol>
<p>That is the answer, and that is exactly the fucking git!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle error 引号内的字符串没有正确结束]]></title>
      <url>http://HawkAaron.github.io/2015/05/31/oracle-error-%E5%BC%95%E5%8F%B7%E5%86%85%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E7%BB%93%E6%9D%9F/</url>
      <content type="html"><![CDATA[<p>ERROR:<br>ORA-01756: 引号内的字符串没有正确结束 </p>
<p>SELECT DISTINCT A.JNO FROM Rt AS A WHERE NOT EXISTS (SELECT PNO FROM St AS B WHERE NOT EXISTS (SELECT JNO,PNO FROM Rt AS C WHERE C.JNO=A.JNO AND B.PNO=C.PNO)) GROUP BY A.JNO<br>                              *<br>第 1 行出现错误:<br>ORA-00933: SQL 命令未正确结束<br><a id="more"></a><br>如果确认没有语法错误，那么就是sql文件编码的问题，由于oracle是用Java写的，所以我们在写sql脚本时应该保存为ANSI编码<br>（另存为，选择编码为ANSI即可）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeBlocks静态链接与动态链接设置]]></title>
      <url>http://HawkAaron.github.io/2015/05/30/CodeBlocks%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h1><h2 id="1-静态库"><a href="#1-静态库" class="headerlink" title="1.静态库"></a>1.静态库</h2><p>之所以称之为”静态库”，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。<br>从本质上来说，一个静态库可以简单看成是一组目标文件(.o/.obj文件)的集合，静态库与汇编生成的目标文件(.o/.obj)一起链接为可执行文件。<br>静态库（后缀为.a/.lib）和.o文件格式相似。即很多目标文件经过压缩打包后形成的一个文件<br>静态库特点总结：</p>
<pre><code>1. 静态库对函数库的链接是放在编译时期完成的
2. 程序在运行时与函数库再无瓜葛，移植方便，因为代码已经嵌入到程序里面了，可以直接跟着程序走，不存在对外部文件的依赖
3. 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件，会增加原本程序的空间
</code></pre><a id="more"></a>
<p><strong>GCC编译、使用静态库</strong><br>静态库的后缀是.a(并没有强制规定)，它的产生分两步</p>
<pre><code>1. 由源文件编译生成一堆.o，每个.o里都包含这个编译单元的符号表
2. ar命令将很多.o转换成.a，成为静态库，从这点也可以看出来，库是很多.o文件的集合
</code></pre><p>编译好静态库文件之后，我们就可以在其他程序中使用静态库文件中的函数了</p>
<pre><code>1. 只需要在使用到这些公用函数的源程序中包含这些公用函数的原型声明(include对应的头文件)
2. 然后在用gcc命令生成目标文件时指明静态库名
3. gcc将会从静态库中将公用函数连接到目标文件中
4. 注意，gcc会在静态库名前加上前缀lib，然后追加扩展名.a得到的静态库文件名来查找静态库文件,因此，我们在写需要连接的库时，只写名字就可以，如libhello.a的库，只写: -lhello
</code></pre><h2 id="2-动态库"><a href="#2-动态库" class="headerlink" title="2.动态库"></a>2.动态库</h2><p>动态库文件名命名规范和静态库文件名命名规范类似，也是在动态库名增加前缀lib，但其文件扩展名为.so（.dll）。例如：我们将创建的动态库名为myhello，则动态库文件名就是libmyhello.so。<br>使用库是重用代码的一种绝佳方式。 您不必在自己创建的每个程序中重新实现同一例程，而只需对这些例程写入一次，然后从需要该功能的应用程序引用它们即可。 通过将代码放入 DLL，您节省在引用它的每个应用程序的空间，而且，您可以更新 DLL，而无需重新编译所有应用程序。<br>动态链接库 (DLL) 是作为共享函数库的可执行文件。动态链接提供了一种方法，使进程可以调用不属于其可执行代码的函数。DLL 还有助于共享数据和资源。多个应用程序可同时访问内存中单个 DLL 副本的内容。<br>动态链接与静态链接的不同之处在于它允许可执行模块（.dll 文件或 .exe 文件）仅包含在运行时定位 DLL 函数的可执行代码所需的信息。在静态链接中，链接器从静态链接库获取所有被引用的函数，并将库同代码一起放到可执行文件中。<br>使用动态链接代替静态链接有若干优点。DLL 节省内存，减少交换操作，节省磁盘空间，更易于升级，提供售后支持，提供扩展 MFC 库类的机制，支持多语言程序，并使国际版本的创建轻松完成。<br><strong>DLL 的类型</strong><br>当您在应用程序中加载 DLL 时，可以使用两种链接方法来调用导出的 DLL 函数。这两种链接方法是加载时动态链接和运行时动态链接。<br>动态库一般会有对应的导入库，方便程序静态载入动态链接库，否则你可能就需要自己LoadLibary调入DLL文件，然后再手工GetProcAddress获得对应函数了。有了导入库，你只需要链接导入库后按照头文件函数接口的声明调用函数就可以了。<br><strong>加载时动态链接</strong>（load-time dynamic linking）<br>在加载时动态链接中，应用程序像调用本地函数一样对导出的 DLL 函数进行显式调用。要使用加载时动态链接，请在编译和链接应用程序时提供头文件 (.h) 和导入库文件 (.lib)。当您这样做时，链接器将向系统提供加载 DLL 所需的信息，并在加载时解析导出的 DLL 函数的位置。<br><strong>运行时动态链接</strong>（run-time dynamic linking）<br>在运行时动态链接中，应用程序调用 LoadLibrary 函数或 LoadLibraryEx 函数以在运行时加载 DLL。成功加载 DLL 后，可以使用 GetProcAddress 函数获得要调用的导出的 DLL 函数的地址。在使用运行时动态链接时，无需使用导入库文件。</p>
<p>所谓静态、动态是指”链接”的过程存在区别:<br><img src="http://img.blog.csdn.net/20141002194726705" alt=""></p>
<h2 id="3-DLL地狱"><a href="#3-DLL地狱" class="headerlink" title="3. DLL地狱"></a>3. DLL地狱</h2><p>DLL地狱（DLL Hell）指在Microsoft Windows系统中，因为动态链接库（DLL）的版本或兼容性的问题而造成程序无法正常运行。<br>Windows早期并没有很严谨的DLL版本管理机制，以致经常发生安装了某软件后，因为其覆盖了系统上原有的同一个DLL文件，而导致原有可运行的程序无法运行。但还原回原有的DLL文件之后，所新安装的软件就无法运行。若覆盖到系统所使用的重要DLL时亦可能让系统容易死机甚至无法正常启动。<br>在CodeBlocks+GCC环境下，静态链接与动态链接设置如下：</p>
<h1 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h1><h2 id="1-建立静态链接库"><a href="#1-建立静态链接库" class="headerlink" title="1.建立静态链接库"></a>1.建立静态链接库</h2><p>示例：<br>建立静态链接库工程，工程文件包括static.h和static.cpp，具体如下，然后编译工程，会生成一个libStaticLibrary.a文件。<br>libStaticLibrary.a是用于链接的，与其他文件一起编译生成一个exe执行文件。<br><strong>static.h</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATIC_H_INCLUDED  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC_H_INCLUDED  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  </div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleAddInt</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleFunction1</span><span class="params">()</span></span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleFunction2</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATIC_H_INCLUDED</span></span></div></pre></td></tr></table></figure></p>
<p><strong>static.cpp</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"static.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">// A function adding two integers and returning the result  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleAddInt</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">return</span> i1 + i2;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// A function doing nothing ;)  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SampleFunction1</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">// insert code here  </span></div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">// A function always returning zero  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SampleFunction2</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">// insert code here  </span></div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-建立主工程"><a href="#2-建立主工程" class="headerlink" title="2.建立主工程"></a>2.建立主工程</h2><p>建立Console application，将生成一个main.cpp示例文件，在最上方添加#include “static.h”语句，这样就可以调用静态链接库里的函数了。<br><strong>main.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"static.h"</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;  </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span>&lt;&lt;SampleAddInt(a,b)&lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后选择菜单栏Project-&gt;Build Options，弹出Project Build Options，选择工程名称。在Linker settings选项卡下添加libStaticLibrary.a的路径，即<strong>添加需要的库</strong>。在Search<br> directories选项卡下的Compiler子选项卡下添加static.h所在的目录路径，即写入项目的头文件目录。最后，点击编译即可。</p>
<h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><h2 id="1-建立动态链接库"><a href="#1-建立动态链接库" class="headerlink" title="1.建立动态链接库"></a>1.建立动态链接库</h2><p>示例：<br>建立动态链接库工程，工程文件包括dynamic.h和dynamic.cpp，具体如下，然后编译工程，会生成一个libDynamicLibrary.a文件和DynamicLibrary.dll文件。<br>libDynamicLibrary.a是用于链接的，DynamicLibrary.dll用于与将要链接的exe执行文件一起工作。<br><strong>dynamic.h</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __DYNAMIC_H__  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __DYNAMIC_H__  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">/*  To use this exported function of dll, include this header </span></div><div class="line"> *  in your project. </div><div class="line"> */  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> BUILD_DLL  </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DLL_EXPORT __declspec(dllexport)  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> DLL_EXPORT __declspec(dllimport)  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  </div><div class="line">&#123;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> DLL_EXPORT <span class="title">SomeFunction</span><span class="params">(<span class="keyword">const</span> LPCSTR sometext)</span></span>;  </div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __DYNAMIC__</span></span></div></pre></td></tr></table></figure></p>
<p><strong>dynamic.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dynamic.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">// a sample exported function  </span></div><div class="line"><span class="function"><span class="keyword">void</span> DLL_EXPORT <span class="title">SomeFunction</span><span class="params">(<span class="keyword">const</span> LPCSTR sometext)</span>  </span></div><div class="line">&#123;  </div><div class="line">    MessageBoxA(<span class="number">0</span>, sometext, <span class="string">"DLL Message"</span>, MB_OK | MB_ICONINFORMATION);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">DLL_EXPORT BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">switch</span> (fdwReason)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:  </div><div class="line">            <span class="comment">// attach to process  </span></div><div class="line">            <span class="comment">// return FALSE to fail DLL load  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:  </div><div class="line">            <span class="comment">// detach from process  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:  </div><div class="line">            <span class="comment">// attach to thread  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:  </div><div class="line">            <span class="comment">// detach from thread  </span></div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> TRUE; <span class="comment">// succesful  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-建立主工程-1"><a href="#2-建立主工程-1" class="headerlink" title="2.建立主工程"></a>2.建立主工程</h2><p>建立win32 GUI project，将生成一个main.cpp示例文件，在最上方添加include “dynamic.h”语句，这样就可以调用动态链接库里的函数了。<br><strong>main.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dynamic.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="comment">/*  Declare Windows procedure  */</span>  </div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProcedure</span> <span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;  </div><div class="line">  </div><div class="line"><span class="comment">/*  Make the class name into a global variable  */</span>  </div><div class="line"><span class="keyword">char</span> szClassName[ ] = <span class="string">"CodeBlocksWindowsApp"</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span> <span class="params">(HINSTANCE hThisInstance,  </span></span></div><div class="line">                     HINSTANCE hPrevInstance,  </div><div class="line">                     LPSTR lpszArgument,  </div><div class="line">                     <span class="keyword">int</span> nCmdShow)  </div><div class="line">&#123;  </div><div class="line">    HWND hwnd;               <span class="comment">/* This is the handle for our window */</span>  </div><div class="line">    MSG messages;            <span class="comment">/* Here messages to the application are saved */</span>  </div><div class="line">    WNDCLASSEX wincl;        <span class="comment">/* Data structure for the windowclass */</span>  </div><div class="line">  </div><div class="line">    <span class="comment">/* The Window structure */</span>  </div><div class="line">    wincl.hInstance = hThisInstance;  </div><div class="line">    wincl.lpszClassName = szClassName;  </div><div class="line">    wincl.lpfnWndProc = WindowProcedure;      <span class="comment">/* This function is called by windows */</span>  </div><div class="line">    wincl.style = CS_DBLCLKS;                 <span class="comment">/* Catch double-clicks */</span>  </div><div class="line">    wincl.cbSize = <span class="keyword">sizeof</span> (WNDCLASSEX);  </div><div class="line">  </div><div class="line">    <span class="comment">/* Use default icon and mouse-pointer */</span>  </div><div class="line">    wincl.hIcon = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);  </div><div class="line">    wincl.hIconSm = LoadIcon (<span class="literal">NULL</span>, IDI_APPLICATION);  </div><div class="line">    wincl.hCursor = LoadCursor (<span class="literal">NULL</span>, IDC_ARROW);  </div><div class="line">    wincl.lpszMenuName = <span class="literal">NULL</span>;                 <span class="comment">/* No menu */</span>  </div><div class="line">    wincl.cbClsExtra = <span class="number">0</span>;                      <span class="comment">/* No extra bytes after the window class */</span>  </div><div class="line">    wincl.cbWndExtra = <span class="number">0</span>;                      <span class="comment">/* structure or the window instance */</span>  </div><div class="line">    <span class="comment">/* Use Windows's default colour as the background of the window */</span>  </div><div class="line">    wincl.hbrBackground = (HBRUSH) COLOR_BACKGROUND;  </div><div class="line">  </div><div class="line">    <span class="comment">/* Register the window class, and if it fails quit the program */</span>  </div><div class="line">    <span class="keyword">if</span> (!RegisterClassEx (&amp;wincl))  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* The class is registered, let's create the program*/</span>  </div><div class="line">    hwnd = CreateWindowEx (  </div><div class="line">           <span class="number">0</span>,                   <span class="comment">/* Extended possibilites for variation */</span>  </div><div class="line">           szClassName,         <span class="comment">/* Classname */</span>  </div><div class="line">           <span class="string">"Code::Blocks Template Windows App"</span>,       <span class="comment">/* Title Text */</span>  </div><div class="line">           WS_OVERLAPPEDWINDOW, <span class="comment">/* default window */</span>  </div><div class="line">           CW_USEDEFAULT,       <span class="comment">/* Windows decides the position */</span>  </div><div class="line">           CW_USEDEFAULT,       <span class="comment">/* where the window ends up on the screen */</span>  </div><div class="line">           <span class="number">544</span>,                 <span class="comment">/* The programs width */</span>  </div><div class="line">           <span class="number">375</span>,                 <span class="comment">/* and height in pixels */</span>  </div><div class="line">           HWND_DESKTOP,        <span class="comment">/* The window is a child-window to desktop */</span>  </div><div class="line">           <span class="literal">NULL</span>,                <span class="comment">/* No menu */</span>  </div><div class="line">           hThisInstance,       <span class="comment">/* Program Instance handler */</span>  </div><div class="line">           <span class="literal">NULL</span>                 <span class="comment">/* No Window Creation data */</span>  </div><div class="line">           );  </div><div class="line">  </div><div class="line">    <span class="comment">/* Make the window visible on the screen */</span>  </div><div class="line">    ShowWindow (hwnd, nCmdShow);  </div><div class="line">  </div><div class="line">    SomeFunction(<span class="string">"Dynamic Tester"</span>);  </div><div class="line">  </div><div class="line">    <span class="comment">/* Run the message loop. It will run until GetMessage() returns 0 */</span>  </div><div class="line">    <span class="keyword">while</span> (GetMessage (&amp;messages, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">/* Translate virtual-key messages into character messages */</span>  </div><div class="line">        TranslateMessage(&amp;messages);  </div><div class="line">        <span class="comment">/* Send message to WindowProcedure */</span>  </div><div class="line">        DispatchMessage(&amp;messages);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* The program return-value is 0 - The value that PostQuitMessage() gave */</span>  </div><div class="line">    <span class="keyword">return</span> messages.wParam;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">/*  This function is called by the Windows function DispatchMessage()  */</span>  </div><div class="line">  </div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProcedure</span> <span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">switch</span> (message)                  <span class="comment">/* handle the messages */</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">case</span> WM_DESTROY:  </div><div class="line">            PostQuitMessage (<span class="number">0</span>);       <span class="comment">/* send a WM_QUIT to the message queue */</span>  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:                      <span class="comment">/* for messages that we don't deal with */</span>  </div><div class="line">            <span class="keyword">return</span> DefWindowProc (hwnd, message, wParam, lParam);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后选择菜单栏Project-&gt;Build Options，弹出Project Build Options，选择工程名称。在Linker settings选项卡下添加libDynamicLibrary.a的路径，即<strong>添加需要的库</strong>。在Search directories选项卡下的Compiler子选项卡下添加dynamic.h所在的目录路径，即<strong>写入项目的头文件目</strong>录；在Linker子选项卡下添加libDynamicLibrary.a所在的目录路径，即<strong>写入库文件目录</strong>。最后，点击编译即可。<br>需要注意的是，以后单独运行编译后的exe执行文件时，需要将dll文件（此处为DynamicLibrary.dll）放在同一目录下，不然运行时可能会崩溃。</p>
<p>参考：<br>codeblocks 配置编译器 1配置编译器的path, include, lib <a href="http://www.verydemo.com/demo_c167_i5481.html" target="_blank" rel="external">http://www.verydemo.com/demo_c167_i5481.html</a><br>C/C++ 跨平台交叉编译、静态库/动态库编译、MinGW、Cygwin、CodeBlocks使用原理及链接参数选项 <a href="http://www.cnblogs.com/LittleHann/p/3980364.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3980364.html</a><br>什么是DLL? <a href="http://support2.microsoft.com/kb/815065/zh-cn" target="_blank" rel="external">http://support2.microsoft.com/kb/815065/zh-cn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C/C++ 跨平台交叉编译、静态库/动态库编译、MinGW、Cygwin、CodeBlocks使用原理及链接参数选项]]></title>
      <url>http://HawkAaron.github.io/2015/05/18/CCpp%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93%E7%BC%96%E8%AF%91-MinGW-Cygwin-CodeBlocks%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E9%93%BE%E6%8E%A5%E5%8F%82%E6%95%B0%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="0-引言"><a href="#0-引言" class="headerlink" title="0. 引言"></a><strong>0. 引言</strong></h1><p>UNIX是一个注册商标，是要满足一大堆条件并且支付可观费用才能够被授权使用的一个操作系统。linux是unix的克隆版本，是由其创始人Linus和诸多世界知名的黑客手工打造的一个操作系统。为什么linux和unix之间有很多软件可以很轻松的移植？因为linux也满足POSIX规范，所以在运行机制上跟unix相近。同时，POSIX标准也是Linux、windows下能够进行交叉编译的基础<a id="more"></a></p>
<h2 id="0x1-POSIX-Portable-Operating-System-Interface"><a href="#0x1-POSIX-Portable-Operating-System-Interface" class="headerlink" title="0x1: POSIX(Portable Operating System Interface)"></a><strong><em>0x1: POSIX(Portable Operating System Interface)</em></strong></h2><p>可移植操作系统接口(Portable Operating System Interface POSIX)，是IEEE为要在各种UNIX操作系统上运行的软件，而定义API的一系列互相关联的标准的总称，其正式称呼为IEEE 1003，而国际标准名称为ISO/IEC 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由理查德·斯托曼应IEEE的要求而提议的一个易于记忆的名称。它基本上是(Portable<br> Operating System Interface可移植操作系统接口)的缩写，而X则表明其对Unix API的传承<br>Linux基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。微软的Windows NT声称部分实现了POSIX标准，因为有POSIX标准的存在，我们在unix、linux、windows上进行编程的时候，会发现有很多API都是通用的，虽然大多数情况下进行跨系统兼容编程是很困难的<br>当前的POSIX主要分为四个部分</p>
<pre><code>1. Base Definitions
2. System Interfaces
3. Shell and Utilities
4. Rationale
</code></pre><h2 id="0x2-POSIX-1-1标准"><a href="#0x2-POSIX-1-1标准" class="headerlink" title="0x2: POSIX 1.1标准"></a><strong><em>0x2: POSIX 1.1标准</em></strong></h2><p>POSIX(Portable Operating System Interface for Computing Systems)是由IEEE 和ISO/IEC 开发的一簇标准。该标准是基于现有的UNIX实践和经验，描述了操作系统的调用服务接口，用于保证编制的应用程序可以在源代码一级上在多种操作系统上移植运行。</p>
<pre><code>1. 1003.0
    管理POSIX开放式系统环境(OSE)。IEEE在1995年通过了这项标准。ISO的版本是ISO/IEC 14252:1996

2. 1003.1
    被广泛接受、用于源代码级别的可移植性标准。1003.1提供一个操作系统的C语言应用编程接口(API)。IEEE和ISO已经在1990年通过了这个标准，IEEE在1995年重新修订了该标准。

3. 1003.1b
    一个用于实时编程的标准(以前的P1003.4或POSIX.4)。这个标准在1993年被IEEE通过，被合并进ISO/IEC 9945-1

4. 1003.1c
    一个用于线程(在一个程序中当前被执行的代码段)的标准。以前是P1993.4或POSIX.4的一部分，这个标准已经在1995年被IEEE通过，归入ISO/IEC 9945-1:1996

5. 1003.1g
    一个关于协议独立接口的标准，该接口可以使一个应用程序通过网络与另一个应用程序通讯。1996年，IEEE通过了这个标准

6. 1003.2
    一个应用于shell和工具软件的标准，它们分别是操作系统所必须提供的命令处理器和工具程序。1992年IEEE通过了这个标准。ISO也已经通过了这个标准(ISO/IEC 9945-2:1993)

7. 1003.2d
    改进的1003.2标准

8. 1003.5
     一个相当于1003.1的Ada语言的API。在1992年，IEEE通过了这个标准。并在1997年对其进行了修订。ISO也通过了该标准

9. 1003.5b
    一个相当于1003.1b(实时扩展)的Ada语言的API。IEEE和ISO都已经通过了这个标准。ISO的标准是ISO/IEC 14519:1999

10. 1003.5c
    一个相当于1003.1q(协议独立接口)的Ada语言的API。在1998年，IEEE通过了这个标准。ISO也通过了这个标准。

11. 1003.9
    一个相当于1003.1的FORTRAN语言的API。在1992年，IEEE通过了这个标准，并于1997年对其再次确认。ISO也已经通过了这个标准

12. 1003.10
    一个应用于超级计算应用环境框架(Application Environment Profile，AEP)的标准。在1995年，IEEE通过了这个标准

13. 1003.13
    一个关于应用环境框架的标准，主要针对使用POSIX接口的实时应用程序。在1998年，IEEE通过了这个标准 

14. 1003.22
    一个针对POSIX的关于安全性框架的指南

15. 1003.23
    一个针对用户组织的指南，主要是为了指导用户开发和使用支持操作需求的开放式系统环境(OSE)框架

16. 2003
    针对指定和使用是否符合POSIX标准的测试方法，有关其定义、一般需求和指导方针的一个标准。在1997年，IEEE通过了这个标

17. 2003.1
    这个标准规定了针对1003.1的POSIX测试方法的提供商要提供的一些条件。在1992年，IEEE通过了这个标准

18. 2003.2
    一个定义了被用来检查与IEEE 1003.2(shell和工具API)是否符合的测试方法的标准。在1996年，IEEE通过了这个标准
</code></pre><h2 id="0x3-POSIX标准的意义"><a href="#0x3-POSIX标准的意义" class="headerlink" title="0x3: POSIX标准的意义"></a><strong><em>0x3: POSIX标准的意义</em></strong></h2><p>POSIX的意义在于提供了”跨操作系统兼容性编译”的能力，遵循了POSIX标准的C/C++程序源代码，可以直接在Linux/BSD环境下用GCC编译，或者在windows下用Cygwin/MinGW编译(Cygwin、MinGW提供了跨操作系统的兼容编译)。这叫跨操作系统的编译，注意要和”跨平台交叉编译”区分开来<br><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://zh.wikipedia.org/wiki/POSIX" target="_blank" rel="external">http://zh.wikipedia.org/wiki/POSIX</a><br>    <a href="http://i.linuxtoy.org/docs/guide/ch48s05.html" target="_blank" rel="external">http://i.linuxtoy.org/docs/guide/ch48s05.html</a></p>
<h1 id="1-交叉编译"><a href="#1-交叉编译" class="headerlink" title="1. 交叉编译"></a><strong>1. 交叉编译</strong></h1><h2 id="0x1-交叉编译简介"><a href="#0x1-交叉编译简介" class="headerlink" title="0x1: 交叉编译简介"></a><strong><em>0x1: 交叉编译简介</em></strong></h2><p>从编译所在的平台和运行所在的平台这点来看，有两种编译概念<br>    <strong>1. 本地编译</strong><br>    我们常见的软件开发，都是属于”本地编译”。在当前的PC下，x86的CPU下，直接编译出来程序，可以运行的程序(或者库文件)，其可以直接在当前的环境，即x86的CPU下，当前电脑中，运行。<br>    此时的编译，可以叫做”本地编译”，即在当前目标平台下，编译出来的程序，也只是放到当前平台下，就可以运行的<br>    <strong>2. 交叉编译</strong><br>    这是一个和本地编译相对应的概念。而所谓的”交叉编译”，就是在一种平台上编译，编译出来的程序，是放到别的平台上运行<br>    即编译的环境，和运行的环境，不一样，属于交叉的，此所谓cross交叉编译，这个概念，主要和嵌入式开发有关<br>一种最常见的例子就是：<br>    在进行嵌入式开发时，手上有个嵌入式开发板，CPU是arm的，然后在x86的平台下开发，比如Ubuntu的Linux，或者是Win7。然后就需要在x86的平台上，(用交叉编译器)去编译你写好的程序代码，编译生成的(可执行的)程序，是放<br>    到目标开发板，arm的CPU上运行的<br>    此所谓：在x86平台上编译，在ARM平台上运行<br>交叉编译，英文常写作cross compile，也有其他写法：crosscompile, cross compiling等</p>
<h2 id="0x2-为何要有交叉编译"><a href="#0x2-为何要有交叉编译" class="headerlink" title="0x2: 为何要有交叉编译"></a><strong><em>0x2: 为何要有交叉编译</em></strong></h2><p>之所以要有交叉编译，主要原因是：<br>    <strong>1. 嵌入式系统中的资源太少</strong><br>    交叉编译出来的程序，所要运行的目标环境中，各种资源，都相对有限，所以很难进行直接的本地编译，最常见的情况是：<br>    因为编译，开发，都需要相对比较多的CPU，内存，硬盘等资源，而嵌入式开发上的那点资源，只够嵌入式(Linux)系统运行的，没太多剩余的资源，供你本地编译。所以需要在别的平台上进行跨平台编译，然后在其他的平台上运行</p>
<h2 id="0x3-跨平台编译和跨操作系统编译的差别"><a href="#0x3-跨平台编译和跨操作系统编译的差别" class="headerlink" title="0x3: 跨平台编译和跨操作系统编译的差别"></a><strong><em>0x3: 跨平台编译和跨操作系统编译的差别</em></strong></h2><p>这里需要注意的是”平台”的概念，实际上包含两个概念<br>    <strong>1. 体系结构(Architecture)</strong>: 同一个体系结构可以运行不同的操作系统<br>    <strong>2. 操作系统(Operating System)</strong>: 同一个操作系统也可以在不同的体系结构上运行<br>举例来说，我们常说的x86 Linux平台实际上是Intel x86体系结构和Linux for x86操作系统的统称；而x86 WinNT平台实际上是Intel x86体系结构和Windows NT for x86操作系统的简称</p>
<p>像crosstool-NG这类交叉编译器和Cygwin这类跨操作系统平台编译器的区别在于</p>
<pre><code>1. crosstool-NG跨平台编译(跨体系结构、操作系统)
2. Cygwin跨平台编译(提供*inux到windows系统的代码级编译兼容性)
</code></pre><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://www.crifan.com/files/doc/docbook/cross_compile/release/html/cross_compile.html" target="_blank" rel="external">http://www.crifan.com/files/doc/docbook/cross_compile/release/html/cross_compile.html</a><br>    <a href="http://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8</a><br>    <a href="http://baike.baidu.com/view/650389.htm" target="_blank" rel="external">http://baike.baidu.com/view/650389.htm</a></p>
<h1 id="2-Cygwin简介"><a href="#2-Cygwin简介" class="headerlink" title="2. Cygwin简介"></a><strong>2. Cygwin简介</strong></h1><h2 id="0x1-简介"><a href="#0x1-简介" class="headerlink" title="0x1: 简介"></a><strong><em>0x1: 简介</em></strong></h2><p>Cygwin是许多自由软件的集合，最初由Cygnus Solutions开发，用于各种版本的Microsoft Windows上，运行类UNIX系统。Cygwin的主要目的是通过”重新编译”(注意：是重新编译)，将POSIX系统(例如Linux、BSD，以及其他Unix系统)上的软件移植到Windows上。Cygwin移植工作在Windows NT上比较好，在Windows 95和Windows 98上，相对差劲一些。目前Cygwin由Red Hat等负责维护</p>
<p>首要需要明白的是，Cygwin不是一个跨平台模拟器，它不能让我们把linux上编译出来的程序在windows上运行(像wine那样)，而是一个跨平台的编译器，也就是提供代码级的跨操作系统兼容性，我们在linux下写的符合POSIX标准的C程序可以在windows下面进行编译，Cygwin提供了一套在windows下可以使用的Linux的API</p>
<p>Cygwin包括了一套库，该库在Win32系统下实现了POSIX系统调用的API。还有一套GNU开发工具集(比如GCC、GDB)，这样可以进行简单的软件开发。还有一些UNIX系统下的常见程序。2001年，新增了X Window System</p>
<h2 id="0x2-Cygwin的特性"><a href="#0x2-Cygwin的特性" class="headerlink" title="0x2: Cygwin的特性"></a><strong><em>0x2: Cygwin的特性</em></strong></h2><pre><code>Cygwin is:
1. a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows.
2. a DLL (cygwin1.dll) which provides substantial POSIX API functionality.

Cygwin is not:
1. a way to run native Linux apps on Windows. You must rebuild your application from source if you want it to run on Windows.
2. a way to magically make native Windows apps aware of UNIX® functionality like signals, ptys, etc. Again, you need to build your apps from source if you want to take advantage of Cygwin functionality.
</code></pre><h2 id="0x3-Cygwin原理"><a href="#0x3-Cygwin原理" class="headerlink" title="0x3: Cygwin原理"></a><strong><em>0x3: Cygwin原理</em></strong></h2><p>cygnus当初首先把GCC，GDB，GAS等开发工具进行了改进，使他们能够生成并解释win32的目标文件。然后，他们要把这些工具移植到windows平台上去。一种方案是基于win32 api对这些工具的源代码进行大幅修改，这样做显然需要大量工作。因此，他们采取了一种不同的方法</p>
<ol>
<li>他们写了一个共享库(就是cygwin.dll)，把win32 api中没有的unix风格的调用(如fork、spawn、signals、select、sockets等)封装在里面</li>
<li>也就是说，他们基于win32 api写了一个unix系统库的模拟层(这个模拟层是一个关键，它的底层是win32 api，上层提供unix风格的调用，所以我们才可以在windows下编译unix风格的C程序)</li>
<li>这样，只要把这些工具的源代码和这个共享库连接到一起，就可以使用unix主机上的交叉编译器来生成可以在windows平台上运行的工具集</li>
<li>以这些移植到windows平台上的开发工具为基础，cygnus又逐步把其他的工具(几乎不需要对源代码进行修改，只需要修改他们的配置脚本)软件移植到windows上来。这样，在windows平台上运行bash和开发工具、用户工具，感觉好像在unix上工作</li>
</ol>
<h2 id="0x4-使用Cygwin编程"><a href="#0x4-使用Cygwin编程" class="headerlink" title="0x4: 使用Cygwin编程"></a><strong><em>0x4: 使用Cygwin编程</em></strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#iuclude <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译<br>    gcc hello.c -o hello.exe<br>得到hello.exe，这个程序可以在windows上直接点击运行<br><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://zh.wikipedia.org/wiki/Cygwin" target="_blank" rel="external">http://zh.wikipedia.org/wiki/Cygwin</a><br>    <a href="https://www.cygwin.com/" target="_blank" rel="external">https://www.cygwin.com/</a><br>    <a href="http://www.ibm.com/developerworks/cn/linux/l-cn-cygwin/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-cn-cygwin/</a></p>
<h1 id="3-静态库编译及使用"><a href="#3-静态库编译及使用" class="headerlink" title="3. 静态库编译及使用"></a><strong>3. 静态库编译及使用</strong></h1><h2 id="0x1-什么是库"><a href="#0x1-什么是库" class="headerlink" title="0x1: 什么是库"></a><strong><em>0x1: 什么是库</em></strong></h2><p>库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在是很有必要的<br>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。库有两种</p>
<pre><code>1. 静态库(.a、.lib)
2. 动态库(.so、.dll)
</code></pre><p>所谓静态、动态是指”链接”的过程存在区别<br><img src="http://images.cnitblog.com/blog/532548/201409/191103358154415.png" alt=""></p>
<h2 id="0x2-动态库和静态库的默认路径PATH搜索顺序"><a href="#0x2-动态库和静态库的默认路径PATH搜索顺序" class="headerlink" title="0x2: 动态库和静态库的默认路径PATH搜索顺序"></a><strong><em>0x2: 动态库和静态库的默认路径PATH搜索顺序</em></strong></h2><p>库文件在连接(静态库和共享库)和运行(仅限于使用共享库的程序)时被使用，其搜索路径是在系统中进行设置的</p>
<pre><code>1. 静态库的搜索路径顺序
    1) /lib
    2) /usr/lib  
    3) /etc/ld.so.conf文件中添加库的搜索路径
    4) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
2. 动态库的搜索路径顺序
    1) LD_LIBRARY_PATH 
    2) /lib
    3) /usr/lib  
    4) /etc/ld.so.cache(使用ldconfig生成的库路径缓存)
    5) /etc/ld.so.conf文件中添加库的搜索路径
    6) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
</code></pre><h2 id="0x3-静态库"><a href="#0x3-静态库" class="headerlink" title="0x3: 静态库"></a><strong><em>0x3: 静态库</em></strong></h2><p>之所以称之为”静态库”，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。<br>从本质上来说，一个静态库可以简单看成是一组目标文件(.o/.obj文件)的集合，静态库与汇编生成的目标文件(.o/.obj)一起链接为可执行文件<br>静态库和.o文件格式相似。即很多目标文件经过压缩打包后形成的一个文件<br>静态库特点总结：</p>
<pre><code>1. 静态库对函数库的链接是放在编译时期完成的
2. 程序在运行时与函数库再无瓜葛，移植方便，因为代码已经嵌入到程序里面了，可以直接跟着程序走，不存在对外部文件的依赖
3. 浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件，会增加原本程序的空间
</code></pre><h2 id="0x4-静态库编程"><a href="#0x4-静态库编程" class="headerlink" title="0x4: 静态库编程"></a><strong><em>0x4: 静态库编程</em></strong></h2><p>我们接下来学习一下如何创建用于C++应用的静态库(一个.lib 文件)。 使用静态库是重用代码的一种绝佳方式。 你不必在要求功能的每个应用中重新实现同一例程，而只需将其写入静态库一次，然后从应用引用它们即可。<br> 从静态库链接的代码成为了应用的一部分，这样你就不必安装另一个文件来使用代码。</p>
<h3 id="1-VS编译、使用静态库"><a href="#1-VS编译、使用静态库" class="headerlink" title="1. VS编译、使用静态库"></a><strong>1. VS编译、使用静态库</strong></h3><pre><code>//创建静态库项目
1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;
2. 在&quot;新建项目&quot;对话框的左窗格中，依次展开&quot;已安装&quot;、&quot;模板&quot;、&quot;Visual C++&quot;，然后选择&quot;Win32&quot;
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;
4. 在&quot;名称&quot;框中为项目指定名称，例如 MathFuncsLib。 在&quot;解决方案名称&quot;框中为解决方案指定名称，例如 StaticLibrary。 选择&quot;确定&quot;按钮
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮
6. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;静态库&quot;
7. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框
8. 选择&quot;完成&quot;按钮创建项目
</code></pre><p>MathFuncsLib.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsLib.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATHFUNCSLIB_H  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSLIB_H  </span></div><div class="line">  </div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> MyMathFuncs</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="comment">// Returns a + b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a - b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a * b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line"></div><div class="line">        <span class="comment">// Returns a / b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;</div><div class="line">    &#125;;</div><div class="line">&#125;  </div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>MathFuncsLib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsLib.cpp</span></div><div class="line"><span class="comment">// compile with: cl /c /EHsc MathFuncsLib.cpp</span></div><div class="line"><span class="comment">// post-build command: lib MathFuncsLib.obj</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsLib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Add(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Subtract(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Multiply(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a * b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Divide(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a / b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译静态库文件<br>    //编译此静态库</p>
<pre><code>1. 在菜单栏上依次选择&quot;生成&quot;、&quot;生成解决方案&quot;
2. 这将创建一个可供其他程序使用的静态库
</code></pre><p>vs是windows操作系统下的编译平台，通过vs编译得到的.lib静态库只能在windows的程序代码中使用，主要是编译器、汇编器和连接器的不同，因此二者库的二进制是不兼容的。文章之后会学习到如何将linux下编译的静态库通过跨平台编译链接到windows的程序代码中</p>
<p>要在其他程序中使用静态库中的功能，必须引用静态库才能使用其中的例程<br>    //创建引用静态库的 C++ 控制台应用</p>
<pre><code>1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;。
2. 在左窗格中的&quot;Visual C++&quot;下，选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如 MyExecRefsLib。 在&quot;解决方案&quot;旁的下拉列表中选择&quot;添加到解决方案&quot;。 这会将新项目添加到包含此静
5. 态库的解决方案。 选择&quot;确定&quot;按钮。
6. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
7. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;控制台应用程序&quot;。
8. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框。
9. 选择&quot;完成&quot;按钮创建项目。

 //在应用中使用静态库的功能
1. 在创建一个控制台应用程序后，一个空的程序已经为你创建好了。 源文件的名称与你之前选择的名称相同。 在此示例中，源文件名为 MyExecRefsLib.cpp。
2. 必须引用静态库才能使用其中的算术例程。 为此，请在&quot;解决方案资源管理器&quot;中打开 MyExecRefsLib 项目的快捷菜单，然后选择&quot;引用&quot;。 在 MyExecRefsLib&quot;属性页&quot;对话框中，展开&quot;通用属性&quot;节点，选择&quot;框架和引用&quot;，然后选择&quot;添加新引用&quot;按钮。 有关&quot;引用&quot;对话框的更多信息，请参见&quot;&lt;Projectname&gt; 属性页&quot;对话框 -&gt;&quot;通用属性&quot;-&gt;&quot;框架和引用&quot;。
3. &quot;添加引用&quot;对话框列出了可以引用的库。 &quot;项目&quot;选项卡列出了当前解决方案中的所有项目以及它们包含的所有库。 在&quot;项目&quot;选项卡上，选中&quot;MathFuncsLib&quot;复选框，然后选择&quot;确定&quot;按钮。
4. 若要引用 MathFuncsLib.h 头文件，必须修改包含的目录路径。 在 MyExecRefsLib&quot;属性页&quot;对话框中，依次展开&quot;配置属性&quot;节点和&quot;C/C++&quot;节点，然后选择&quot;常规&quot;。 在&quot;附加包含目录&quot;旁，指定 MathFuncsLib 目录的路径或浏览至该目录。
5. 若要浏览至目录路径，请打开属性值下拉列表框，然后选择&quot;编辑&quot;。 在&quot;附加包含目录&quot;对话框中，在文本框中选择一个空行，然后选择行尾的省略号按钮 (…)。 在&quot;选择目录&quot;对话框中，选择 MathFuncsLib 目录，然后选择&quot;选择文件夹&quot;按钮以保存所做选择并关闭对话框。 在&quot;附加包含目录&quot;对话框中，选择&quot;确定&quot;按钮，然后在&quot;属性页&quot;对话框中，选择&quot;确定&quot;按钮以保存对该项目进行的更改。
</code></pre><p>MyExecRefsLib.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyExecRefsLib.cpp</span></div><div class="line"><span class="comment">// compile with: cl /EHsc MyExecRefsLib.cpp /link MathFuncsLib.lib</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsLib.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">7.4</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">99</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Add(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a - b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Subtract(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a * b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Multiply(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / b = "</span> &lt;&lt;        MathFuncs::MyMathFuncs::Divide(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://msdn.microsoft.com/zh-cn/library/ms235627.aspx#BKMK_CreateLibProject" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/ms235627.aspx#BKMK_CreateLibProject</a></p>
<p>###<strong>2. GCC编译、使用静态库</strong><br>静态库的后缀是.a(并没有强制规定)，它的产生分两步</p>
<pre><code>1. 由源文件编译生成一堆.o，每个.o里都包含这个编译单元的符号表
2. ar命令将很多.o转换成.a，成为静态库，从这点也可以看出来，库是很多.o文件的集合
</code></pre><p>在linux下，库文件一般放在/usr/lib和/lib下<br>静态库的名字一般为libxxxx.a，其中xxxx是该lib的名称<br>动态库的名字一般为libxxxx.so.major.minor，xxxx是该lib的名称，major是主版本号，minor是副版本号(如果库的命名不遵循 libXXXXX.a的格式就找不到相应文件)</p>
<pre><code>ldd命令可以查看一个可执行程序依赖的共享库 
ldd /bin/ping
    linux-gate.so.1 =&gt;  (0x006cd000)
    libidn.so.11 =&gt; /lib/libidn.so.11 (0x005d6000)
    libc.so.6 =&gt; /lib/libc.so.6 (0x00927000)
    /lib/ld-linux.so.2 (0x005ac000)
</code></pre><p>首先，我们先完成函数库(静态库的代码)的编码<br>hello.h: 函数库(静态库)的头文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_H</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>hello.c: 函数库的实现代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello%s!\n"</span>, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，我们可以将当前的代码编译为静态库文件，需要注意的，静态库和可执行在本质上都是可执行代码，但是静态库没有main主程序，所以不能独立运行，需要被引入到别的程序中进行运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//将代码编译为对象文件.o</div><div class="line">gcc -c hello.c</div><div class="line">//将.o链接为静态库文件</div><div class="line">ar rcs libhello.a hello.o</div></pre></td></tr></table></figure></p>
<p>编译好静态库文件之后，我们就可以在其他程序中使用静态库文件中的函数了</p>
<pre><code>1. 只需要在使用到这些公用函数的源程序中包含这些公用函数的原型声明(include对应的头文件)
2. 然后在用gcc命令生成目标文件时指明静态库名
3. gcc将会从静态库中将公用函数连接到目标文件中
4. 注意，gcc会在静态库名前加上前缀lib，然后追加扩展名.a得到的静态库文件名来查找静态库文件,因此，我们在写需要连接的库时，只写名字就可以，如libhello.a的库，只写: -lhello
</code></pre><p>main.c: 调用静态库的程序代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    hello(<span class="string">"LittleHann"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译<br>    gcc -o hello main.c -L. -lhello<br>关于gcc的编译指令，请参阅另一篇文章<br>    <a href="http://www.cnblogs.com/LittleHann/p/3855905.html" target="_blank" rel="external">http://www.cnblogs.com/LittleHann/p/3855905.html</a></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://wenku.baidu.com/view/7d8602b265ce050877321301.html" target="_blank" rel="external">http://wenku.baidu.com/view/7d8602b265ce050877321301.html</a></p>
<h1 id="4-动态库编译及使用"><a href="#4-动态库编译及使用" class="headerlink" title="4. 动态库编译及使用"></a><strong>4. 动态库编译及使用</strong></h1><h2 id="0x1-动态库"><a href="#0x1-动态库" class="headerlink" title="0x1: 动态库"></a><strong><em>0x1: 动态库</em></strong></h2><p>动态库文件名命名规范和静态库文件名命名规范类似，也是在动态库名增加前缀lib，但其文件扩展名为.so。例如：我们将创建的动态库名为myhello，则动态库文件名就是libmyhello.so。</p>
<p>接下来我们继续学习如何创建用于 C++ 应用程序的动态链接库 (DLL)。 使用库是重用代码的一种绝佳方式。 您不必在自己创建的每个程序中重新实现同一例程，而只需对这些例程写入一次，然后从需要该功能的应用程序引用它们即可。 通过将代码放入 DLL，您节省在引用它的每个应用程序的空间，而且，您可以更新 DLL，而无需重新编译所有应用程序</p>
<h2 id="0x2-动态库编程"><a href="#0x2-动态库编程" class="headerlink" title="0x2: 动态库编程"></a><strong><em>0x2: 动态库编程</em></strong></h2><h3 id="1-VS编译、使用静态库-1"><a href="#1-VS编译、使用静态库-1" class="headerlink" title="1. VS编译、使用静态库"></a><strong>1. VS编译、使用静态库</strong></h3><pre><code>//创建动态链接库 (DLL) 项目
1. 在菜单栏上，依次选择&quot;文件&quot;、&quot;新建&quot;、&quot;项目&quot;。
2. 在&quot;新建项目&quot;对话框的左窗格中，依次展开&quot;已安装&quot;、&quot;模板&quot;、&quot;Visual C++&quot;，然后选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如，MathFuncsDll。 在&quot;解决方案名称&quot;框中为解决方案指定一个名称，例如 DynamicLibrary。 选择&quot;确定&quot;按钮。
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
6. 在&quot;应用程序设置&quot;页上的&quot;应用程序类型&quot;下，选择&quot;DLL&quot;。
7. 选择&quot;完成&quot;按钮创建项目。
</code></pre><p>编写动态库DLL的头文件，MathFuncsDll.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsDll.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATHFUNCSDll_H#<span class="meta-keyword">define</span> MATHFUNCSDll_H</span></div><div class="line"></div><div class="line"><span class="comment">/*当定义了 MATHFUNCSDLL_EXPORTS 符号时，MATHFUNCSDLL_API 符号将在此代码中的成员函数声明中设置 __declspec(dllexport) 修饰符，此修饰符使函数能作为 DLL 导出，以供其他应用程序调用</span></div><div class="line">当 MATHFUNCSDLL_EXPORTS 未定义时，MATHFUNCSDLL_API 会在成员函数声明中定义 __declspec(dllimport) 修饰符。 此修饰符能够使编译器优化从 DLL 导入的用于其他应用程序的函数</div><div class="line">默认情况下，生成 MathFuncsDll 项目时会定义 MATHFUNCSDLL_EXPORTS*/</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MATHFUNCSDLL_EXPORTS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSDLL_API __declspec(dllexport) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> MATHFUNCSDLL_API __declspec(dllimport) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="comment">// This class is exported from the MathFuncsDll.dll</span></div><div class="line">    <span class="keyword">class</span> MyMathFuncs</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="comment">// Returns a + b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a - b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a * b</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line"></div><div class="line">        <span class="comment">// Returns a / b</span></div><div class="line">        <span class="comment">// Throws const std::invalid_argument&amp; if b is 0</span></div><div class="line">        <span class="function"><span class="keyword">static</span> MATHFUNCSDLL_API <span class="keyword">double</span> <span class="title">Divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>; </div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>编写动态库DLL的函数实现的.cpp文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MathFuncsDll.cpp : Defines the exported functions for the DLL application.</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsDll.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line">	</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">namespace</span> MathFuncs</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Add(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Subtract(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Multiply(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a * b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> MyMathFuncs::Divide(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> invalid_argument(<span class="string">"b cannot be zero!"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> a / b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译后可以得到一个.dll文件</p>
<p>编译得到一个dll文件后，我们就在其他的程序代码中去引入这个dll文件，并使用其中的函数功能了</p>
<pre><code>//创建引用 DLL 的应用程序
1. 为了创建一个项目引用你刚刚创建好的DLL，在菜单栏中选择 文件&gt;新建&gt;项目。
2. 在左窗格中的&quot;Visual C++&quot;下，选择&quot;Win32&quot;。
3. 在中间窗格中，选择&quot;Win32 控制台应用程序&quot;。
4. 在&quot;名称&quot;框中为项目指定名称，例如，MyExecRefsDll。 从&quot;解决方案&quot;旁边的下拉列表中选择&quot;添加到解决方案&quot;。 这会将新项目添加到包含 DLL 的同一个解决方案中。 选择&quot;确定&quot;按钮。
5. 在&quot;Win32 应用程序向导&quot;对话框的&quot;概述&quot;页上，选择&quot;下一步&quot;按钮。
6. 在&quot;应用程序设置&quot;页的&quot;应用程序类型&quot;下，选择&quot;控制台应用程序&quot;。
7. 在&quot;应用程序设置&quot;页的&quot;附加选项&quot;下，清除&quot;预编译头&quot;复选框。
8. 选择&quot;完成&quot;按钮创建项目。

//在应用程序中使用类库的功能
1. 在创建一个控制台应用程序后，一个空的程序已经为你创建好了。 源文件的名称与你之前选择的名称相同。 在本示例中，名为&quot;MyExecRefsDll.cpp&quot;。
2. 若要使用您 DLL 中创建的算术例程，必须引用 DLL。 为此，请在 解决方案资源管理器 中选择 MyExecRefsDll 项目，然后在菜单栏上，选择 项目，引用。 在&quot;属性页&quot;对话框中，展开&quot;通用属性&quot;节点，选择&quot;框架和引用&quot;，然后选择&quot;添加新引用&quot;按钮。 有关&quot;引用&quot;对话框的更多信息，请参见&quot;&lt;Projectname&gt; 属性页&quot;对话框 -&gt;&quot;通用属性&quot;-&gt;&quot;框架和引用&quot;。
3. &quot;添加引用&quot;对话框列出了可以引用的库。 &quot;项目&quot;选项卡列出了当前解决方案中的所有项目，以及它们包含的所有库。 在&quot;项目&quot;选项卡上，选中&quot;MathFuncsDll&quot;旁边的复选框，然后选中&quot;确定&quot;按钮。
4. 若要引用 DLL 的头文件，必须修改包含的目录路径。 为此，请在&quot;属性页&quot;对话框中展开&quot;配置属性&quot;节点，然后展开&quot;C/C++&quot;节点，并选择&quot;常规&quot;。 在&quot;附加包含目录&quot;旁边，指定 MathFuncsDll.h 头文件所在位置的路径。 可以使用相对路径（例如 ..\MathFuncsDll\），然后选择&quot;确定&quot;按钮。
5. 现在即可在此应用程序中使用 MyMathFuncs 类。 使用以下代码替换&quot;&quot;的内容：
</code></pre><p>MyExecRefsDll.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyExecRefsDll.cpp</span></div><div class="line"><span class="comment">// compile with: /EHsc /link MathFuncsDll.lib</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MathFuncsDll.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> a = <span class="number">7.4</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">99</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a + b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Add(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a - b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Subtract(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a * b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Multiply(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / b = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Divide(a, b) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span>    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"a / 0 = "</span> &lt;&lt; MathFuncs::MyMathFuncs::Divide(a, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> invalid_argument &amp;e) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Caught exception: "</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-GCC编译、使用静态库"><a href="#2-GCC编译、使用静态库" class="headerlink" title="2. GCC编译、使用静态库"></a><strong>2. GCC编译、使用静态库</strong></h3><p>foo.h:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> foo_h__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> foo_h__</span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// foo_h__</span></span></div></pre></td></tr></table></figure></p>
<p>foo.c:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Hello LittleHann, I'm a shared library"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译动态库文件.so<br>    gcc -shared -Wall -Werror -fpic -o libfoo.so foo.c</p>
<p>编译好动态库文件之后，我们就可以在其他程序中引入这个动态库文件.so，并使用其中的导出函数</p>
<p>main.c:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>#<span class="meta-keyword">include</span> <span class="meta-string">"foo.h"</span></span></div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"This is a shared library test..."</span>);</div><div class="line">    foo();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在main.c中引入了foo.h头文件<br>    gcc -L. -Wall -o test main.c -lfoo</p>
<p>编译成功后，还有一件很重要的事，我们回想一下Linux下静态库、动态库的默认搜索顺序</p>
<pre><code>1) LD_LIBRARY_PATH 
2) /lib
3) /usr/lib  
4) /etc/ld.so.cache(使用ldconfig生成的库路径缓存)
5) /etc/ld.so.conf文件中添加库的搜索路径
6) /etc/ld.so.conf.d下新建一个.conf文件，这种方法可以很灵活地将不同软件的库搜索路径区分开来
</code></pre><p>linux是默认不会去搜索当前目录的，所以我们必须将.so文件复制到默认路径下、或者使用LD_LIBRARY_PATH显示指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp libfoo.so /usr/lib</div><div class="line">./<span class="built_in">test</span></div><div class="line">rm <span class="_">-f</span> /usr/lib/libfoo.so</div></pre></td></tr></table></figure></p>
<p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://msdn.microsoft.com/zh-cn/library/ms235636.aspx" target="_blank" rel="external">http://msdn.microsoft.com/zh-cn/library/ms235636.aspx</a><br>    <a href="http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html" target="_blank" rel="external">http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html</a></p>
<h1 id="5-MinGW简介"><a href="#5-MinGW简介" class="headerlink" title="5. MinGW简介"></a><strong>5. MinGW简介</strong></h1><h2 id="0x1-MinGW是什么"><a href="#0x1-MinGW是什么" class="headerlink" title="0x1: MinGW是什么"></a><strong><em>0x1: MinGW是什么</em></strong></h2><p>MinGW(Minimalist GNU for Windows)，又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件(Win32API)、库和可执行文件</p>
<p>GCC支持的语言大多在MinGW也受支持，其中涵盖</p>
<pre><code>1. C 
2. Objective-C
3. Fortran
4. Ada
5. 对于C语言之外的语言，MinGW使用标准的GNU运行库，如C++使用GNU libstdc++ 
</code></pre><p>但是MinGW使用Windows中的C运行库。因此用MinGW开发的程序不需要额外的第三方DLL支持就可以直接在Windows下运行，而且也不一定必须遵从GPL许可证。这同时造成了MinGW开发的程序只能使用Win32API和跨平台的第三方库，而缺少POSIX支持 ，大多数GNU软件无法在不修改源代码的情况下用MinGW编译</p>
<p>GCC是一个原本用于Unix系统下编程的编译器。不过，现在GCC也有了许多Win32下的移植版本，目前GCC在windows下有三个移植版本</p>
<pre><code>1. MinGW
2. Cygwin
3. Djgpp
</code></pre><p>MinGW是Minimalistic GNU for Windows 的缩写。它是一个建立在GCC和binutils 项目上的编译器系统。和其他GCC的移植版相比，它可以说是最接近Win32的一个了。因为，MinGW几乎支持所有的Win32 API，这也是MinGW的特色之一。它所连接的程序，不需要任何第三方库就可以运行了。在某种程度上看，MinGW更像是VC的替代品</p>
<h2 id="0x3-编程示例"><a href="#0x3-编程示例" class="headerlink" title="0x3: 编程示例"></a><strong><em>0x3: 编程示例</em></strong></h2><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://www.mingw.org/" target="_blank" rel="external">http://www.mingw.org/</a><br>    <a href="https://code.google.com/p/msys-cn/wiki/ChapterThree" target="_blank" rel="external">https://code.google.com/p/msys-cn/wiki/ChapterThree</a><br>    <a href="http://wenku.baidu.com/view/c6f71522af45b307e87197a6.html" target="_blank" rel="external">http://wenku.baidu.com/view/c6f71522af45b307e87197a6.html</a></p>
<h1 id="6-CodeBlocks简介"><a href="#6-CodeBlocks简介" class="headerlink" title="6. CodeBlocks简介"></a><strong>6. CodeBlocks简介</strong></h1><p><strong><strong>Relevant Link:</strong></strong><br>    <a href="http://bbs.chinaunix.net/thread-3640636-1-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/thread-3640636-1-1.html</a><br>    <a href="http://zh.wikipedia.org/wiki/Code::Blocks" target="_blank" rel="external">http://zh.wikipedia.org/wiki/Code::Blocks</a><br>    <a href="http://blog.csdn.net/wtfmonking/article/details/17487705" target="_blank" rel="external">http://blog.csdn.net/wtfmonking/article/details/17487705</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java的内存回收机制]]></title>
      <url>http://HawkAaron.github.io/2015/05/16/Java%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>在Java中，它的内存管理包括两方面：内存分配（创建Java对象的时候）和内存回收，这两方面工作都是由JVM自动完成的，降低了Java程序员的学习难度，避免了像C/C++直接操作内存的危险。但是，也正因为内存管理完全由JVM负责，所以也使Java很多程序员不再关心内存分配，导致很多程序低效，耗内存。因此就有了Java程序员到最后应该去了解JVM，才能写出更高效，充分利用有限的内存的程序。<br><a id="more"></a></p>
<h1 id="1-Java在内存中的状态"><a href="#1-Java在内存中的状态" class="headerlink" title="1.Java在内存中的状态"></a>1.Java在内存中的状态</h1><p>首先我们先写一个代码为例子：</p>
<p>Person.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"> <span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">     String name; <span class="comment">// 姓名</span></div><div class="line"></div><div class="line">     Person friend;    <span class="comment">//朋友</span></div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span>();</div><div class="line">         <span class="keyword">this</span>.name = name;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>Test.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">         Person p1 = <span class="keyword">new</span> Person(<span class="string">"Kevin"</span>);</div><div class="line">         Person p2 = <span class="keyword">new</span> Person(<span class="string">"Rain"</span>);</div><div class="line">         Person p3 = <span class="keyword">new</span> Person(<span class="string">"Sunny"</span>);</div><div class="line"></div><div class="line">         p1.friend = p2;</div><div class="line">         p3 = p2;</div><div class="line">         p2 = <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>把上面Test.java中main方面里面的对象引用画成一个从main方法开始的对象引用图的话就是这样的（顶点是对象和引用，有向边是引用关系）：<br><img src="http://img.blog.csdn.net/20160803201433724" alt=""><br>当程序运行起来之后，把它在内存中的状态看成是有向图后，可以分为三种：</p>
<p><strong>1）可达状态</strong>：在一个对象创建后，有一个以上的引用变量引用它。在有向图中可以从起始顶点导航到该对象，那它就处于可达状态。</p>
<p><strong>2）可恢复状态</strong>：如果程序中某个对象不再有任何的引用变量引用它，它将先进入可恢复状态，此时从有向图的起始顶点不能再导航到该对象。在这个状态下，系统的垃圾回收机制准备回收该对象的所占用的内存，在回收之前，系统会调用finalize()方法进行资源清理，如果资源整理后重新让一个以上引用变量引用该对象，则这个对象会再次变为可达状态；否则就会进入不可达状态。</p>
<p><strong>3）不可达状态</strong>：当对象的所有关联都被切断，且系统调用finalize()方法进行资源清理后依旧没有使该对象变为可达状态，则这个对象将永久性失去引用并且变成不可达状态，系统才会真正的去回收该对象所占用的资源。</p>
<p>上述三种状态的转换图如下：<br><img src="http://img.blog.csdn.net/20160803201525068" alt=""></p>
<h1 id="2-Java对对象的4种引用"><a href="#2-Java对对象的4种引用" class="headerlink" title="2.Java对对象的4种引用"></a>2.Java对对象的4种引用</h1><p><strong>1）强引用</strong> ：创建一个对象并把这个对象直接赋给一个变量，eg ：Person person = new Person(“sunny”); 不管系统资源有么的紧张，强引用的对象都绝对不会被回收，即使他以后不会再用到。</p>
<p><strong>2）软引用</strong> ：通过SoftReference类实现，eg : SoftReference<person> p = new SoftReference<person>(new Person(“Rain”));,内存非常紧张的时候会被回收，其他时候不会被回收，所以在使用之前要判断是否为null从而判断他是否已经被回收了。</person></person></p>
<p><strong>3）弱引用 </strong>：通过WeakReference类实现，eg : WeakReference<person> p = new WeakReference<person>(new Person(“Rain”));不管内存是否足够，系统垃圾回收时必定会回收。</person></person></p>
<p><strong>4）虚引用</strong> ：不能单独使用，主要是用于追踪对象被垃圾回收的状态。通过PhantomReference类和引用队列ReferenceQueue类联合使用实现，eg ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"> <span class="keyword">import</span> java.lang.ref.PhantomReference;</div><div class="line"> <span class="keyword">import</span> java.lang.ref.ReferenceQueue;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">         <span class="comment">//创建一个对象</span></div><div class="line">         Person person = <span class="keyword">new</span> Person(<span class="string">"Sunny"</span>);    </div><div class="line">         <span class="comment">//创建一个引用队列    </span></div><div class="line">         ReferenceQueue&lt;Person&gt; rq = <span class="keyword">new</span> ReferenceQueue&lt;Person&gt;();</div><div class="line">         <span class="comment">//创建一个虚引用，让此虚引用引用到person对象</span></div><div class="line">         PhantomReference&lt;Person&gt; pr = <span class="keyword">new</span> PhantomReference&lt;Person&gt;(person, rq);</div><div class="line">         <span class="comment">//切断person引用变量和对象的引用</span></div><div class="line">         person = <span class="keyword">null</span>;</div><div class="line">         <span class="comment">//试图取出虚引用所引用的对象</span></div><div class="line">         <span class="comment">//发现程序并不能通过虚引用访问被引用对象，所以此处输出为null</span></div><div class="line">         System.out.println(pr.get());</div><div class="line">         <span class="comment">//强制垃圾回收</span></div><div class="line">         System.gc();</div><div class="line">         System.runFinalization();</div><div class="line">         <span class="comment">//因为一旦虚引用中的对象被回收后，该虚引用就会进入引用队列中</span></div><div class="line">         <span class="comment">//所以用队列中最先进入队列中引用与pr进行比较，输出true</span></div><div class="line">         System.out.println(rq.poll() == pr);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">null</div><div class="line">true</div></pre></td></tr></table></figure></p>
<h1 id="3-Java垃圾回收机制"><a href="#3-Java垃圾回收机制" class="headerlink" title="3.Java垃圾回收机制"></a>3.Java垃圾回收机制</h1><p>其实Java垃圾回收主要做的是两件事：1）内存回收 2）碎片整理</p>
<h2 id="3-1垃圾回收算法"><a href="#3-1垃圾回收算法" class="headerlink" title="3.1垃圾回收算法"></a>3.1垃圾回收算法</h2><p><strong>1）串行回收（只用一个CPU）和并行回收（多个CPU才有用）</strong>：串行回收是不管系统有多少个CPU，始终只用一个CPU来执行垃圾回收操作，而并行回收就是把整个回收工作拆分成多个部分，每个部分由一个CPU负责，从而让多个CPU并行回收。并行回收的执行效率很高，但复杂度增加，另外也有一些副作用，如内存随便增加。</p>
<p><strong>2）并发执行和应用程序停止</strong> ：应用程序停止（Stop-the-world）顾名思义，其垃圾回收方式在执行垃圾回收的同时会导致应用程序的暂停。并发执行的垃圾回收虽然不会导致应用程序的暂停，但由于并发执行垃圾需要解决和应用程序的执行冲突（应用程序可能在垃圾回收的过程修改对象），因此并发执行垃圾回收的系统开销比Stop-the-world高，而且执行时需要更多的堆内存。</p>
<p><strong>3）压缩和不压缩和复制 </strong>：</p>
<p>①支持压缩的垃圾回收器<strong>（标记-压缩 = 标记清除+压缩）</strong>会把所有的可达对象搬迁到一起，然后将之前占用的内存全部回收，减少了内存碎片。</p>
<p>②不压缩的垃圾回收器<strong>（标记-清除）</strong>要遍历两次，第一次先从跟开始访问所有可达对象，并将他们标记为可达状态，第二次便利整个内存区域，对未标记可达状态的对象进行回收处理。这种回收方式不压缩，不需要额外内存，但要两次遍历，会产生碎片</p>
<p>③<strong>复制</strong>式的垃圾回收器：将堆内存分成两个相同空间，从根（类似于前面的有向图起始顶点）开始访问每一个关联的可达对象，将空间A的全部可达对象复制到空间B，然后一次性回收空间A。对于该算法而言，因为只需访问所有的可达对象，将所有的可达对象复制走之后就直接回收整个空间，完全不用理会不可达对象，所以遍历空间的成本较小，但需要巨大的复制成本和较多的内存。<br><img src="http://img.blog.csdn.net/20160803201609641" alt=""></p>
<h2 id="3-2堆内存的分代回收"><a href="#3-2堆内存的分代回收" class="headerlink" title="3.2堆内存的分代回收"></a>3.2堆内存的分代回收</h2><p><strong>1）分代回收的依据</strong>：</p>
<p><strong>①对象生存时间的长短</strong>：大部分对象在Young期间就被回收</p>
<p><strong>②不同代采取不同的垃圾回收策略</strong>：新（生存时间短）老（生存时间长）对象之间很少存在引用</p>
<p><strong>2) 堆内存的分代：</strong></p>
<p><strong>①Young代 ：</strong></p>
<ol>
<li><p>回收机制 ：因为对象数量少，所以采用复制回收。</p>
</li>
<li><p>组成区域 ：由1个Eden区和2个Survivor区构成，同一时间的两个Survivor区，一个用来保存对象，另一个是空的；每次进行Young代垃圾回收的时候，就把Eden，From中的可达对象复制到To区域中，一些生存时间长的就复制到了老年代，接着清除Eden，From空间，最后原来的To空间变为From空间，原来的From空间变为To空间。</p>
</li>
<li><p>对象来源 ：绝大多数对象先分配到Eden区，一些大的对象会直接被分配到Old代中。</p>
</li>
<li><p>回收频率 ：因为Young代对象大部分很快进入不可达状态，因此回收频率高且回收速度快<br><img src="http://img.blog.csdn.net/20160803201657835" alt=""><br><img src="http://img.blog.csdn.net/20160803201744815" alt=""></p>
</li>
</ol>
<p><strong>②Old代 ：</strong></p>
<ol>
<li><p>回收机制 ：采用标记压缩算法回收。</p>
</li>
<li><p>对象来源 ：</p>
<ol>
<li><p>对象大直接进入老年代。</p>
</li>
<li><p>Young代中生存时间长的可达对象</p>
</li>
</ol>
</li>
<li><p>回收频率 ：因为很少对象会死掉，所以执行频率不高，而且需要较长时间来完成。</p>
</li>
</ol>
<p><strong>③Permanent代 ：</strong></p>
<ol>
<li><p>用      途 ：用来装载Class，方法等信息，默认为64M，不会被回收</p>
</li>
<li><p>对象来源 ：eg：对于像Hibernate，Spring这类喜欢AOP动态生成类的框架，往往会生成大量的动态代理类，因此需要更多的Permanent代内存。所以我们经常在调试Hibernate，Spring的时候经常遇到java.lang.OutOfMemoryError:PermGen space的错误，这就是Permanent代内存耗尽所导致的错误。</p>
</li>
<li><p>回收频率 ：不会被回收</p>
</li>
</ol>
<h2 id="3-3常见的垃圾回收器"><a href="#3-3常见的垃圾回收器" class="headerlink" title="3.3常见的垃圾回收器"></a>3.3常见的垃圾回收器</h2><p><strong>1）串行回收器</strong>（只使用一个CPU）：Young代采用串行复制算法；Old代使用串行标记压缩算法（三个阶段：标记mark—清除sweep—压缩compact），回收期间程序会产生暂停，</p>
<p><strong>2）并行回收器</strong>：对Young代采用的算法和串行回收器一样，只是增加了多CPU并行处理； 对Old代的处理和串行回收器完全一样，依旧是单线程。</p>
<p><strong>3）并行压缩回收器</strong>：对Young代处理采用与并行回收器完全一样的算法；只是对Old代采用了不同的算法，其实就是划分不同的区域，然后进行标记压缩算法：</p>
<p>① 将Old代划分成几个固定区域；</p>
<p>② mark阶段（多线程并行），标记可达对象；</p>
<p>③ summary阶段（串行执行），从最左边开始检验知道找到某个达到数值（可达对象密度小）的区域时，此区域及其右边区域进行压缩回收，其左端为密集区域</p>
<p>④ compact阶段（多线程并行），识别出需要装填的区域，多线程并行的把数据复制到这些区域中。经此过程后，Old代一端密集存在大量活动对象，另一端则存在大块空间。</p>
<p><strong>4）并发标识—清理回收（CMS）</strong>：对Young代处理采用与并行回收器完全一样的算法；只是对Old代采用了不同的算法，但归根待地还是标记清理算法：</p>
<p>① 初始标识（程序暂停）：标记被直接引用的对象(一级对象)；</p>
<p>② 并发标识（程序运行）：通过一级对象寻找其他可达对象；</p>
<p>③ 再标记（程序暂停）：多线程并行的重新标记之前可能因为并发而漏掉的对象（简单的说就是防遗漏）</p>
<p>④ 并发清理（程序运行）</p>
<h1 id="4-内存管理小技巧"><a href="#4-内存管理小技巧" class="headerlink" title="4.内存管理小技巧"></a>4.内存管理小技巧</h1><p>1）尽量使用直接量，eg：String javaStr = “小学徒的成长历程”;</p>
<p>2）使用StringBuilder和StringBuffer进行字符串连接等操作;</p>
<p>3）尽早释放无用对象;</p>
<p>4）尽量少使用静态变量;</p>
<p>5）缓存常用的对象:可以使用开源的开源缓存实现，eg：OSCache，Ehcache;</p>
<p>6）尽量不使用finalize()方法;</p>
<p>7）在必要的时候可以考虑使用软引用SoftReference。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql 远程数据库导入到本地数据库]]></title>
      <url>http://HawkAaron.github.io/2015/05/15/mysql-%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<pre><code>mysqldump -h192.168.0.1 -uNAME -pPASS --opt --compress DBS --skip-lock-tables | mysql -h127.0.0.1 -uroot -proot DBD 
</code></pre><h1 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h1><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.0.1</td>
<td>远程服务器IP</td>
</tr>
<tr>
<td>NAME</td>
<td>远程数据库登录名</td>
</tr>
<tr>
<td>PASS</td>
<td>远程数据库登录密码</td>
</tr>
<tr>
<td>DBS</td>
<td>远程数据库名（即：复制的源）</td>
</tr>
<tr>
<td>127.0.0.1</td>
<td>本地数据库服务器IP</td>
</tr>
<tr>
<td>root</td>
<td>本地数据库登录名（一般情况下都是这个）</td>
</tr>
<tr>
<td>root</td>
<td>本地数据库登录密码（一般情况下都是这个）</td>
</tr>
<tr>
<td>DBD</td>
<td>本地数据库名（即：复制的目的）</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h1 id="SQL解释："><a href="#SQL解释：" class="headerlink" title="SQL解释："></a>SQL解释：</h1><table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>mysqldump</td>
<td>mysql的一个专门用于拷贝操作的命令</td>
</tr>
<tr>
<td>–opt</td>
<td>操作的意思</td>
</tr>
<tr>
<td>–compress</td>
<td>压缩要传输的数据</td>
</tr>
<tr>
<td>–skip-lock</td>
<td>忽略锁住的表（加上这句能防止当表有外键时的报错）</td>
</tr>
<tr>
<td>-tables</td>
<td>某数据库所有表</td>
</tr>
<tr>
<td>-h</td>
<td>服务器名称</td>
</tr>
<tr>
<td>-u</td>
<td>用户名（后面无空格，直接加用户名）</td>
</tr>
<tr>
<td>-p</td>
<td>密码（后面无空格，直接加密码）</td>
</tr>
</tbody>
</table>
<h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>-h、-u、-p的后面没有空格，直接加IP、用户名和密码！！！ </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL忘记密码]]></title>
      <url>http://HawkAaron.github.io/2015/05/13/MySQL%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>如果是root密码：</p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>MySQL提供跳过访问控制的命令行参数，通过在命令行以此命令启动MySQL服务器：<br><strong>safe_mysqld –skip-grant-tables&amp; </strong><br>即可跳过MySQL的访问控制，任何人都可以在控制台以管理员的身份进入MySQL数据库。<br>需要注意的是在修改完密码以后要把MySQL服务器停掉重新启动才会生效<br><a id="more"></a></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>可以进行如下的步骤重新设置MySQL的root密码： </p>
<ol>
<li>首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。<br>因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 </li>
<li>修改MySQL的登录设置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/my.cnf</span></div><div class="line">``` </div><div class="line">在[mysqld]的段中加上一句：**skip-grant-tables **</div><div class="line">例如：</div></pre></td></tr></table></figure>
</li>
</ol>
<p>[mysqld]<br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br>skip-name-resolve<br>skip-grant-tables<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">保存并且退出vi。 </div><div class="line">3. 重新启动mysqld </div><div class="line">``` bash</div><div class="line"># /etc/init.d/mysqld restart </div><div class="line">Stopping MySQL: [ OK ] </div><div class="line">Starting MySQL: [ OK ]</div></pre></td></tr></table></figure></p>
<ol>
<li><p>登录并修改MySQL的root密码 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /usr/bin/mysql</span></div><div class="line">Welcome to the MySQL monitor. Commands end with ; or \g. </div><div class="line">Your MySQL connection id is 3 to server version: 3.23.56 </div><div class="line">Type ‘<span class="built_in">help</span>;’ or ‘\h’ <span class="keyword">for</span> help. Type ‘\c’ to clear the buffer. </div><div class="line">mysql&gt; USE mysql ; </div><div class="line">Reading table information <span class="keyword">for</span> completion of table and column names </div><div class="line">You can turn off this feature to get a quicker startup with -A </div><div class="line">Database changed </div><div class="line">mysql&gt; UPDATE user SET Password = password ( ‘new-password’ ) WHERE User = ‘root’ ; </div><div class="line">Query OK, 0 rows affected (0.00 sec) </div><div class="line">Rows matched: 2 Changed: 0 Warnings: 0 </div><div class="line">mysql&gt; flush privileges ; </div><div class="line">Query OK, 0 rows affected (0.01 sec) </div><div class="line">mysql&gt; quit </div><div class="line">Bye</div></pre></td></tr></table></figure>
</li>
<li><p>将MySQL的登录设置修改回来 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/my.cnf</span></div><div class="line">``` </div><div class="line">将刚才在[mysqld]的段中加上的skip-grant-tables删除 </div><div class="line">保存并且退出vi。 </div><div class="line">6. 重新启动mysqld </div><div class="line">``` bash</div><div class="line"><span class="comment"># /etc/init.d/mysqld restart </span></div><div class="line">Stopping MySQL: [ OK ] </div><div class="line">Starting MySQL: [ OK ]</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol>
<li>以系统管理员身份登陆系统。 </li>
<li>打开cmd, 运行命令 <code>net start</code> 查看mysql是否启动。启动的话就停止<code>net stop mysql</code>. </li>
<li>我的mysql安装在d:\usr\local\mysql4\bin下。 </li>
<li>跳过权限检查启动mysql。<br><code>d:\usr\local\mysql4\bin\mysqld-nt –skip-grant-tables</code></li>
<li>重新打开cmd。进到d:\usr\local\mysql4\bin下：<br><code>d:\usr\local\mysql4\bin\mysqladmin -uroot flush-privileges password “newpassword”</code><br><code>d:\usr\local\mysql4\bin\mysqladmin -u root -p shutdown 这句提示你重新输密码。</code></li>
<li>在cmd里<code>net start mysql</code> </li>
<li>搞定了。 </li>
</ol>
<h2 id="MySQL4-1以上版本一种密码错误问题的解决方法"><a href="#MySQL4-1以上版本一种密码错误问题的解决方法" class="headerlink" title="MySQL4.1以上版本一种密码错误问题的解决方法"></a>MySQL4.1以上版本一种密码错误问题的解决方法</h2><ol>
<li><code># SET PASSWORD FOR ’some_user’@’some_host’ = OLD_PASSWORD(‘newpwd’);</code></li>
<li><code># FLUSH PRIVILEGES;</code></li>
</ol>
<h2 id="Mysql数据库修复"><a href="#Mysql数据库修复" class="headerlink" title="Mysql数据库修复"></a>Mysql数据库修复</h2><pre><code>myisamchk -r -q d:\mysql\data\latin1\* 
</code></pre><p><code>r代表修复 
q代表快速</code></p>
<h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>如果你忘记了你的MYSQL的root口令的话，你可以通过下面的过程恢复。</p>
<ol>
<li>向mysqld server 发送kill命令关掉mysqld server(不是 kill -9),存放进程ID的文件通常在MYSQL的数据库所在的目录中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> `cat /mysql-data-directory/hostname.pid`</div></pre></td></tr></table></figure>
</li>
</ol>
<p>你必须是UNIX的root用户或者是你所运行的SERVER上的同等用户，才能执行这个操作。</p>
<ol>
<li>使用<code>--skip-grant-tables</code>参数来启动 mysqld。</li>
<li>使用<code>mysql -h hostname mysql</code>命令登录到mysqld server ，用grant命令改变口令。你也可以这样做：<code>mysqladmin -h hostname -u user password &#39;new password&#39;</code>。<br>（其实也可以用 <code>use mysql; update user set password =password(&#39;yourpass&#39;) where user=&#39;root&#39;</code>来做到。）</li>
<li>载入权限表： <code>mysqladmin -h hostname flush-privileges</code> ，或者使用 SQL 命令<code>FLUSH PRIVILEGES</code>。（当然，在这里，你也可以重启mysqld。）</li>
</ol>
<h1 id="方法四-一定要先备份"><a href="#方法四-一定要先备份" class="headerlink" title="方法四 (一定要先备份)"></a>方法四 (一定要先备份)</h1><ol>
<li>重新在另一台电脑上安装相同版本的MySQL</li>
<li>删除忘记密码的电脑中MySQL安装目录中\data\mysql的全部内容（要先停止MySQL服务）</li>
<li>Copy新装的电脑上MySQL安装目录中\data\mysql的全部内容 to 刚刚删除的目录中</li>
<li>启动MySQL服务</li>
</ol>
<p>综述：cmd到MySQL安装目录，关闭mysql服务 <strong><code>net stop mysql</code></strong>输入<strong><code>mysqld-nt --skip-grant-tables</code></strong> 此时cmd处于监听状态(这个留着不要关了)，新开一个cmd，切换到MySQL安装目录，输入mysql  进入MySQL命令行后修改root账户密码(<strong><code>use mysql;   update user set password=password(&#39;root&#39;) where user=&#39;root&#39;;  flush privileges;</code></strong>)<br>此方法只要到MySQL安装目录即可，注意安装的MySQL一定要有mysqld-nt，完全安装就行了，毕竟才100多M</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[oracle查看当前登陆的用户信息]]></title>
      <url>http://HawkAaron.github.io/2015/05/13/oracle%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E7%99%BB%E9%99%86%E7%9A%84%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>查看当前登陆的用户名：</p>
<pre><code>select user from dual;
</code></pre><p>或者</p>
<pre><code>select * from user_users;
</code></pre><p>或者</p>
<pre><code>show user
</code></pre><p>查看当前用户拥有的角色和权限：</p>
<pre><code>select * from user_role_privs;
select * from session_privs;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL ERROR2013完美解决方案]]></title>
      <url>http://HawkAaron.github.io/2015/04/17/MySQL-ERROR2013%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>这个错误一般是安装了多个MySQL服务器导致的，解决方案如下：<br><strong>1、进入MySQL安装目录</strong>：D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;<br><strong>2、输入mysqld-nt -remove</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;mysqld-nt -remove<br>The service doesn’t exist!<br><a id="more"></a><br><strong>3、输入mysqld-nt -install</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;mysqld-nt -install<br>Service successfully installed.<br><strong>4、输入net start mysql</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;net start mysql<br>MySQL 服务正在启动 ……………….<br>MySQL 服务无法启动。<br><strong>5、输入netstat -ano|findstr 3306</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;netstat -ano|findstr 3306<br>  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       5804<br><strong>6、输入taskkill -f -pid 5804（此处的5804即上面的进程ID）</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;taskkill -f -pid 5804<br>成功: 已终止 PID 为 5804 的进程。<br><strong>7、输入net start mysql</strong><br>D:\Program Files (x86)\MySQL\MySQL Server 5.0\bin&gt;net start mysql<br>MySQL 服务正在启动 .<br>MySQL 服务已经启动成功。<br><strong>8、输入mysql -uroot -p进入MySQL</strong></p>
<p>如果设置了环境变量，可在任意目录下执行以上命令</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle11g安装及使用详解]]></title>
      <url>http://HawkAaron.github.io/2015/04/10/Oracle11g%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>首先我们在官网下载Oracle11g，链接如下：<br><a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html" title="Oracle11g下载链接" target="_blank" rel="external">http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html</a><br>注意系统位数和文件个数<br><img src="http://img.blog.csdn.net/20150410221936614" alt=""><br>两个文件都要下载，过程可能比价漫长，可以敲会代码或者做几篇阅读理解缓解一下情绪（为接下来操蛋的安装过程做好充分的心理准备）<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装可以参考已下链接<br><a href="http://jingyan.baidu.com/article/e5c39bf58eff9239d760338b.html" target="_blank" rel="external">http://jingyan.baidu.com/article/e5c39bf58eff9239d760338b.html</a><br>这里要注意一点：可以无视所有的错误提示！（在第5步进行先决条件检查时由于系统原因可能会报错，此时可以按照安装教程忽略相关选项！）<br>另外要注意的是安装目录尽量在跟目录下，比如安装在D:\Oracle\下，而且目录不能包含中文及空格等非数字字母的字符（大部分国外的大型程序都这样，我们只能默默地接受了）</p>
<h1 id="环境变量检查"><a href="#环境变量检查" class="headerlink" title="环境变量检查"></a>环境变量检查</h1><p>使用前请配置环境变量（系统会自动配置，最好检查一下）：</p>
<h2 id="方法一：命令行-echo-PATH-命令"><a href="#方法一：命令行-echo-PATH-命令" class="headerlink" title="方法一：命令行 echo %PATH% 命令"></a>方法一：命令行 echo %PATH% 命令</h2><p><img src="http://img.blog.csdn.net/20150410222254232" alt=""><br>可以看见图中的环境变量的第一条目录即是刚才安装完的Oracle的bin目录（一般软件的bin目录下有我们用到的命令行工具，Oracle的bin命令里面有sqlplus）</p>
<h2 id="方法二：右击‘计算机’，选择‘属性’，‘高级系统配置’"><a href="#方法二：右击‘计算机’，选择‘属性’，‘高级系统配置’" class="headerlink" title="方法二：右击‘计算机’，选择‘属性’，‘高级系统配置’"></a>方法二：右击‘计算机’，选择‘属性’，‘高级系统配置’</h2><p><img src="http://img.blog.csdn.net/20150410222343106" alt=""><br><img src="http://img.blog.csdn.net/20150410222411545" alt=""><br><img src="http://img.blog.csdn.net/20150410222556299" alt=""><img src="http://img.blog.csdn.net/20150410222541124" alt=""><br><img src="http://img.blog.csdn.net/20150410222609937" alt=""><br>变量值的最前面即刚才安装的Oracle的bin目录<br>（若path中没有Oracle的bin目录则把刚才安装oracle的目录里面的bin找出来加进去就行了，正常情况下是自动加的，如果没有就是安装有问题了）</p>
<h1 id="登陆Oracle"><a href="#登陆Oracle" class="headerlink" title="登陆Oracle"></a>登陆Oracle</h1><p>登陆的方法有以下几种：</p>
<h2 id="sqlplus登陆oracle："><a href="#sqlplus登陆oracle：" class="headerlink" title="sqlplus登陆oracle："></a>sqlplus登陆oracle：</h2><ol>
<li><p>C: &gt; sqlplus “/as sysdba”   –以操作系统权限认证的oracle sys管理员登陆</p>
</li>
<li><p>C: &gt; sqlplus /nolog             –不在cmd或者terminal当中暴露密码的登陆方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SQL&gt; conn /as sysdba</div><div class="line">&amp;</div><div class="line">SQL&gt; conn sys/password as sysdba</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>C: &gt; sqlplus scott/tiger      –非管理员用户登陆</p>
</li>
<li><p>C: &gt; sqlplus scott/tiger@orcl    –非管理员用户使用tns别名登陆</p>
</li>
<li><p>C: &gt; sqlplus sys/password@orcl as sysdba –管理员用户使用tns别名登陆</p>
</li>
<li><p>C: &gt; sqlplus                       –不显露密码的登陆方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter user-name：sys</div><div class="line">Enter password：password as sysdba     --以sys用户登陆的话 必须要加上 as sysdba 子句</div></pre></td></tr></table></figure>
<p> <img src="http://img.blog.csdn.net/20150410222729400" alt=""><br> 这是我输入sqlplus后的效果，系统莫名其妙的提示输入用户名，用过MySQL的可能对这点感到很迷惑，一般安装完后都是root账户，但是oracle是个比MySQL强大很多倍的大型关系型数据库，用户名也有很多，如下：</p>
<pre><code>scott
sys  
system
sysman 
这些账户的密码设置会在安装过程中完成，其中system是我们设置的登陆口令，Scott也是可以在口令管理中管理的
</code></pre></li>
</ol>
<h3 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h3><p><a href="http://www.linuxidc.com/Linux/2011-03/33174.htm" target="_blank" rel="external">sqlplus详细使用方法</a><br><a href="http://baike.baidu.com/link?url=GAgntfVfaPWk9Oam_8bWSv37PdWx6xQ-wZDP2TWCy8GWDnQlMI5T6JqWcflkw9jmfb3JXyTAjkfN-3Qp8nbryK#1" target="_blank" rel="external">百度百科</a><br><a href="http://jingyan.baidu.com/article/6525d4b155767dac7d2e94e8.html" target="_blank" rel="external">Linux下操作方法</a></p>
<h2 id="使用Oracle控制台"><a href="#使用Oracle控制台" class="headerlink" title="使用Oracle控制台"></a>使用Oracle控制台</h2><p>打开chrome浏览器（或其它，不推荐使用IE），在地址栏中输入<a href="https://localhost:1158/em" target="_blank" rel="external">https://localhost:1158/em</a><br>可能会有不安全之类的提示，无视即可，输入用户名密码后就可以管理了<br><a href="http://jingyan.baidu.com/article/3c343ff72c71c10d3679636a.html" target="_blank" rel="external">具体的使用方法可以点此查看</a><br>不过控制台的连接速度可能很慢，如果不能忍受的话就用命令行吧</p>
<h2 id="第三方GUI管理工具"><a href="#第三方GUI管理工具" class="headerlink" title="第三方GUI管理工具"></a>第三方GUI管理工具</h2><p><a href="https://www.toadworld.com/?Redirected=true" target="_blank" rel="external">Toad</a></p>
<p><a href="http://jingyan.baidu.com/article/c85b7a6403acd1003bac950f.html" target="_blank" rel="external">PLSQL Developer</a></p>
<h1 id="管理Oracle"><a href="#管理Oracle" class="headerlink" title="管理Oracle"></a>管理Oracle</h1><p>Oracle是地球上目前最强大的关系型数据库，用过MySQL的人可能刚开始对Oracle无从下手，想想当初你玩MySQL的时候不也是配置环境变量，百度登陆方法等等，所以我们要有耐心。最后一句话：打好基础。</p>
]]></content>
    </entry>
    
  
  
</search>
